
li_can_slv_demo_stm32_nucleo_f103rb_canpie_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08004e8c  08004e8c  00014e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800524c  0800524c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800524c  0800524c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800524c  0800524c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800524c  0800524c  0001524c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005250  08005250  00015250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  20000070  080052c4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000884  080052c4  00020884  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee5f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024c8  00000000  00000000  0002eef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b18  00000000  00000000  000313c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e0  00000000  00000000  00031ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017660  00000000  00000000  000328b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a8ab  00000000  00000000  00049f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c900  00000000  00000000  000547c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d10c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032dc  00000000  00000000  000d1140  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e74 	.word	0x08004e74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004e74 	.word	0x08004e74

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f001 f82d 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fa6c 	bl	8002644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f001 f853 	bl	8001242 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f001 f80d 	bl	80011d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000458 	.word	0x20000458

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000458 	.word	0x20000458

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d101      	bne.n	8000266 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	e0ed      	b.n	8000442 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	2b00      	cmp	r3, #0
 8000270:	d102      	bne.n	8000278 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f002 f868 	bl	8002348 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f022 0202 	bic.w	r2, r2, #2
 8000286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000288:	f7ff ffb8 	bl	80001fc <HAL_GetTick>
 800028c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800028e:	e012      	b.n	80002b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000290:	f7ff ffb4 	bl	80001fc <HAL_GetTick>
 8000294:	4602      	mov	r2, r0
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	1ad3      	subs	r3, r2, r3
 800029a:	2b0a      	cmp	r3, #10
 800029c:	d90b      	bls.n	80002b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2205      	movs	r2, #5
 80002ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002b2:	2301      	movs	r3, #1
 80002b4:	e0c5      	b.n	8000442 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	f003 0302 	and.w	r3, r3, #2
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1e5      	bne.n	8000290 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f042 0201 	orr.w	r2, r2, #1
 80002d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80002d4:	f7ff ff92 	bl	80001fc <HAL_GetTick>
 80002d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80002da:	e012      	b.n	8000302 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80002dc:	f7ff ff8e 	bl	80001fc <HAL_GetTick>
 80002e0:	4602      	mov	r2, r0
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	2b0a      	cmp	r3, #10
 80002e8:	d90b      	bls.n	8000302 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2205      	movs	r2, #5
 80002fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80002fe:	2301      	movs	r3, #1
 8000300:	e09f      	b.n	8000442 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0e5      	beq.n	80002dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	7e1b      	ldrb	r3, [r3, #24]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d108      	bne.n	800032a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	e007      	b.n	800033a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	7e5b      	ldrb	r3, [r3, #25]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d108      	bne.n	8000354 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	e007      	b.n	8000364 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000362:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	7e9b      	ldrb	r3, [r3, #26]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d108      	bne.n	800037e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f042 0220 	orr.w	r2, r2, #32
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	e007      	b.n	800038e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f022 0220 	bic.w	r2, r2, #32
 800038c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	7edb      	ldrb	r3, [r3, #27]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d108      	bne.n	80003a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f022 0210 	bic.w	r2, r2, #16
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	e007      	b.n	80003b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f042 0210 	orr.w	r2, r2, #16
 80003b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	7f1b      	ldrb	r3, [r3, #28]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d108      	bne.n	80003d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f042 0208 	orr.w	r2, r2, #8
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	e007      	b.n	80003e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f022 0208 	bic.w	r2, r2, #8
 80003e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	7f5b      	ldrb	r3, [r3, #29]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d108      	bne.n	80003fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f042 0204 	orr.w	r2, r2, #4
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	e007      	b.n	800040c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f022 0204 	bic.w	r2, r2, #4
 800040a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	689a      	ldr	r2, [r3, #8]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	431a      	orrs	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	691b      	ldr	r3, [r3, #16]
 800041a:	431a      	orrs	r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	ea42 0103 	orr.w	r1, r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	430a      	orrs	r2, r1
 8000430:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2200      	movs	r2, #0
 8000436:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b082      	sub	sp, #8
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d101      	bne.n	800045c <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8000458:	2301      	movs	r3, #1
 800045a:	e015      	b.n	8000488 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f000 f924 	bl	80006aa <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f001 ffe0 	bl	8002428 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000476:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2200      	movs	r2, #0
 800047c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2200      	movs	r2, #0
 8000482:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000486:	2300      	movs	r3, #0
}
 8000488:	4618      	mov	r0, r3
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000490:	b480      	push	{r7}
 8000492:	b087      	sub	sp, #28
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004a6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80004a8:	7cfb      	ldrb	r3, [r7, #19]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d003      	beq.n	80004b6 <HAL_CAN_ConfigFilter+0x26>
 80004ae:	7cfb      	ldrb	r3, [r7, #19]
 80004b0:	2b02      	cmp	r3, #2
 80004b2:	f040 80aa 	bne.w	800060a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80004bc:	f043 0201 	orr.w	r2, r3, #1
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f003 031f 	and.w	r3, r3, #31
 80004ce:	2201      	movs	r2, #1
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	43db      	mvns	r3, r3
 80004e0:	401a      	ands	r2, r3
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	69db      	ldr	r3, [r3, #28]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d123      	bne.n	8000538 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	43db      	mvns	r3, r3
 80004fa:	401a      	ands	r2, r3
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800050e:	683a      	ldr	r2, [r7, #0]
 8000510:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000512:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	3248      	adds	r2, #72	; 0x48
 8000518:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800052c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800052e:	6979      	ldr	r1, [r7, #20]
 8000530:	3348      	adds	r3, #72	; 0x48
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	440b      	add	r3, r1
 8000536:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	69db      	ldr	r3, [r3, #28]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d122      	bne.n	8000586 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	431a      	orrs	r2, r3
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800055c:	683a      	ldr	r2, [r7, #0]
 800055e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000560:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3248      	adds	r2, #72	; 0x48
 8000566:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800057a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800057c:	6979      	ldr	r1, [r7, #20]
 800057e:	3348      	adds	r3, #72	; 0x48
 8000580:	00db      	lsls	r3, r3, #3
 8000582:	440b      	add	r3, r1
 8000584:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d109      	bne.n	80005a2 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	43db      	mvns	r3, r3
 8000598:	401a      	ands	r2, r3
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80005a0:	e007      	b.n	80005b2 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	431a      	orrs	r2, r3
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d109      	bne.n	80005ce <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	43db      	mvns	r3, r3
 80005c4:	401a      	ands	r2, r3
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80005cc:	e007      	b.n	80005de <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	431a      	orrs	r2, r3
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	6a1b      	ldr	r3, [r3, #32]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d107      	bne.n	80005f6 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	431a      	orrs	r2, r3
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80005fc:	f023 0201 	bic.w	r2, r3, #1
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000606:	2300      	movs	r3, #0
 8000608:	e006      	b.n	8000618 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800060e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
  }
}
 8000618:	4618      	mov	r0, r3
 800061a:	371c      	adds	r7, #28
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b084      	sub	sp, #16
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b01      	cmp	r3, #1
 8000634:	d12e      	bne.n	8000694 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2202      	movs	r2, #2
 800063a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f022 0201 	bic.w	r2, r2, #1
 800064c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800064e:	f7ff fdd5 	bl	80001fc <HAL_GetTick>
 8000652:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000654:	e012      	b.n	800067c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000656:	f7ff fdd1 	bl	80001fc <HAL_GetTick>
 800065a:	4602      	mov	r2, r0
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	2b0a      	cmp	r3, #10
 8000662:	d90b      	bls.n	800067c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000668:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2205      	movs	r2, #5
 8000674:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000678:	2301      	movs	r3, #1
 800067a:	e012      	b.n	80006a2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1e5      	bne.n	8000656 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000690:	2300      	movs	r3, #0
 8000692:	e006      	b.n	80006a2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000698:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80006a0:	2301      	movs	r3, #1
  }
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b084      	sub	sp, #16
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d133      	bne.n	8000726 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f042 0201 	orr.w	r2, r2, #1
 80006cc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80006ce:	f7ff fd95 	bl	80001fc <HAL_GetTick>
 80006d2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006d4:	e012      	b.n	80006fc <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006d6:	f7ff fd91 	bl	80001fc <HAL_GetTick>
 80006da:	4602      	mov	r2, r0
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	2b0a      	cmp	r3, #10
 80006e2:	d90b      	bls.n	80006fc <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2205      	movs	r2, #5
 80006f4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80006f8:	2301      	movs	r3, #1
 80006fa:	e01b      	b.n	8000734 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0e5      	beq.n	80006d6 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f022 0202 	bic.w	r2, r2, #2
 8000718:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2201      	movs	r2, #1
 800071e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8000722:	2300      	movs	r3, #0
 8000724:	e006      	b.n	8000734 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
  }
}
 8000734:	4618      	mov	r0, r3
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	; 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
 8000748:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000750:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800075a:	7ffb      	ldrb	r3, [r7, #31]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d003      	beq.n	8000768 <HAL_CAN_AddTxMessage+0x2c>
 8000760:	7ffb      	ldrb	r3, [r7, #31]
 8000762:	2b02      	cmp	r3, #2
 8000764:	f040 80b8 	bne.w	80008d8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800076e:	2b00      	cmp	r3, #0
 8000770:	d10a      	bne.n	8000788 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000778:	2b00      	cmp	r3, #0
 800077a:	d105      	bne.n	8000788 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000782:	2b00      	cmp	r3, #0
 8000784:	f000 80a0 	beq.w	80008c8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	0e1b      	lsrs	r3, r3, #24
 800078c:	f003 0303 	and.w	r3, r3, #3
 8000790:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	2b02      	cmp	r3, #2
 8000796:	d907      	bls.n	80007a8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800079c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e09e      	b.n	80008e6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80007a8:	2201      	movs	r2, #1
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	409a      	lsls	r2, r3
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d10d      	bne.n	80007d6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80007c4:	68f9      	ldr	r1, [r7, #12]
 80007c6:	6809      	ldr	r1, [r1, #0]
 80007c8:	431a      	orrs	r2, r3
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	3318      	adds	r3, #24
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	440b      	add	r3, r1
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	e00f      	b.n	80007f6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80007e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80007e6:	68f9      	ldr	r1, [r7, #12]
 80007e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80007ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	3318      	adds	r3, #24
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	440b      	add	r3, r1
 80007f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6819      	ldr	r1, [r3, #0]
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	691a      	ldr	r2, [r3, #16]
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	3318      	adds	r3, #24
 8000802:	011b      	lsls	r3, r3, #4
 8000804:	440b      	add	r3, r1
 8000806:	3304      	adds	r3, #4
 8000808:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	7d1b      	ldrb	r3, [r3, #20]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d111      	bne.n	8000836 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	3318      	adds	r3, #24
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	4413      	add	r3, r2
 800081e:	3304      	adds	r3, #4
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	6811      	ldr	r1, [r2, #0]
 8000826:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	3318      	adds	r3, #24
 800082e:	011b      	lsls	r3, r3, #4
 8000830:	440b      	add	r3, r1
 8000832:	3304      	adds	r3, #4
 8000834:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3307      	adds	r3, #7
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	061a      	lsls	r2, r3, #24
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	3306      	adds	r3, #6
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	041b      	lsls	r3, r3, #16
 8000846:	431a      	orrs	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3305      	adds	r3, #5
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	4313      	orrs	r3, r2
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	3204      	adds	r2, #4
 8000856:	7812      	ldrb	r2, [r2, #0]
 8000858:	4610      	mov	r0, r2
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	6811      	ldr	r1, [r2, #0]
 800085e:	ea43 0200 	orr.w	r2, r3, r0
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	011b      	lsls	r3, r3, #4
 8000866:	440b      	add	r3, r1
 8000868:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800086c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3303      	adds	r3, #3
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	061a      	lsls	r2, r3, #24
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3302      	adds	r3, #2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	041b      	lsls	r3, r3, #16
 800087e:	431a      	orrs	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3301      	adds	r3, #1
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	4313      	orrs	r3, r2
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	7812      	ldrb	r2, [r2, #0]
 800088e:	4610      	mov	r0, r2
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	6811      	ldr	r1, [r2, #0]
 8000894:	ea43 0200 	orr.w	r2, r3, r0
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	011b      	lsls	r3, r3, #4
 800089c:	440b      	add	r3, r1
 800089e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80008a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	3318      	adds	r3, #24
 80008ac:	011b      	lsls	r3, r3, #4
 80008ae:	4413      	add	r3, r2
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	6811      	ldr	r1, [r2, #0]
 80008b6:	f043 0201 	orr.w	r2, r3, #1
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	3318      	adds	r3, #24
 80008be:	011b      	lsls	r3, r3, #4
 80008c0:	440b      	add	r3, r1
 80008c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80008c4:	2300      	movs	r3, #0
 80008c6:	e00e      	b.n	80008e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e006      	b.n	80008e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
  }
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3724      	adds	r7, #36	; 0x24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80008f0:	b480      	push	{r7}
 80008f2:	b087      	sub	sp, #28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
 80008fc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000904:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000906:	7dfb      	ldrb	r3, [r7, #23]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d003      	beq.n	8000914 <HAL_CAN_GetRxMessage+0x24>
 800090c:	7dfb      	ldrb	r3, [r7, #23]
 800090e:	2b02      	cmp	r3, #2
 8000910:	f040 80f3 	bne.w	8000afa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10e      	bne.n	8000938 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	f003 0303 	and.w	r3, r3, #3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d116      	bne.n	8000956 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	e0e7      	b.n	8000b08 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	691b      	ldr	r3, [r3, #16]
 800093e:	f003 0303 	and.w	r3, r3, #3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d107      	bne.n	8000956 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e0d8      	b.n	8000b08 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	331b      	adds	r3, #27
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	4413      	add	r3, r2
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f003 0204 	and.w	r2, r3, #4
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d10c      	bne.n	800098e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	331b      	adds	r3, #27
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	4413      	add	r3, r2
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	0d5b      	lsrs	r3, r3, #21
 8000984:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	e00b      	b.n	80009a6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	331b      	adds	r3, #27
 8000996:	011b      	lsls	r3, r3, #4
 8000998:	4413      	add	r3, r2
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	08db      	lsrs	r3, r3, #3
 800099e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	331b      	adds	r3, #27
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	4413      	add	r3, r2
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f003 0202 	and.w	r2, r3, #2
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	331b      	adds	r3, #27
 80009c4:	011b      	lsls	r3, r3, #4
 80009c6:	4413      	add	r3, r2
 80009c8:	3304      	adds	r3, #4
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f003 020f 	and.w	r2, r3, #15
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	331b      	adds	r3, #27
 80009dc:	011b      	lsls	r3, r3, #4
 80009de:	4413      	add	r3, r2
 80009e0:	3304      	adds	r3, #4
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	331b      	adds	r3, #27
 80009f4:	011b      	lsls	r3, r3, #4
 80009f6:	4413      	add	r3, r2
 80009f8:	3304      	adds	r3, #4
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	0c1b      	lsrs	r3, r3, #16
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	011b      	lsls	r3, r3, #4
 8000a0c:	4413      	add	r3, r2
 8000a0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	011b      	lsls	r3, r3, #4
 8000a22:	4413      	add	r3, r2
 8000a24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	0a1a      	lsrs	r2, r3, #8
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	011b      	lsls	r3, r3, #4
 8000a3c:	4413      	add	r3, r2
 8000a3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	0c1a      	lsrs	r2, r3, #16
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	3302      	adds	r3, #2
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	011b      	lsls	r3, r3, #4
 8000a56:	4413      	add	r3, r2
 8000a58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	0e1a      	lsrs	r2, r3, #24
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	3303      	adds	r3, #3
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	011b      	lsls	r3, r3, #4
 8000a70:	4413      	add	r3, r2
 8000a72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	3304      	adds	r3, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	011b      	lsls	r3, r3, #4
 8000a88:	4413      	add	r3, r2
 8000a8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	0a1a      	lsrs	r2, r3, #8
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	3305      	adds	r3, #5
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	011b      	lsls	r3, r3, #4
 8000aa2:	4413      	add	r3, r2
 8000aa4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	0c1a      	lsrs	r2, r3, #16
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	3306      	adds	r3, #6
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	011b      	lsls	r3, r3, #4
 8000abc:	4413      	add	r3, r2
 8000abe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	0e1a      	lsrs	r2, r3, #24
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	3307      	adds	r3, #7
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d108      	bne.n	8000ae6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	68da      	ldr	r2, [r3, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f042 0220 	orr.w	r2, r2, #32
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	e007      	b.n	8000af6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	691a      	ldr	r2, [r3, #16]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f042 0220 	orr.w	r2, r2, #32
 8000af4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e006      	b.n	8000b08 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
  }
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	371c      	adds	r7, #28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr

08000b12 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b085      	sub	sp, #20
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b22:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d002      	beq.n	8000b30 <HAL_CAN_ActivateNotification+0x1e>
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d109      	bne.n	8000b44 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	6959      	ldr	r1, [r3, #20]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	683a      	ldr	r2, [r7, #0]
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	e006      	b.n	8000b52 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
  }
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b6c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d002      	beq.n	8000b7a <HAL_CAN_DeactivateNotification+0x1e>
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d10a      	bne.n	8000b90 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6959      	ldr	r1, [r3, #20]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	43da      	mvns	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	400a      	ands	r2, r1
 8000b8a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	e006      	b.n	8000b9e <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
  }
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d07c      	beq.n	8000ce8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d023      	beq.n	8000c40 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f002 fe50 	bl	80038b0 <HAL_CAN_TxMailbox0CompleteCallback>
 8000c10:	e016      	b.n	8000c40 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d004      	beq.n	8000c26 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
 8000c24:	e00c      	b.n	8000c40 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	f003 0308 	and.w	r3, r3, #8
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d004      	beq.n	8000c3a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
 8000c38:	e002      	b.n	8000c40 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f000 f965 	bl	8000f0a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d024      	beq.n	8000c94 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c52:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f002 fec6 	bl	80039f0 <HAL_CAN_TxMailbox1CompleteCallback>
 8000c64:	e016      	b.n	8000c94 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d004      	beq.n	8000c7a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
 8000c78:	e00c      	b.n	8000c94 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d004      	beq.n	8000c8e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c8c:	e002      	b.n	8000c94 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f000 f944 	bl	8000f1c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d024      	beq.n	8000ce8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ca6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f002 ff36 	bl	8003b24 <HAL_CAN_TxMailbox2CompleteCallback>
 8000cb8:	e016      	b.n	8000ce8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d004      	beq.n	8000cce <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
 8000ccc:	e00c      	b.n	8000ce8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d004      	beq.n	8000ce2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
 8000ce0:	e002      	b.n	8000ce8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f000 f923 	bl	8000f2e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000ce8:	6a3b      	ldr	r3, [r7, #32]
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00c      	beq.n	8000d0c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d007      	beq.n	8000d0c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2210      	movs	r2, #16
 8000d0a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00b      	beq.n	8000d2e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f003 0308 	and.w	r3, r3, #8
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2208      	movs	r2, #8
 8000d26:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f000 f909 	bl	8000f40 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000d2e:	6a3b      	ldr	r3, [r7, #32]
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d009      	beq.n	8000d4c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d002      	beq.n	8000d4c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f002 ff86 	bl	8003c58 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
 8000d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d00c      	beq.n	8000d70 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	f003 0310 	and.w	r3, r3, #16
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d007      	beq.n	8000d70 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2210      	movs	r2, #16
 8000d6e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000d70:	6a3b      	ldr	r3, [r7, #32]
 8000d72:	f003 0320 	and.w	r3, r3, #32
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00b      	beq.n	8000d92 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2208      	movs	r2, #8
 8000d8a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 f8e9 	bl	8000f64 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000d92:	6a3b      	ldr	r3, [r7, #32]
 8000d94:	f003 0310 	and.w	r3, r3, #16
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d009      	beq.n	8000db0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 f8d1 	bl	8000f52 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000db0:	6a3b      	ldr	r3, [r7, #32]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00b      	beq.n	8000dd2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	f003 0310 	and.w	r3, r3, #16
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d006      	beq.n	8000dd2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2210      	movs	r2, #16
 8000dca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 f8d2 	bl	8000f76 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000dd2:	6a3b      	ldr	r3, [r7, #32]
 8000dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00b      	beq.n	8000df4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2208      	movs	r2, #8
 8000dec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 f8ca 	bl	8000f88 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d075      	beq.n	8000eea <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d06c      	beq.n	8000ee2 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000e08:	6a3b      	ldr	r3, [r7, #32]
 8000e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d008      	beq.n	8000e24 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000e24:	6a3b      	ldr	r3, [r7, #32]
 8000e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d008      	beq.n	8000e40 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000e40:	6a3b      	ldr	r3, [r7, #32]
 8000e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d008      	beq.n	8000e5c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d03d      	beq.n	8000ee2 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d038      	beq.n	8000ee2 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000e76:	2b30      	cmp	r3, #48	; 0x30
 8000e78:	d017      	beq.n	8000eaa <HAL_CAN_IRQHandler+0x302>
 8000e7a:	2b30      	cmp	r3, #48	; 0x30
 8000e7c:	d804      	bhi.n	8000e88 <HAL_CAN_IRQHandler+0x2e0>
 8000e7e:	2b10      	cmp	r3, #16
 8000e80:	d009      	beq.n	8000e96 <HAL_CAN_IRQHandler+0x2ee>
 8000e82:	2b20      	cmp	r3, #32
 8000e84:	d00c      	beq.n	8000ea0 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000e86:	e024      	b.n	8000ed2 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000e88:	2b50      	cmp	r3, #80	; 0x50
 8000e8a:	d018      	beq.n	8000ebe <HAL_CAN_IRQHandler+0x316>
 8000e8c:	2b60      	cmp	r3, #96	; 0x60
 8000e8e:	d01b      	beq.n	8000ec8 <HAL_CAN_IRQHandler+0x320>
 8000e90:	2b40      	cmp	r3, #64	; 0x40
 8000e92:	d00f      	beq.n	8000eb4 <HAL_CAN_IRQHandler+0x30c>
            break;
 8000e94:	e01d      	b.n	8000ed2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000e9e:	e018      	b.n	8000ed2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea2:	f043 0310 	orr.w	r3, r3, #16
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ea8:	e013      	b.n	8000ed2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000eb2:	e00e      	b.n	8000ed2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ebc:	e009      	b.n	8000ed2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ec6:	e004      	b.n	8000ed2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ed0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	699a      	ldr	r2, [r3, #24]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000ee0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d008      	beq.n	8000f02 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f002 ff3d 	bl	8003d7c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr

08000f2e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr

08000f76 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fac:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d002      	beq.n	8000fba <HAL_CAN_ResetError+0x20>
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d103      	bne.n	8000fc2 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
 8000fc0:	e007      	b.n	8000fd2 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
	...

08000fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <__NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db0b      	blt.n	800106e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f003 021f 	and.w	r2, r3, #31
 800105c:	4906      	ldr	r1, [pc, #24]	; (8001078 <__NVIC_EnableIRQ+0x34>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	095b      	lsrs	r3, r3, #5
 8001064:	2001      	movs	r0, #1
 8001066:	fa00 f202 	lsl.w	r2, r0, r2
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db10      	blt.n	80010b0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4909      	ldr	r1, [pc, #36]	; (80010bc <__NVIC_DisableIRQ+0x40>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	3320      	adds	r3, #32
 80010a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010ac:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	490c      	ldr	r1, [pc, #48]	; (800110c <__NVIC_SetPriority+0x4c>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4908      	ldr	r1, [pc, #32]	; (8001110 <__NVIC_SetPriority+0x50>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	3b04      	subs	r3, #4
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	f04f 31ff 	mov.w	r1, #4294967295
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	4313      	orrs	r3, r2
         );
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001188:	d301      	bcc.n	800118e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2301      	movs	r3, #1
 800118c:	e00f      	b.n	80011ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <SysTick_Config+0x40>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001196:	210f      	movs	r1, #15
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f7ff ff90 	bl	80010c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <SysTick_Config+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <SysTick_Config+0x40>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff0b 	bl	8000fe0 <__NVIC_SetPriorityGrouping>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e4:	f7ff ff20 	bl	8001028 <__NVIC_GetPriorityGrouping>
 80011e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff ff90 	bl	8001114 <NVIC_EncodePriority>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff5f 	bl	80010c0 <__NVIC_SetPriority>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff13 	bl	8001044 <__NVIC_EnableIRQ>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff21 	bl	800107c <__NVIC_DisableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff94 	bl	8001178 <SysTick_Config>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b480      	push	{r7}
 800125e:	b08b      	sub	sp, #44	; 0x2c
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126e:	e127      	b.n	80014c0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001270:	2201      	movs	r2, #1
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	429a      	cmp	r2, r3
 800128a:	f040 8116 	bne.w	80014ba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b12      	cmp	r3, #18
 8001294:	d034      	beq.n	8001300 <HAL_GPIO_Init+0xa4>
 8001296:	2b12      	cmp	r3, #18
 8001298:	d80d      	bhi.n	80012b6 <HAL_GPIO_Init+0x5a>
 800129a:	2b02      	cmp	r3, #2
 800129c:	d02b      	beq.n	80012f6 <HAL_GPIO_Init+0x9a>
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d804      	bhi.n	80012ac <HAL_GPIO_Init+0x50>
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d031      	beq.n	800130a <HAL_GPIO_Init+0xae>
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d01c      	beq.n	80012e4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012aa:	e048      	b.n	800133e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d043      	beq.n	8001338 <HAL_GPIO_Init+0xdc>
 80012b0:	2b11      	cmp	r3, #17
 80012b2:	d01b      	beq.n	80012ec <HAL_GPIO_Init+0x90>
          break;
 80012b4:	e043      	b.n	800133e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012b6:	4a89      	ldr	r2, [pc, #548]	; (80014dc <HAL_GPIO_Init+0x280>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d026      	beq.n	800130a <HAL_GPIO_Init+0xae>
 80012bc:	4a87      	ldr	r2, [pc, #540]	; (80014dc <HAL_GPIO_Init+0x280>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d806      	bhi.n	80012d0 <HAL_GPIO_Init+0x74>
 80012c2:	4a87      	ldr	r2, [pc, #540]	; (80014e0 <HAL_GPIO_Init+0x284>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d020      	beq.n	800130a <HAL_GPIO_Init+0xae>
 80012c8:	4a86      	ldr	r2, [pc, #536]	; (80014e4 <HAL_GPIO_Init+0x288>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d01d      	beq.n	800130a <HAL_GPIO_Init+0xae>
          break;
 80012ce:	e036      	b.n	800133e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012d0:	4a85      	ldr	r2, [pc, #532]	; (80014e8 <HAL_GPIO_Init+0x28c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d019      	beq.n	800130a <HAL_GPIO_Init+0xae>
 80012d6:	4a85      	ldr	r2, [pc, #532]	; (80014ec <HAL_GPIO_Init+0x290>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d016      	beq.n	800130a <HAL_GPIO_Init+0xae>
 80012dc:	4a84      	ldr	r2, [pc, #528]	; (80014f0 <HAL_GPIO_Init+0x294>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0xae>
          break;
 80012e2:	e02c      	b.n	800133e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	623b      	str	r3, [r7, #32]
          break;
 80012ea:	e028      	b.n	800133e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	3304      	adds	r3, #4
 80012f2:	623b      	str	r3, [r7, #32]
          break;
 80012f4:	e023      	b.n	800133e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	3308      	adds	r3, #8
 80012fc:	623b      	str	r3, [r7, #32]
          break;
 80012fe:	e01e      	b.n	800133e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	330c      	adds	r3, #12
 8001306:	623b      	str	r3, [r7, #32]
          break;
 8001308:	e019      	b.n	800133e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001312:	2304      	movs	r3, #4
 8001314:	623b      	str	r3, [r7, #32]
          break;
 8001316:	e012      	b.n	800133e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d105      	bne.n	800132c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001320:	2308      	movs	r3, #8
 8001322:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	611a      	str	r2, [r3, #16]
          break;
 800132a:	e008      	b.n	800133e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800132c:	2308      	movs	r3, #8
 800132e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	615a      	str	r2, [r3, #20]
          break;
 8001336:	e002      	b.n	800133e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
          break;
 800133c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2bff      	cmp	r3, #255	; 0xff
 8001342:	d801      	bhi.n	8001348 <HAL_GPIO_Init+0xec>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	e001      	b.n	800134c <HAL_GPIO_Init+0xf0>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3304      	adds	r3, #4
 800134c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	2bff      	cmp	r3, #255	; 0xff
 8001352:	d802      	bhi.n	800135a <HAL_GPIO_Init+0xfe>
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x104>
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	3b08      	subs	r3, #8
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	210f      	movs	r1, #15
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	401a      	ands	r2, r3
 8001372:	6a39      	ldr	r1, [r7, #32]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	431a      	orrs	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 8096 	beq.w	80014ba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800138e:	4b59      	ldr	r3, [pc, #356]	; (80014f4 <HAL_GPIO_Init+0x298>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	4a58      	ldr	r2, [pc, #352]	; (80014f4 <HAL_GPIO_Init+0x298>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6193      	str	r3, [r2, #24]
 800139a:	4b56      	ldr	r3, [pc, #344]	; (80014f4 <HAL_GPIO_Init+0x298>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013a6:	4a54      	ldr	r2, [pc, #336]	; (80014f8 <HAL_GPIO_Init+0x29c>)
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	4013      	ands	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4b      	ldr	r2, [pc, #300]	; (80014fc <HAL_GPIO_Init+0x2a0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d013      	beq.n	80013fa <HAL_GPIO_Init+0x19e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4a      	ldr	r2, [pc, #296]	; (8001500 <HAL_GPIO_Init+0x2a4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d00d      	beq.n	80013f6 <HAL_GPIO_Init+0x19a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a49      	ldr	r2, [pc, #292]	; (8001504 <HAL_GPIO_Init+0x2a8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d007      	beq.n	80013f2 <HAL_GPIO_Init+0x196>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a48      	ldr	r2, [pc, #288]	; (8001508 <HAL_GPIO_Init+0x2ac>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_GPIO_Init+0x192>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x1a0>
 80013ee:	2304      	movs	r3, #4
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x1a0>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x1a0>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x1a0>
 80013fa:	2300      	movs	r3, #0
 80013fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fe:	f002 0203 	and.w	r2, r2, #3
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	4313      	orrs	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800140c:	493a      	ldr	r1, [pc, #232]	; (80014f8 <HAL_GPIO_Init+0x29c>)
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001426:	4b39      	ldr	r3, [pc, #228]	; (800150c <HAL_GPIO_Init+0x2b0>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4938      	ldr	r1, [pc, #224]	; (800150c <HAL_GPIO_Init+0x2b0>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	600b      	str	r3, [r1, #0]
 8001432:	e006      	b.n	8001442 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001434:	4b35      	ldr	r3, [pc, #212]	; (800150c <HAL_GPIO_Init+0x2b0>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	43db      	mvns	r3, r3
 800143c:	4933      	ldr	r1, [pc, #204]	; (800150c <HAL_GPIO_Init+0x2b0>)
 800143e:	4013      	ands	r3, r2
 8001440:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d006      	beq.n	800145c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800144e:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_GPIO_Init+0x2b0>)
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	492e      	ldr	r1, [pc, #184]	; (800150c <HAL_GPIO_Init+0x2b0>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	604b      	str	r3, [r1, #4]
 800145a:	e006      	b.n	800146a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <HAL_GPIO_Init+0x2b0>)
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	43db      	mvns	r3, r3
 8001464:	4929      	ldr	r1, [pc, #164]	; (800150c <HAL_GPIO_Init+0x2b0>)
 8001466:	4013      	ands	r3, r2
 8001468:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_GPIO_Init+0x2b0>)
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	4924      	ldr	r1, [pc, #144]	; (800150c <HAL_GPIO_Init+0x2b0>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	608b      	str	r3, [r1, #8]
 8001482:	e006      	b.n	8001492 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_GPIO_Init+0x2b0>)
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	43db      	mvns	r3, r3
 800148c:	491f      	ldr	r1, [pc, #124]	; (800150c <HAL_GPIO_Init+0x2b0>)
 800148e:	4013      	ands	r3, r2
 8001490:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d006      	beq.n	80014ac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_GPIO_Init+0x2b0>)
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	491a      	ldr	r1, [pc, #104]	; (800150c <HAL_GPIO_Init+0x2b0>)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	60cb      	str	r3, [r1, #12]
 80014aa:	e006      	b.n	80014ba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_GPIO_Init+0x2b0>)
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4915      	ldr	r1, [pc, #84]	; (800150c <HAL_GPIO_Init+0x2b0>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	3301      	adds	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f47f aed0 	bne.w	8001270 <HAL_GPIO_Init+0x14>
  }
}
 80014d0:	bf00      	nop
 80014d2:	372c      	adds	r7, #44	; 0x2c
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	10210000 	.word	0x10210000
 80014e0:	10110000 	.word	0x10110000
 80014e4:	10120000 	.word	0x10120000
 80014e8:	10310000 	.word	0x10310000
 80014ec:	10320000 	.word	0x10320000
 80014f0:	10220000 	.word	0x10220000
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010000 	.word	0x40010000
 80014fc:	40010800 	.word	0x40010800
 8001500:	40010c00 	.word	0x40010c00
 8001504:	40011000 	.word	0x40011000
 8001508:	40011400 	.word	0x40011400
 800150c:	40010400 	.word	0x40010400

08001510 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800151e:	e09a      	b.n	8001656 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001520:	2201      	movs	r2, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 808d 	beq.w	8001650 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001536:	4a4e      	ldr	r2, [pc, #312]	; (8001670 <HAL_GPIO_DeInit+0x160>)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4013      	ands	r3, r2
 8001556:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a46      	ldr	r2, [pc, #280]	; (8001674 <HAL_GPIO_DeInit+0x164>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d013      	beq.n	8001588 <HAL_GPIO_DeInit+0x78>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a45      	ldr	r2, [pc, #276]	; (8001678 <HAL_GPIO_DeInit+0x168>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d00d      	beq.n	8001584 <HAL_GPIO_DeInit+0x74>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a44      	ldr	r2, [pc, #272]	; (800167c <HAL_GPIO_DeInit+0x16c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d007      	beq.n	8001580 <HAL_GPIO_DeInit+0x70>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a43      	ldr	r2, [pc, #268]	; (8001680 <HAL_GPIO_DeInit+0x170>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d101      	bne.n	800157c <HAL_GPIO_DeInit+0x6c>
 8001578:	2303      	movs	r3, #3
 800157a:	e006      	b.n	800158a <HAL_GPIO_DeInit+0x7a>
 800157c:	2304      	movs	r3, #4
 800157e:	e004      	b.n	800158a <HAL_GPIO_DeInit+0x7a>
 8001580:	2302      	movs	r3, #2
 8001582:	e002      	b.n	800158a <HAL_GPIO_DeInit+0x7a>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_GPIO_DeInit+0x7a>
 8001588:	2300      	movs	r3, #0
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	f002 0203 	and.w	r2, r2, #3
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	4093      	lsls	r3, r2
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	429a      	cmp	r2, r3
 8001598:	d132      	bne.n	8001600 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	220f      	movs	r2, #15
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80015aa:	4a31      	ldr	r2, [pc, #196]	; (8001670 <HAL_GPIO_DeInit+0x160>)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3302      	adds	r3, #2
 80015b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	43da      	mvns	r2, r3
 80015ba:	482d      	ldr	r0, [pc, #180]	; (8001670 <HAL_GPIO_DeInit+0x160>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	400a      	ands	r2, r1
 80015c2:	3302      	adds	r3, #2
 80015c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80015c8:	4b2e      	ldr	r3, [pc, #184]	; (8001684 <HAL_GPIO_DeInit+0x174>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	492c      	ldr	r1, [pc, #176]	; (8001684 <HAL_GPIO_DeInit+0x174>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80015d6:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <HAL_GPIO_DeInit+0x174>)
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	43db      	mvns	r3, r3
 80015de:	4929      	ldr	r1, [pc, #164]	; (8001684 <HAL_GPIO_DeInit+0x174>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <HAL_GPIO_DeInit+0x174>)
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	4925      	ldr	r1, [pc, #148]	; (8001684 <HAL_GPIO_DeInit+0x174>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80015f2:	4b24      	ldr	r3, [pc, #144]	; (8001684 <HAL_GPIO_DeInit+0x174>)
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	4922      	ldr	r1, [pc, #136]	; (8001684 <HAL_GPIO_DeInit+0x174>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2bff      	cmp	r3, #255	; 0xff
 8001604:	d801      	bhi.n	800160a <HAL_GPIO_DeInit+0xfa>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	e001      	b.n	800160e <HAL_GPIO_DeInit+0xfe>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3304      	adds	r3, #4
 800160e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2bff      	cmp	r3, #255	; 0xff
 8001614:	d802      	bhi.n	800161c <HAL_GPIO_DeInit+0x10c>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	e002      	b.n	8001622 <HAL_GPIO_DeInit+0x112>
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	3b08      	subs	r3, #8
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	210f      	movs	r1, #15
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	fa01 f303 	lsl.w	r3, r1, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	401a      	ands	r2, r3
 8001634:	2104      	movs	r1, #4
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	431a      	orrs	r2, r3
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	43db      	mvns	r3, r3
 800164a:	401a      	ands	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	3301      	adds	r3, #1
 8001654:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	fa22 f303 	lsr.w	r3, r2, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	f47f af5e 	bne.w	8001520 <HAL_GPIO_DeInit+0x10>
  }
}
 8001664:	bf00      	nop
 8001666:	3724      	adds	r7, #36	; 0x24
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40010000 	.word	0x40010000
 8001674:	40010800 	.word	0x40010800
 8001678:	40010c00 	.word	0x40010c00
 800167c:	40011000 	.word	0x40011000
 8001680:	40011400 	.word	0x40011400
 8001684:	40010400 	.word	0x40010400

08001688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001698:	787b      	ldrb	r3, [r7, #1]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016a4:	e003      	b.n	80016ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016a6:	887b      	ldrh	r3, [r7, #2]
 80016a8:	041a      	lsls	r2, r3, #16
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	611a      	str	r2, [r3, #16]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d006      	beq.n	80016dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f806 	bl	80016e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40010400 	.word	0x40010400

080016e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e26c      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8087 	beq.w	800182a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800171c:	4b92      	ldr	r3, [pc, #584]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b04      	cmp	r3, #4
 8001726:	d00c      	beq.n	8001742 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001728:	4b8f      	ldr	r3, [pc, #572]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b08      	cmp	r3, #8
 8001732:	d112      	bne.n	800175a <HAL_RCC_OscConfig+0x5e>
 8001734:	4b8c      	ldr	r3, [pc, #560]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001740:	d10b      	bne.n	800175a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001742:	4b89      	ldr	r3, [pc, #548]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d06c      	beq.n	8001828 <HAL_RCC_OscConfig+0x12c>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d168      	bne.n	8001828 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e246      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x76>
 8001764:	4b80      	ldr	r3, [pc, #512]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a7f      	ldr	r2, [pc, #508]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800176a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e02e      	b.n	80017d0 <HAL_RCC_OscConfig+0xd4>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x98>
 800177a:	4b7b      	ldr	r3, [pc, #492]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a7a      	ldr	r2, [pc, #488]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b78      	ldr	r3, [pc, #480]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a77      	ldr	r2, [pc, #476]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800178c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e01d      	b.n	80017d0 <HAL_RCC_OscConfig+0xd4>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0xbc>
 800179e:	4b72      	ldr	r3, [pc, #456]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a71      	ldr	r2, [pc, #452]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b6f      	ldr	r3, [pc, #444]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a6e      	ldr	r2, [pc, #440]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0xd4>
 80017b8:	4b6b      	ldr	r3, [pc, #428]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a6a      	ldr	r2, [pc, #424]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b68      	ldr	r3, [pc, #416]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a67      	ldr	r2, [pc, #412]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d013      	beq.n	8001800 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7fe fd10 	bl	80001fc <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e0:	f7fe fd0c 	bl	80001fc <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e1fa      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b5d      	ldr	r3, [pc, #372]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0xe4>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7fe fcfc 	bl	80001fc <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7fe fcf8 	bl	80001fc <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e1e6      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x10c>
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d063      	beq.n	80018fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001836:	4b4c      	ldr	r3, [pc, #304]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001842:	4b49      	ldr	r3, [pc, #292]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b08      	cmp	r3, #8
 800184c:	d11c      	bne.n	8001888 <HAL_RCC_OscConfig+0x18c>
 800184e:	4b46      	ldr	r3, [pc, #280]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d116      	bne.n	8001888 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	4b43      	ldr	r3, [pc, #268]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x176>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e1ba      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4939      	ldr	r1, [pc, #228]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	e03a      	b.n	80018fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001890:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_RCC_OscConfig+0x270>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7fe fcb1 	bl	80001fc <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189e:	f7fe fcad 	bl	80001fc <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e19b      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4927      	ldr	r1, [pc, #156]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
 80018d0:	e015      	b.n	80018fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_RCC_OscConfig+0x270>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7fe fc90 	bl	80001fc <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e0:	f7fe fc8c 	bl	80001fc <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e17a      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d03a      	beq.n	8001980 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d019      	beq.n	8001946 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_RCC_OscConfig+0x274>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001918:	f7fe fc70 	bl	80001fc <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001920:	f7fe fc6c 	bl	80001fc <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e15a      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_RCC_OscConfig+0x26c>)
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800193e:	2001      	movs	r0, #1
 8001940:	f000 fada 	bl	8001ef8 <RCC_Delay>
 8001944:	e01c      	b.n	8001980 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_RCC_OscConfig+0x274>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7fe fc56 	bl	80001fc <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001952:	e00f      	b.n	8001974 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001954:	f7fe fc52 	bl	80001fc <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d908      	bls.n	8001974 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e140      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	42420000 	.word	0x42420000
 8001970:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001974:	4b9e      	ldr	r3, [pc, #632]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1e9      	bne.n	8001954 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a6 	beq.w	8001ada <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001992:	4b97      	ldr	r3, [pc, #604]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10d      	bne.n	80019ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	4b94      	ldr	r3, [pc, #592]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	4a93      	ldr	r2, [pc, #588]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a8:	61d3      	str	r3, [r2, #28]
 80019aa:	4b91      	ldr	r3, [pc, #580]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b6:	2301      	movs	r3, #1
 80019b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b8e      	ldr	r3, [pc, #568]	; (8001bf4 <HAL_RCC_OscConfig+0x4f8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c6:	4b8b      	ldr	r3, [pc, #556]	; (8001bf4 <HAL_RCC_OscConfig+0x4f8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a8a      	ldr	r2, [pc, #552]	; (8001bf4 <HAL_RCC_OscConfig+0x4f8>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d2:	f7fe fc13 	bl	80001fc <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019da:	f7fe fc0f 	bl	80001fc <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b64      	cmp	r3, #100	; 0x64
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e0fd      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	4b81      	ldr	r3, [pc, #516]	; (8001bf4 <HAL_RCC_OscConfig+0x4f8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x312>
 8001a00:	4b7b      	ldr	r3, [pc, #492]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4a7a      	ldr	r2, [pc, #488]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6213      	str	r3, [r2, #32]
 8001a0c:	e02d      	b.n	8001a6a <HAL_RCC_OscConfig+0x36e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x334>
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a75      	ldr	r2, [pc, #468]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6213      	str	r3, [r2, #32]
 8001a22:	4b73      	ldr	r3, [pc, #460]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a72      	ldr	r2, [pc, #456]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	6213      	str	r3, [r2, #32]
 8001a2e:	e01c      	b.n	8001a6a <HAL_RCC_OscConfig+0x36e>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	d10c      	bne.n	8001a52 <HAL_RCC_OscConfig+0x356>
 8001a38:	4b6d      	ldr	r3, [pc, #436]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4a6c      	ldr	r2, [pc, #432]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	6213      	str	r3, [r2, #32]
 8001a44:	4b6a      	ldr	r3, [pc, #424]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	4a69      	ldr	r2, [pc, #420]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6213      	str	r3, [r2, #32]
 8001a50:	e00b      	b.n	8001a6a <HAL_RCC_OscConfig+0x36e>
 8001a52:	4b67      	ldr	r3, [pc, #412]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4a66      	ldr	r2, [pc, #408]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6213      	str	r3, [r2, #32]
 8001a5e:	4b64      	ldr	r3, [pc, #400]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a63      	ldr	r2, [pc, #396]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	f023 0304 	bic.w	r3, r3, #4
 8001a68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d015      	beq.n	8001a9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a72:	f7fe fbc3 	bl	80001fc <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7fe fbbf 	bl	80001fc <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e0ab      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a90:	4b57      	ldr	r3, [pc, #348]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0ee      	beq.n	8001a7a <HAL_RCC_OscConfig+0x37e>
 8001a9c:	e014      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9e:	f7fe fbad 	bl	80001fc <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa4:	e00a      	b.n	8001abc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa6:	f7fe fba9 	bl	80001fc <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e095      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abc:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1ee      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d105      	bne.n	8001ada <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ace:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	4a47      	ldr	r2, [pc, #284]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8081 	beq.w	8001be6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae4:	4b42      	ldr	r3, [pc, #264]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d061      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d146      	bne.n	8001b86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af8:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <HAL_RCC_OscConfig+0x4fc>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7fe fb7d 	bl	80001fc <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b06:	f7fe fb79 	bl	80001fc <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e067      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b18:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	d108      	bne.n	8001b40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	492d      	ldr	r1, [pc, #180]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a19      	ldr	r1, [r3, #32]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	430b      	orrs	r3, r1
 8001b52:	4927      	ldr	r1, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_RCC_OscConfig+0x4fc>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7fe fb4d 	bl	80001fc <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b66:	f7fe fb49 	bl	80001fc <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e037      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x46a>
 8001b84:	e02f      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <HAL_RCC_OscConfig+0x4fc>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7fe fb36 	bl	80001fc <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b94:	f7fe fb32 	bl	80001fc <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e020      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x498>
 8001bb2:	e018      	b.n	8001be6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e013      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	42420060 	.word	0x42420060

08001bfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0d0      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c10:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d910      	bls.n	8001c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b67      	ldr	r3, [pc, #412]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 0207 	bic.w	r2, r3, #7
 8001c26:	4965      	ldr	r1, [pc, #404]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0b8      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d020      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c58:	4b59      	ldr	r3, [pc, #356]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a58      	ldr	r2, [pc, #352]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c70:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c7c:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	494d      	ldr	r1, [pc, #308]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d040      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d115      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e07f      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e073      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06b      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4936      	ldr	r1, [pc, #216]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cec:	f7fe fa86 	bl	80001fc <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf4:	f7fe fa82 	bl	80001fc <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e053      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 020c 	and.w	r2, r3, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1eb      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d210      	bcs.n	8001d4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0207 	bic.w	r2, r3, #7
 8001d32:	4922      	ldr	r1, [pc, #136]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e032      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4916      	ldr	r1, [pc, #88]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	490e      	ldr	r1, [pc, #56]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d8a:	f000 f821 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d8e:	4601      	mov	r1, r0
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9c:	5cd3      	ldrb	r3, [r2, r3]
 8001d9e:	fa21 f303 	lsr.w	r3, r1, r3
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1d0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe f9e4 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08004ef4 	.word	0x08004ef4
 8001dc8:	20000008 	.word	0x20000008
 8001dcc:	20000000 	.word	0x20000000

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b490      	push	{r4, r7}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001dd8:	1d3c      	adds	r4, r7, #4
 8001dda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ddc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dfa:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d002      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x40>
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_GetSysClockFreq+0x46>
 8001e0e:	e02d      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e12:	623b      	str	r3, [r7, #32]
      break;
 8001e14:	e02d      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	0c9b      	lsrs	r3, r3, #18
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e22:	4413      	add	r3, r2
 8001e24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	0c5b      	lsrs	r3, r3, #17
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e42:	4413      	add	r3, r2
 8001e44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e4e:	fb02 f203 	mul.w	r2, r2, r3
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	e004      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	4a0c      	ldr	r2, [pc, #48]	; (8001e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	623b      	str	r3, [r7, #32]
      break;
 8001e6a:	e002      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e6e:	623b      	str	r3, [r7, #32]
      break;
 8001e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e72:	6a3b      	ldr	r3, [r7, #32]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3728      	adds	r7, #40	; 0x28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc90      	pop	{r4, r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	08004e8c 	.word	0x08004e8c
 8001e84:	08004e9c 	.word	0x08004e9c
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	007a1200 	.word	0x007a1200
 8001e90:	003d0900 	.word	0x003d0900

08001e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e98:	4b02      	ldr	r3, [pc, #8]	; (8001ea4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eac:	f7ff fff2 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001eb0:	4601      	mov	r1, r0
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	4a03      	ldr	r2, [pc, #12]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	08004f04 	.word	0x08004f04

08001ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ed4:	f7ff ffde 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001ed8:	4601      	mov	r1, r0
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	0adb      	lsrs	r3, r3, #11
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4a03      	ldr	r2, [pc, #12]	; (8001ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee6:	5cd3      	ldrb	r3, [r2, r3]
 8001ee8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	08004f04 	.word	0x08004f04

08001ef8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <RCC_Delay+0x34>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <RCC_Delay+0x38>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0a5b      	lsrs	r3, r3, #9
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f14:	bf00      	nop
  }
  while (Delay --);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1e5a      	subs	r2, r3, #1
 8001f1a:	60fa      	str	r2, [r7, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1f9      	bne.n	8001f14 <RCC_Delay+0x1c>
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	10624dd3 	.word	0x10624dd3

08001f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e03f      	b.n	8001fc6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fd18 	bl	8002990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2224      	movs	r2, #36	; 0x24
 8001f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f90b 	bl	8002194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695a      	ldr	r2, [r3, #20]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b088      	sub	sp, #32
 8001fd2:	af02      	add	r7, sp, #8
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	f040 8083 	bne.w	80020f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_UART_Transmit+0x2e>
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e07b      	b.n	80020f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_UART_Transmit+0x40>
 800200a:	2302      	movs	r3, #2
 800200c:	e074      	b.n	80020f8 <HAL_UART_Transmit+0x12a>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2221      	movs	r2, #33	; 0x21
 8002020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002024:	f7fe f8ea 	bl	80001fc <HAL_GetTick>
 8002028:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	88fa      	ldrh	r2, [r7, #6]
 800202e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	88fa      	ldrh	r2, [r7, #6]
 8002034:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002036:	e042      	b.n	80020be <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800204e:	d122      	bne.n	8002096 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2200      	movs	r2, #0
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f850 	bl	8002100 <UART_WaitOnFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e046      	b.n	80020f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800207c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	3302      	adds	r3, #2
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	e017      	b.n	80020be <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	3301      	adds	r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	e013      	b.n	80020be <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2200      	movs	r2, #0
 800209e:	2180      	movs	r1, #128	; 0x80
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f82d 	bl	8002100 <UART_WaitOnFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e023      	b.n	80020f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	60ba      	str	r2, [r7, #8]
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1b7      	bne.n	8002038 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2200      	movs	r2, #0
 80020d0:	2140      	movs	r1, #64	; 0x40
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f814 	bl	8002100 <UART_WaitOnFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e00a      	b.n	80020f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e000      	b.n	80020f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80020f6:	2302      	movs	r3, #2
  }
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002110:	e02c      	b.n	800216c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002118:	d028      	beq.n	800216c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d007      	beq.n	8002130 <UART_WaitOnFlagUntilTimeout+0x30>
 8002120:	f7fe f86c 	bl	80001fc <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	429a      	cmp	r2, r3
 800212e:	d21d      	bcs.n	800216c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800213e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e00f      	b.n	800218c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4013      	ands	r3, r2
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	429a      	cmp	r2, r3
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	429a      	cmp	r2, r3
 8002188:	d0c3      	beq.n	8002112 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021ce:	f023 030c 	bic.w	r3, r3, #12
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	68f9      	ldr	r1, [r7, #12]
 80021d8:	430b      	orrs	r3, r1
 80021da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a52      	ldr	r2, [pc, #328]	; (8002340 <UART_SetConfig+0x1ac>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d14e      	bne.n	800229a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021fc:	f7ff fe68 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 8002200:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	009a      	lsls	r2, r3, #2
 800220c:	441a      	add	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	fbb2 f3f3 	udiv	r3, r2, r3
 8002218:	4a4a      	ldr	r2, [pc, #296]	; (8002344 <UART_SetConfig+0x1b0>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	0119      	lsls	r1, r3, #4
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	009a      	lsls	r2, r3, #2
 800222c:	441a      	add	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	fbb2 f2f3 	udiv	r2, r2, r3
 8002238:	4b42      	ldr	r3, [pc, #264]	; (8002344 <UART_SetConfig+0x1b0>)
 800223a:	fba3 0302 	umull	r0, r3, r3, r2
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	2064      	movs	r0, #100	; 0x64
 8002242:	fb00 f303 	mul.w	r3, r0, r3
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	3332      	adds	r3, #50	; 0x32
 800224c:	4a3d      	ldr	r2, [pc, #244]	; (8002344 <UART_SetConfig+0x1b0>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002258:	4419      	add	r1, r3
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	009a      	lsls	r2, r3, #2
 8002264:	441a      	add	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002270:	4b34      	ldr	r3, [pc, #208]	; (8002344 <UART_SetConfig+0x1b0>)
 8002272:	fba3 0302 	umull	r0, r3, r3, r2
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2064      	movs	r0, #100	; 0x64
 800227a:	fb00 f303 	mul.w	r3, r0, r3
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	3332      	adds	r3, #50	; 0x32
 8002284:	4a2f      	ldr	r2, [pc, #188]	; (8002344 <UART_SetConfig+0x1b0>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	f003 020f 	and.w	r2, r3, #15
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	440a      	add	r2, r1
 8002296:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002298:	e04d      	b.n	8002336 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800229a:	f7ff fe05 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 800229e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	009a      	lsls	r2, r3, #2
 80022aa:	441a      	add	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b6:	4a23      	ldr	r2, [pc, #140]	; (8002344 <UART_SetConfig+0x1b0>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	095b      	lsrs	r3, r3, #5
 80022be:	0119      	lsls	r1, r3, #4
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	009a      	lsls	r2, r3, #2
 80022ca:	441a      	add	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80022d6:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <UART_SetConfig+0x1b0>)
 80022d8:	fba3 0302 	umull	r0, r3, r3, r2
 80022dc:	095b      	lsrs	r3, r3, #5
 80022de:	2064      	movs	r0, #100	; 0x64
 80022e0:	fb00 f303 	mul.w	r3, r0, r3
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	3332      	adds	r3, #50	; 0x32
 80022ea:	4a16      	ldr	r2, [pc, #88]	; (8002344 <UART_SetConfig+0x1b0>)
 80022ec:	fba2 2303 	umull	r2, r3, r2, r3
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f6:	4419      	add	r1, r3
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	009a      	lsls	r2, r3, #2
 8002302:	441a      	add	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	fbb2 f2f3 	udiv	r2, r2, r3
 800230e:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <UART_SetConfig+0x1b0>)
 8002310:	fba3 0302 	umull	r0, r3, r3, r2
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	2064      	movs	r0, #100	; 0x64
 8002318:	fb00 f303 	mul.w	r3, r0, r3
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	3332      	adds	r3, #50	; 0x32
 8002322:	4a08      	ldr	r2, [pc, #32]	; (8002344 <UART_SetConfig+0x1b0>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	f003 020f 	and.w	r2, r3, #15
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	440a      	add	r2, r1
 8002334:	609a      	str	r2, [r3, #8]
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40013800 	.word	0x40013800
 8002344:	51eb851f 	.word	0x51eb851f

08002348 <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a2d      	ldr	r2, [pc, #180]	; (8002418 <HAL_CAN_MspInit+0xd0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d153      	bne.n	8002410 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002368:	4b2c      	ldr	r3, [pc, #176]	; (800241c <HAL_CAN_MspInit+0xd4>)
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	4a2b      	ldr	r2, [pc, #172]	; (800241c <HAL_CAN_MspInit+0xd4>)
 800236e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002372:	61d3      	str	r3, [r2, #28]
 8002374:	4b29      	ldr	r3, [pc, #164]	; (800241c <HAL_CAN_MspInit+0xd4>)
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002380:	4b26      	ldr	r3, [pc, #152]	; (800241c <HAL_CAN_MspInit+0xd4>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4a25      	ldr	r2, [pc, #148]	; (800241c <HAL_CAN_MspInit+0xd4>)
 8002386:	f043 0308 	orr.w	r3, r3, #8
 800238a:	6193      	str	r3, [r2, #24]
 800238c:	4b23      	ldr	r3, [pc, #140]	; (800241c <HAL_CAN_MspInit+0xd4>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800239c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	481c      	ldr	r0, [pc, #112]	; (8002420 <HAL_CAN_MspInit+0xd8>)
 80023ae:	f7fe ff55 	bl	800125c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023bc:	2303      	movs	r3, #3
 80023be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4619      	mov	r1, r3
 80023c6:	4816      	ldr	r0, [pc, #88]	; (8002420 <HAL_CAN_MspInit+0xd8>)
 80023c8:	f7fe ff48 	bl	800125c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_CAN_MspInit+0xdc>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ea:	4a0e      	ldr	r2, [pc, #56]	; (8002424 <HAL_CAN_MspInit+0xdc>)
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80023f0:	2200      	movs	r2, #0
 80023f2:	2100      	movs	r1, #0
 80023f4:	2013      	movs	r0, #19
 80023f6:	f7fe feec 	bl	80011d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80023fa:	2013      	movs	r0, #19
 80023fc:	f7fe ff05 	bl	800120a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2100      	movs	r1, #0
 8002404:	2014      	movs	r0, #20
 8002406:	f7fe fee4 	bl	80011d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800240a:	2014      	movs	r0, #20
 800240c:	f7fe fefd 	bl	800120a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002410:	bf00      	nop
 8002412:	3728      	adds	r7, #40	; 0x28
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40006400 	.word	0x40006400
 800241c:	40021000 	.word	0x40021000
 8002420:	40010c00 	.word	0x40010c00
 8002424:	40010000 	.word	0x40010000

08002428 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <HAL_CAN_MspDeInit+0x3c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d110      	bne.n	800245c <HAL_CAN_MspDeInit+0x34>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_CAN_MspDeInit+0x40>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <HAL_CAN_MspDeInit+0x40>)
 8002440:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002444:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8002446:	f44f 7140 	mov.w	r1, #768	; 0x300
 800244a:	4808      	ldr	r0, [pc, #32]	; (800246c <HAL_CAN_MspDeInit+0x44>)
 800244c:	f7ff f860 	bl	8001510 <HAL_GPIO_DeInit>

    /* CAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USB_HP_CAN1_TX_IRQn);
 8002450:	2013      	movs	r0, #19
 8002452:	f7fe fee8 	bl	8001226 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002456:	2014      	movs	r0, #20
 8002458:	f7fe fee5 	bl	8001226 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40006400 	.word	0x40006400
 8002468:	40021000 	.word	0x40021000
 800246c:	40010c00 	.word	0x40010c00

08002470 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002476:	f107 0310 	add.w	r3, r7, #16
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002484:	4b2d      	ldr	r3, [pc, #180]	; (800253c <MX_GPIO_Init+0xcc>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4a2c      	ldr	r2, [pc, #176]	; (800253c <MX_GPIO_Init+0xcc>)
 800248a:	f043 0310 	orr.w	r3, r3, #16
 800248e:	6193      	str	r3, [r2, #24]
 8002490:	4b2a      	ldr	r3, [pc, #168]	; (800253c <MX_GPIO_Init+0xcc>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <MX_GPIO_Init+0xcc>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a26      	ldr	r2, [pc, #152]	; (800253c <MX_GPIO_Init+0xcc>)
 80024a2:	f043 0320 	orr.w	r3, r3, #32
 80024a6:	6193      	str	r3, [r2, #24]
 80024a8:	4b24      	ldr	r3, [pc, #144]	; (800253c <MX_GPIO_Init+0xcc>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b4:	4b21      	ldr	r3, [pc, #132]	; (800253c <MX_GPIO_Init+0xcc>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	4a20      	ldr	r2, [pc, #128]	; (800253c <MX_GPIO_Init+0xcc>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	6193      	str	r3, [r2, #24]
 80024c0:	4b1e      	ldr	r3, [pc, #120]	; (800253c <MX_GPIO_Init+0xcc>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <MX_GPIO_Init+0xcc>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4a1a      	ldr	r2, [pc, #104]	; (800253c <MX_GPIO_Init+0xcc>)
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	6193      	str	r3, [r2, #24]
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <MX_GPIO_Init+0xcc>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2120      	movs	r1, #32
 80024e8:	4815      	ldr	r0, [pc, #84]	; (8002540 <MX_GPIO_Init+0xd0>)
 80024ea:	f7ff f8cd 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80024ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <MX_GPIO_Init+0xd4>)
 80024f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	4619      	mov	r1, r3
 8002502:	4811      	ldr	r0, [pc, #68]	; (8002548 <MX_GPIO_Init+0xd8>)
 8002504:	f7fe feaa 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002508:	2320      	movs	r3, #32
 800250a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250c:	2301      	movs	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2302      	movs	r3, #2
 8002516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002518:	f107 0310 	add.w	r3, r7, #16
 800251c:	4619      	mov	r1, r3
 800251e:	4808      	ldr	r0, [pc, #32]	; (8002540 <MX_GPIO_Init+0xd0>)
 8002520:	f7fe fe9c 	bl	800125c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002524:	2200      	movs	r2, #0
 8002526:	2100      	movs	r1, #0
 8002528:	2028      	movs	r0, #40	; 0x28
 800252a:	f7fe fe52 	bl	80011d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800252e:	2028      	movs	r0, #40	; 0x28
 8002530:	f7fe fe6b 	bl	800120a <HAL_NVIC_EnableIRQ>

}
 8002534:	bf00      	nop
 8002536:	3720      	adds	r7, #32
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000
 8002540:	40010800 	.word	0x40010800
 8002544:	10110000 	.word	0x10110000
 8002548:	40011000 	.word	0x40011000

0800254c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
//		HAL_UART_Transmit(&huart1, (uint8_t *) &nl, 1, 0xFFFF);
//		HAL_UART_Transmit(&huart1, (uint8_t *) &cr, 1, 0xFFFF);
//	}
//	else
//	{
		HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0xFFFF);
 8002554:	1d39      	adds	r1, r7, #4
 8002556:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800255a:	2201      	movs	r2, #1
 800255c:	4803      	ldr	r0, [pc, #12]	; (800256c <__io_putchar+0x20>)
 800255e:	f7ff fd36 	bl	8001fce <HAL_UART_Transmit>
//	}
	return ch;
 8002562:	687b      	ldr	r3, [r7, #4]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000484 	.word	0x20000484

08002570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002576:	f7fd fde9 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800257a:	f000 f817 	bl	80025ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800257e:	f7ff ff77 	bl	8002470 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002582:	f000 f9db 	bl	800293c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002586:	f000 f9af 	bl	80028e8 <MX_USART1_UART_Init>
	const unsigned put_mask = ZF_LOG_PUT_STD; /* ZF_LOG_PUT_CTX | ZF_LOG_PUT_MSG; ZF_LOG_PUT_STD; */
	zf_log_set_output_v(put_mask, 0, custom_output_callback);
#endif /* #ifdef ZF_LOG */


  app_main();
 800258a:	f001 fc85 	bl	8003e98 <app_main>
    /* USER CODE END WHILE */
#ifdef ZF_LOG
	  ZF_LOGD("running\n");
#endif
	/* USER CODE BEGIN 3 */
	  uint16_t enc_cnt = TIM3->CNT;
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <main+0x34>)
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	80fb      	strh	r3, [r7, #6]
	  //printf("Enc1: %d\n", enc_cnt);

	  uint16_t enc_cnt2 = TIM4->CNT;
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <main+0x38>)
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	80bb      	strh	r3, [r7, #4]
	  //printf("Enc2: %d\n", enc_cnt2);

	  HAL_Delay(2000);
 800259a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800259e:	f7fd fe37 	bl	8000210 <HAL_Delay>
  {
 80025a2:	e7f4      	b.n	800258e <main+0x1e>
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40000800 	.word	0x40000800

080025ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b090      	sub	sp, #64	; 0x40
 80025b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025b2:	f107 0318 	add.w	r3, r7, #24
 80025b6:	2228      	movs	r2, #40	; 0x28
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f001 fd63 	bl	8004086 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	60da      	str	r2, [r3, #12]
 80025cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80025d2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80025d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025d8:	2300      	movs	r3, #0
 80025da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025dc:	2301      	movs	r3, #1
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025e0:	2302      	movs	r3, #2
 80025e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80025ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f0:	f107 0318 	add.w	r3, r7, #24
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff f881 	bl	80016fc <HAL_RCC_OscConfig>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002600:	f000 f819 	bl	8002636 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002604:	230f      	movs	r3, #15
 8002606:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002608:	2302      	movs	r3, #2
 800260a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	2102      	movs	r1, #2
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff faec 	bl	8001bfc <HAL_RCC_ClockConfig>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800262a:	f000 f804 	bl	8002636 <Error_Handler>
  }
}
 800262e:	bf00      	nop
 8002630:	3740      	adds	r7, #64	; 0x40
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
	...

08002644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_MspInit+0x5c>)
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <HAL_MspInit+0x5c>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6193      	str	r3, [r2, #24]
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_MspInit+0x5c>)
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <HAL_MspInit+0x5c>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4a0e      	ldr	r2, [pc, #56]	; (80026a0 <HAL_MspInit+0x5c>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266c:	61d3      	str	r3, [r2, #28]
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <HAL_MspInit+0x5c>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_MspInit+0x60>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <HAL_MspInit+0x60>)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40010000 	.word	0x40010000

080026a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <HardFault_Handler+0x4>

080026ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026be:	e7fe      	b.n	80026be <MemManage_Handler+0x4>

080026c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <BusFault_Handler+0x4>

080026c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026ca:	e7fe      	b.n	80026ca <UsageFault_Handler+0x4>

080026cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f4:	f7fd fd70 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  static uint32_t timer = 0;

  timer++;
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <SysTick_Handler+0x28>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	4a06      	ldr	r2, [pc, #24]	; (8002718 <SysTick_Handler+0x28>)
 8002700:	6013      	str	r3, [r2, #0]
  if (timer == 5)
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <SysTick_Handler+0x28>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b05      	cmp	r3, #5
 8002708:	d104      	bne.n	8002714 <SysTick_Handler+0x24>
  {
	  app_process_5msec();
 800270a:	f001 fc41 	bl	8003f90 <app_process_5msec>
	  timer = 0;
 800270e:	4b02      	ldr	r3, [pc, #8]	; (8002718 <SysTick_Handler+0x28>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}
 8002718:	2000008c 	.word	0x2000008c

0800271c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8002722:	f7fe fa41 	bl	8000ba8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	2000045c 	.word	0x2000045c

08002730 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002736:	f7fe fa37 	bl	8000ba8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	2000045c 	.word	0x2000045c

08002744 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002748:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800274c:	f7fe ffb4 	bl	80016b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	e00a      	b.n	800277c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002766:	f3af 8000 	nop.w
 800276a:	4601      	mov	r1, r0
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	60ba      	str	r2, [r7, #8]
 8002772:	b2ca      	uxtb	r2, r1
 8002774:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3301      	adds	r3, #1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	dbf0      	blt.n	8002766 <_read+0x12>
	}

return len;
 8002784:	687b      	ldr	r3, [r7, #4]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	e009      	b.n	80027b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	60ba      	str	r2, [r7, #8]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fecf 	bl	800254c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	3301      	adds	r3, #1
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	dbf1      	blt.n	80027a0 <_write+0x12>
	}
	return len;
 80027bc:	687b      	ldr	r3, [r7, #4]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <_close>:

int _close(int file)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
	return -1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027ec:	605a      	str	r2, [r3, #4]
	return 0;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <_isatty>:

int _isatty(int file)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
	return 1;
 8002802:	2301      	movs	r3, #1
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
	return 0;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
	...

08002828 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <_sbrk+0x50>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <_sbrk+0x16>
		heap_end = &end;
 8002838:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <_sbrk+0x50>)
 800283a:	4a10      	ldr	r2, [pc, #64]	; (800287c <_sbrk+0x54>)
 800283c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800283e:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <_sbrk+0x50>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <_sbrk+0x50>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4413      	add	r3, r2
 800284c:	466a      	mov	r2, sp
 800284e:	4293      	cmp	r3, r2
 8002850:	d907      	bls.n	8002862 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002852:	f001 fbe3 	bl	800401c <__errno>
 8002856:	4602      	mov	r2, r0
 8002858:	230c      	movs	r3, #12
 800285a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800285c:	f04f 33ff 	mov.w	r3, #4294967295
 8002860:	e006      	b.n	8002870 <_sbrk+0x48>
	}

	heap_end += incr;
 8002862:	4b05      	ldr	r3, [pc, #20]	; (8002878 <_sbrk+0x50>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	4a03      	ldr	r2, [pc, #12]	; (8002878 <_sbrk+0x50>)
 800286c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800286e:	68fb      	ldr	r3, [r7, #12]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000090 	.word	0x20000090
 800287c:	20000888 	.word	0x20000888

08002880 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <SystemInit+0x5c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a14      	ldr	r2, [pc, #80]	; (80028dc <SystemInit+0x5c>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <SystemInit+0x5c>)
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4911      	ldr	r1, [pc, #68]	; (80028dc <SystemInit+0x5c>)
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <SystemInit+0x60>)
 8002898:	4013      	ands	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <SystemInit+0x5c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <SystemInit+0x5c>)
 80028a2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <SystemInit+0x5c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <SystemInit+0x5c>)
 80028b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <SystemInit+0x5c>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a07      	ldr	r2, [pc, #28]	; (80028dc <SystemInit+0x5c>)
 80028be:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80028c2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <SystemInit+0x5c>)
 80028c6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80028ca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <SystemInit+0x64>)
 80028ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028d2:	609a      	str	r2, [r3, #8]
#endif 
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	40021000 	.word	0x40021000
 80028e0:	f8ff0000 	.word	0xf8ff0000
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <MX_USART1_UART_Init+0x4c>)
 80028ee:	4a12      	ldr	r2, [pc, #72]	; (8002938 <MX_USART1_UART_Init+0x50>)
 80028f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <MX_USART1_UART_Init+0x4c>)
 80028f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <MX_USART1_UART_Init+0x4c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <MX_USART1_UART_Init+0x4c>)
 8002902:	2200      	movs	r2, #0
 8002904:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <MX_USART1_UART_Init+0x4c>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <MX_USART1_UART_Init+0x4c>)
 800290e:	220c      	movs	r2, #12
 8002910:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <MX_USART1_UART_Init+0x4c>)
 8002914:	2200      	movs	r2, #0
 8002916:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <MX_USART1_UART_Init+0x4c>)
 800291a:	2200      	movs	r2, #0
 800291c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800291e:	4805      	ldr	r0, [pc, #20]	; (8002934 <MX_USART1_UART_Init+0x4c>)
 8002920:	f7ff fb08 	bl	8001f34 <HAL_UART_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800292a:	f7ff fe84 	bl	8002636 <Error_Handler>
  }

}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000484 	.word	0x20000484
 8002938:	40013800 	.word	0x40013800

0800293c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <MX_USART2_UART_Init+0x4c>)
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <MX_USART2_UART_Init+0x50>)
 8002944:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <MX_USART2_UART_Init+0x4c>)
 8002948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800294c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <MX_USART2_UART_Init+0x4c>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <MX_USART2_UART_Init+0x4c>)
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <MX_USART2_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <MX_USART2_UART_Init+0x4c>)
 8002962:	220c      	movs	r2, #12
 8002964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <MX_USART2_UART_Init+0x4c>)
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <MX_USART2_UART_Init+0x4c>)
 800296e:	2200      	movs	r2, #0
 8002970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002972:	4805      	ldr	r0, [pc, #20]	; (8002988 <MX_USART2_UART_Init+0x4c>)
 8002974:	f7ff fade 	bl	8001f34 <HAL_UART_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800297e:	f7ff fe5a 	bl	8002636 <Error_Handler>
  }

}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200004c4 	.word	0x200004c4
 800298c:	40004400 	.word	0x40004400

08002990 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 0318 	add.w	r3, r7, #24
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a31      	ldr	r2, [pc, #196]	; (8002a70 <HAL_UART_MspInit+0xe0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d132      	bne.n	8002a16 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029b0:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <HAL_UART_MspInit+0xe4>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4a2f      	ldr	r2, [pc, #188]	; (8002a74 <HAL_UART_MspInit+0xe4>)
 80029b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ba:	6193      	str	r3, [r2, #24]
 80029bc:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <HAL_UART_MspInit+0xe4>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c8:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <HAL_UART_MspInit+0xe4>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	4a29      	ldr	r2, [pc, #164]	; (8002a74 <HAL_UART_MspInit+0xe4>)
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	6193      	str	r3, [r2, #24]
 80029d4:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <HAL_UART_MspInit+0xe4>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ea:	2303      	movs	r3, #3
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ee:	f107 0318 	add.w	r3, r7, #24
 80029f2:	4619      	mov	r1, r3
 80029f4:	4820      	ldr	r0, [pc, #128]	; (8002a78 <HAL_UART_MspInit+0xe8>)
 80029f6:	f7fe fc31 	bl	800125c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a08:	f107 0318 	add.w	r3, r7, #24
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	481a      	ldr	r0, [pc, #104]	; (8002a78 <HAL_UART_MspInit+0xe8>)
 8002a10:	f7fe fc24 	bl	800125c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a14:	e028      	b.n	8002a68 <HAL_UART_MspInit+0xd8>
  else if(uartHandle->Instance==USART2)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a18      	ldr	r2, [pc, #96]	; (8002a7c <HAL_UART_MspInit+0xec>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d123      	bne.n	8002a68 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <HAL_UART_MspInit+0xe4>)
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <HAL_UART_MspInit+0xe4>)
 8002a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a2a:	61d3      	str	r3, [r2, #28]
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_UART_MspInit+0xe4>)
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_UART_MspInit+0xe4>)
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <HAL_UART_MspInit+0xe4>)
 8002a3e:	f043 0304 	orr.w	r3, r3, #4
 8002a42:	6193      	str	r3, [r2, #24]
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_UART_MspInit+0xe4>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a50:	230c      	movs	r3, #12
 8002a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5c:	f107 0318 	add.w	r3, r7, #24
 8002a60:	4619      	mov	r1, r3
 8002a62:	4805      	ldr	r0, [pc, #20]	; (8002a78 <HAL_UART_MspInit+0xe8>)
 8002a64:	f7fe fbfa 	bl	800125c <HAL_GPIO_Init>
}
 8002a68:	bf00      	nop
 8002a6a:	3728      	adds	r7, #40	; 0x28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40013800 	.word	0x40013800
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40010800 	.word	0x40010800
 8002a7c:	40004400 	.word	0x40004400

08002a80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a82:	e003      	b.n	8002a8c <LoopCopyDataInit>

08002a84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002a86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a8a:	3104      	adds	r1, #4

08002a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a8c:	480a      	ldr	r0, [pc, #40]	; (8002ab8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002a90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a94:	d3f6      	bcc.n	8002a84 <CopyDataInit>
  ldr r2, =_sbss
 8002a96:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a98:	e002      	b.n	8002aa0 <LoopFillZerobss>

08002a9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a9c:	f842 3b04 	str.w	r3, [r2], #4

08002aa0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002aa2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002aa4:	d3f9      	bcc.n	8002a9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002aa6:	f7ff feeb 	bl	8002880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aaa:	f001 fabd 	bl	8004028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002aae:	f7ff fd5f 	bl	8002570 <main>
  bx lr
 8002ab2:	4770      	bx	lr
  ldr r3, =_sidata
 8002ab4:	08005254 	.word	0x08005254
  ldr r0, =_sdata
 8002ab8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002abc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002ac0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002ac4:	20000884 	.word	0x20000884

08002ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ac8:	e7fe      	b.n	8002ac8 <ADC1_2_IRQHandler>

08002aca <CpFifoDataInPtr>:
//--------------------------------------------------------------------------------------------------------------------//
// CpFifoDataInPtr()                                                                                                  //
//                                                                                                                    //
//--------------------------------------------------------------------------------------------------------------------//
CPP_INLINE CpCanMsg_ts *CpFifoDataInPtr(CpFifo_ts *ptsFifoV)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
   //---------------------------------------------------------------------------------------------------
   // allow pointer arithmetic here, because index is limited by element ulIndexMax
   //
   /*@ -ptrarith  -dependenttrans -usereleased -compdef           @*/
   return ((ptsFifoV->ptsCanMsg) + (ptsFifoV->ulIndexIn));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6919      	ldr	r1, [r3, #16]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
   /*@ +ptrarith  +dependenttrans +usereleased +compdef           @*/

}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <CpFifoDataOutPtr>:
//--------------------------------------------------------------------------------------------------------------------//
// CpFifoDataOutPtr()                                                                                                 //
//                                                                                                                    //
//--------------------------------------------------------------------------------------------------------------------//
CPP_INLINE CpCanMsg_ts *CpFifoDataOutPtr(CpFifo_ts *ptsFifoV)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
   //---------------------------------------------------------------------------------------------------
   // allow pointer arithmetic here, because index is limited by element ulIndexMax
   //
   /*@ -ptrarith  -dependenttrans -usereleased -compdef           @*/
   return ((ptsFifoV->ptsCanMsg) + (ptsFifoV->ulIndexOut));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6919      	ldr	r1, [r3, #16]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
   /*@ +ptrarith  +dependenttrans +usereleased +compdef           @*/

}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <CpFifoIncIn>:
//--------------------------------------------------------------------------------------------------------------------//
// CpFifoIncIn()                                                                                                      //
//                                                                                                                    //
//--------------------------------------------------------------------------------------------------------------------//
CPP_INLINE void CpFifoIncIn(CpFifo_ts *ptsFifoV)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
   ptsFifoV->ulIndexIn++;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	601a      	str	r2, [r3, #0]
   if ((ptsFifoV->ulIndexIn) >= (ptsFifoV->ulIndexMax))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d302      	bcc.n	8002b36 <CpFifoIncIn+0x24>
   {
      ptsFifoV->ulIndexIn = 0;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
   }
   if (ptsFifoV->ulIndexIn == ptsFifoV->ulIndexOut)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d102      	bne.n	8002b48 <CpFifoIncIn+0x36>
   {
      //-------------------------------------------------------------------------------------------
      // set state to full
      //
      ptsFifoV->ulState = CP_FIFO_STATE_FULL;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2202      	movs	r2, #2
 8002b46:	60da      	str	r2, [r3, #12]
   }

   //---------------------------------------------------------------------------------------------------
   // clear empty state
   //
   ptsFifoV->ulState &= CP_FIFO_STATE_MASK_EMPTY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f023 0201 	bic.w	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	60da      	str	r2, [r3, #12]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <CpFifoIncOut>:
//--------------------------------------------------------------------------------------------------------------------//
// CpFifoIncOut()                                                                                                     //
//                                                                                                                    //
//--------------------------------------------------------------------------------------------------------------------//
CPP_INLINE void CpFifoIncOut(CpFifo_ts *ptsFifoV)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
   ptsFifoV->ulIndexOut++;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	605a      	str	r2, [r3, #4]
   if ((ptsFifoV->ulIndexOut) >= (ptsFifoV->ulIndexMax))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d302      	bcc.n	8002b82 <CpFifoIncOut+0x24>
   {
      ptsFifoV->ulIndexOut = 0;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	605a      	str	r2, [r3, #4]
   }

   if (ptsFifoV->ulIndexIn == ptsFifoV->ulIndexOut)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d102      	bne.n	8002b94 <CpFifoIncOut+0x36>
   {
      //-------------------------------------------------------------------------------------------
      // set empty state
      //
      ptsFifoV->ulState = CP_FIFO_STATE_EMPTY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	60da      	str	r2, [r3, #12]
   }

   //---------------------------------------------------------------------------------------------------
   // clear full state
   //
   ptsFifoV->ulState &= CP_FIFO_STATE_MASK_FULL;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f023 0202 	bic.w	r2, r3, #2
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	60da      	str	r2, [r3, #12]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <CpFifoInit>:
//--------------------------------------------------------------------------------------------------------------------//
// CpFifoInit()                                                                                                       //
//                                                                                                                    //
//--------------------------------------------------------------------------------------------------------------------//
CPP_INLINE void CpFifoInit(CpFifo_ts *ptsFifoV, CpCanMsg_ts *ptsCanMsgV, uint32_t ulSizeV)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
   ptsFifoV->ulIndexIn  = 0;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
   ptsFifoV->ulIndexOut = 0;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	605a      	str	r2, [r3, #4]
   ptsFifoV->ulIndexMax = ulSizeV;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
   ptsFifoV->ulState    = CP_FIFO_STATE_EMPTY;     // set initial state to empty
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	60da      	str	r2, [r3, #12]
   /*@ -mustfreeonly -temptrans @*/
   ptsFifoV->ptsCanMsg  = ptsCanMsgV;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	611a      	str	r2, [r3, #16]
   /*@ +mustfreeonly +temptrans @*/
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <CpFifoIsEmpty>:
//--------------------------------------------------------------------------------------------------------------------//
// CpFifoIsEmpty()                                                                                                    //
//                                                                                                                    //
//--------------------------------------------------------------------------------------------------------------------//
CPP_INLINE bool_t CpFifoIsEmpty(CpFifo_ts *ptsFifoV)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
   bool_t btResultT = false;
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]

   if (ptsFifoV->ulState == CP_FIFO_STATE_EMPTY)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <CpFifoIsEmpty+0x18>
   {
      btResultT = true;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
   }

   return (btResultT);
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <CpFifoIsFull>:
//--------------------------------------------------------------------------------------------------------------------//
// CpFifoIsFull()                                                                                                     //
//                                                                                                                    //
//--------------------------------------------------------------------------------------------------------------------//
CPP_INLINE bool_t CpFifoIsFull(CpFifo_ts *ptsFifoV)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
   bool_t btResultT = false;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]

   if (ptsFifoV->ulState == CP_FIFO_STATE_FULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d101      	bne.n	8002c1a <CpFifoIsFull+0x18>
   {
      btResultT = true;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
   }

   return (btResultT);
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]

}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <CpMsgClear>:
//----------------------------------------------------------------------------//
// CpMsgClear()                                                               //
//                                                                            //
//----------------------------------------------------------------------------//
void  CpMsgClear(CpCanMsg_ts *ptsCanMsgV)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b085      	sub	sp, #20
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
   uint8_t  ubDataCntT = (uint8_t) 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	73fb      	strb	r3, [r7, #15]

   //----------------------------------------------------------------
   // check for valid pointer
   //
   if (ptsCanMsgV != (CpCanMsg_ts *) 0L)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d019      	beq.n	8002c6c <CpMsgClear+0x46>
   {
      //--------------------------------------------------------
      // clear all fields of the structure
      //
      ptsCanMsgV->ulIdentifier        = 0UL;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]

      for (ubDataCntT = 0; ubDataCntT < (uint8_t) CP_DATA_SIZE; ubDataCntT++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]
 8002c42:	e007      	b.n	8002c54 <CpMsgClear+0x2e>
      {
         ptsCanMsgV->tuMsgData.aubByte[ubDataCntT] = (uint8_t) 0;
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	721a      	strb	r2, [r3, #8]
      for (ubDataCntT = 0; ubDataCntT < (uint8_t) CP_DATA_SIZE; ubDataCntT++)
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	3301      	adds	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b07      	cmp	r3, #7
 8002c58:	d9f4      	bls.n	8002c44 <CpMsgClear+0x1e>
      }

      ptsCanMsgV->ubMsgDLC             = (uint8_t) 0;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	741a      	strb	r2, [r3, #16]

      ptsCanMsgV->ubMsgCtrl            = (uint8_t) 0;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	745a      	strb	r2, [r3, #17]
      ptsCanMsgV->tsMsgTime.ulSec1970  = 0UL;
      ptsCanMsgV->tsMsgTime.ulNanoSec  = 0UL;
      #endif

      #if CP_CAN_MSG_USER == 1
      ptsCanMsgV->ulMsgUser            = 0UL;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	615a      	str	r2, [r3, #20]
      ptsCanMsgV->ulMsgMarker          = 0UL;
      #endif

   }

}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <CpMsgClrRemote>:
//----------------------------------------------------------------------------//
// CpMsgClrRemote()                                                           //
//                                                                            //
//----------------------------------------------------------------------------//
void CpMsgClrRemote(CpCanMsg_ts *ptsCanMsgV)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
   //----------------------------------------------------------------
   // check for valid pointer
   //
   if (ptsCanMsgV != (CpCanMsg_ts *) 0L)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d006      	beq.n	8002c92 <CpMsgClrRemote+0x1c>
   {
      //--------------------------------------------------------
      // clear remote bit
      //
      ptsCanMsgV->ubMsgCtrl &= ~CP_MSG_CTRL_RTR_BIT;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7c5b      	ldrb	r3, [r3, #17]
 8002c88:	f023 0304 	bic.w	r3, r3, #4
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	745a      	strb	r2, [r3, #17]

   }
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <CpMsgGetStdId>:
//----------------------------------------------------------------------------//
// CpMsgGetStdId()                                                            //
//                                                                            //
//----------------------------------------------------------------------------//
uint16_t  CpMsgGetStdId(const CpCanMsg_ts *ptsCanMsgV)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
   uint16_t  uwStdIdT = (uint16_t) 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	81fb      	strh	r3, [r7, #14]

   //----------------------------------------------------------------
   // check for valid pointer
   //
   if (ptsCanMsgV != (CpCanMsg_ts *) 0L)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <CpMsgGetStdId+0x1e>
   {
      //--------------------------------------------------------
      // mask the lower 11 bits
      //
      uwStdIdT = (uint16_t)(ptsCanMsgV->ulIdentifier & CP_MASK_STD_FRAME);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cb8:	81fb      	strh	r3, [r7, #14]
   }

   return (uwStdIdT);
 8002cba:	89fb      	ldrh	r3, [r7, #14]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <CpMsgInit>:
//----------------------------------------------------------------------------//
// CpMsgInit()                                                                //
//                                                                            //
//----------------------------------------------------------------------------//
void  CpMsgInit(CpCanMsg_ts *ptsCanMsgV, uint8_t ubFormatV)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	70fb      	strb	r3, [r7, #3]
   //----------------------------------------------------------------
   // check for valid pointer
   //
   if (ptsCanMsgV != (CpCanMsg_ts *) 0L)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00b      	beq.n	8002cf0 <CpMsgInit+0x2a>
   {
      //--------------------------------------------------------
      // initialise identifier, DLC and frame format
      //
      ptsCanMsgV->ulIdentifier = 0UL;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
      ptsCanMsgV->ubMsgDLC     = (uint8_t) 0;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	741a      	strb	r2, [r3, #16]
      ptsCanMsgV->ubMsgCtrl    = ubFormatV & CP_MASK_MSG_FORMAT;
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	745a      	strb	r2, [r3, #17]
   }
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr

08002cfa <CpMsgIsExtended>:
//----------------------------------------------------------------------------//
// CpMsgIsExtended()                                                          //
//                                                                            //
//----------------------------------------------------------------------------//
bool_t  CpMsgIsExtended(const CpCanMsg_ts *ptsCanMsgV)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b085      	sub	sp, #20
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
   bool_t btResultT = false;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]

   //----------------------------------------------------------------
   // check for valid pointer
   //
   if (ptsCanMsgV != (CpCanMsg_ts *) 0L)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <CpMsgIsExtended+0x22>
   {
      if ((ptsCanMsgV->ubMsgCtrl & CP_MSG_CTRL_EXT_BIT) > 0)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	7c5b      	ldrb	r3, [r3, #17]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	dd01      	ble.n	8002d1c <CpMsgIsExtended+0x22>
      {
         btResultT = true;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
      }
   }

   return (btResultT);
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <CpMsgIsRemote>:
//----------------------------------------------------------------------------//
// CpMsgIsRemote()                                                            //
//                                                                            //
//----------------------------------------------------------------------------//
bool_t  CpMsgIsRemote(const CpCanMsg_ts *ptsCanMsgV)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
   bool_t btResultT = false;
 8002d30:	2300      	movs	r3, #0
 8002d32:	73fb      	strb	r3, [r7, #15]

   //----------------------------------------------------------------
   // check for valid pointer
   //
   if (ptsCanMsgV != (CpCanMsg_ts *) 0L)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d007      	beq.n	8002d4a <CpMsgIsRemote+0x22>
   {
      if ((ptsCanMsgV->ubMsgCtrl & CP_MSG_CTRL_RTR_BIT) > 0)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	7c5b      	ldrb	r3, [r3, #17]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	dd01      	ble.n	8002d4a <CpMsgIsRemote+0x22>
      {
         btResultT = true;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
      }
   }

   return (btResultT);
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <CpMsgSetData>:
//----------------------------------------------------------------------------//
// CpMsgSetData()                                                             //
//                                                                            //
//----------------------------------------------------------------------------//
void  CpMsgSetData(CpCanMsg_ts *ptsCanMsgV, uint8_t ubPosV, uint8_t ubValueV)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	70fb      	strb	r3, [r7, #3]
 8002d62:	4613      	mov	r3, r2
 8002d64:	70bb      	strb	r3, [r7, #2]
   //----------------------------------------------------------------
   // check for valid pointer
   //
   if (ptsCanMsgV != (CpCanMsg_ts *) 0L)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d016      	beq.n	8002d9a <CpMsgSetData+0x44>
   {
      //--------------------------------------------------------
      // test frame type
      //
      if ((ptsCanMsgV->ubMsgCtrl & CP_MSG_CTRL_FDF_BIT) > 0)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	7c5b      	ldrb	r3, [r3, #17]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	dd08      	ble.n	8002d8a <CpMsgSetData+0x34>
      {
         if (ubPosV < 64)
 8002d78:	78fb      	ldrb	r3, [r7, #3]
 8002d7a:	2b3f      	cmp	r3, #63	; 0x3f
 8002d7c:	d80d      	bhi.n	8002d9a <CpMsgSetData+0x44>
         {
            ptsCanMsgV->tuMsgData.aubByte[ubPosV] = ubValueV;
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4413      	add	r3, r2
 8002d84:	78ba      	ldrb	r2, [r7, #2]
 8002d86:	721a      	strb	r2, [r3, #8]
         {
            ptsCanMsgV->tuMsgData.aubByte[ubPosV] = ubValueV;
         }
      }
   }
}
 8002d88:	e007      	b.n	8002d9a <CpMsgSetData+0x44>
         if (ubPosV <  8)
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	2b07      	cmp	r3, #7
 8002d8e:	d804      	bhi.n	8002d9a <CpMsgSetData+0x44>
            ptsCanMsgV->tuMsgData.aubByte[ubPosV] = ubValueV;
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	78ba      	ldrb	r2, [r7, #2]
 8002d98:	721a      	strb	r2, [r3, #8]
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <CpMsgSetDlc>:
//----------------------------------------------------------------------------//
// CpMsgSetDlc()                                                              //
//                                                                            //
//----------------------------------------------------------------------------//
void  CpMsgSetDlc(CpCanMsg_ts *ptsCanMsgV, uint8_t ubDlcV)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	70fb      	strb	r3, [r7, #3]
   //----------------------------------------------------------------
   // check for valid pointer
   //
   if (ptsCanMsgV != (CpCanMsg_ts *) 0L)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d012      	beq.n	8002ddc <CpMsgSetDlc+0x38>
   {
      //--------------------------------------------------------
      // make sure the Data Length Code is in range
      //
      if ((ptsCanMsgV->ubMsgCtrl & CP_MSG_CTRL_FDF_BIT) > 0)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7c5b      	ldrb	r3, [r3, #17]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	dd06      	ble.n	8002dd0 <CpMsgSetDlc+0x2c>
      {
         if (ubDlcV < 16)
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	2b0f      	cmp	r3, #15
 8002dc6:	d809      	bhi.n	8002ddc <CpMsgSetDlc+0x38>
         {
            ptsCanMsgV->ubMsgDLC = ubDlcV;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	741a      	strb	r2, [r3, #16]
         {
            ptsCanMsgV->ubMsgDLC = ubDlcV;
         }
      }
   }
}
 8002dce:	e005      	b.n	8002ddc <CpMsgSetDlc+0x38>
         if (ubDlcV <  9)
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d802      	bhi.n	8002ddc <CpMsgSetDlc+0x38>
            ptsCanMsgV->ubMsgDLC = ubDlcV;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	741a      	strb	r2, [r3, #16]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <CpMsgSetExtId>:
//----------------------------------------------------------------------------//
// CpMsgSetExtId()                                                            //
//                                                                            //
//----------------------------------------------------------------------------//
void  CpMsgSetExtId(CpCanMsg_ts *ptsCanMsgV, uint32_t ulExtIdV)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
   //----------------------------------------------------------------
   // check for valid pointer
   //
   if (ptsCanMsgV != (CpCanMsg_ts *) 0L)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00d      	beq.n	8002e12 <CpMsgSetExtId+0x2c>
   {
      //----------------------------------------------------------------
      // use only lower 29 bits
      //
      ulExtIdV = ulExtIdV & CP_MASK_EXT_FRAME;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8002dfc:	603b      	str	r3, [r7, #0]

      //----------------------------------------------------------------
      // mark as extended frame
      //
      ptsCanMsgV->ubMsgCtrl |= CP_MSG_CTRL_EXT_BIT;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	7c5b      	ldrb	r3, [r3, #17]
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	745a      	strb	r2, [r3, #17]

      ptsCanMsgV->ulIdentifier = ulExtIdV;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	601a      	str	r2, [r3, #0]
   }
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <CpMsgSetIdentifier>:
//----------------------------------------------------------------------------//
// CpMsgSetIdentifier()                                                       //
//                                                                            //
//----------------------------------------------------------------------------//
void  CpMsgSetIdentifier(CpCanMsg_ts *ptsCanMsgV, uint32_t ulIdentifierV)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
   //----------------------------------------------------------------
   // check for valid pointer
   //
   if (ptsCanMsgV != (CpCanMsg_ts *) 0L)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d010      	beq.n	8002e4e <CpMsgSetIdentifier+0x32>
   {
      if ((ptsCanMsgV->ubMsgCtrl & CP_MSG_CTRL_EXT_BIT) > 0)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7c5b      	ldrb	r3, [r3, #17]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	dd05      	ble.n	8002e44 <CpMsgSetIdentifier+0x28>
      {
         //-----------------------------------------------------
         // mask the lower 29 bits
         //
         ptsCanMsgV->ulIdentifier = ulIdentifierV & CP_MASK_EXT_FRAME;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	601a      	str	r2, [r3, #0]
         // mask the lower 11 bits
         //
         ptsCanMsgV->ulIdentifier = ulIdentifierV & CP_MASK_STD_FRAME;
      }
   }
}
 8002e42:	e004      	b.n	8002e4e <CpMsgSetIdentifier+0x32>
         ptsCanMsgV->ulIdentifier = ulIdentifierV & CP_MASK_STD_FRAME;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	601a      	str	r2, [r3, #0]
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <CpMsgSetRemote>:
//----------------------------------------------------------------------------//
// CpMsgSetRemote()                                                           //
//                                                                            //
//----------------------------------------------------------------------------//
void  CpMsgSetRemote(CpCanMsg_ts *ptsCanMsgV)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
   //----------------------------------------------------------------
   // check for valid pointer
   //
   if (ptsCanMsgV != (CpCanMsg_ts *) 0L)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00c      	beq.n	8002e80 <CpMsgSetRemote+0x28>
   {
      if ((ptsCanMsgV->ubMsgCtrl & CP_MSG_CTRL_FDF_BIT) == 0)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	7c5b      	ldrb	r3, [r3, #17]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <CpMsgSetRemote+0x28>
      {
         ptsCanMsgV->ubMsgCtrl |= CP_MSG_CTRL_RTR_BIT;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	7c5b      	ldrb	r3, [r3, #17]
 8002e76:	f043 0304 	orr.w	r3, r3, #4
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	745a      	strb	r2, [r3, #17]
      }
   }
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <CpMsgSetStdId>:
//----------------------------------------------------------------------------//
// CpMsgSetStdId()                                                            //
//                                                                            //
//----------------------------------------------------------------------------//
void  CpMsgSetStdId(CpCanMsg_ts *ptsCanMsgV, uint16_t uwStdIdV)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	460b      	mov	r3, r1
 8002e94:	807b      	strh	r3, [r7, #2]
   //----------------------------------------------------------------
   // check for valid pointer
   //
   if (ptsCanMsgV != (CpCanMsg_ts *) 0L)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00d      	beq.n	8002eb8 <CpMsgSetStdId+0x2e>
   {
      //----------------------------------------------------------------
      // use only lower 11 bits
      //
      uwStdIdV = uwStdIdV & CP_MASK_STD_FRAME;
 8002e9c:	887b      	ldrh	r3, [r7, #2]
 8002e9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ea2:	807b      	strh	r3, [r7, #2]

      //----------------------------------------------------------------
      // mark as standard frame
      //
      ptsCanMsgV->ubMsgCtrl &= ~CP_MSG_CTRL_EXT_BIT;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7c5b      	ldrb	r3, [r3, #17]
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	745a      	strb	r2, [r3, #17]

      ptsCanMsgV->ulIdentifier = (uint32_t) uwStdIdV;
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	601a      	str	r2, [r3, #0]
   }

}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <CheckParam>:
/*----------------------------------------------------------------------------*\
** Function implementation                                                    **
 **                                                                            **
 \*----------------------------------------------------------------------------*/
static CpStatus_tv CheckParam(const CpPort_ts * ptsPortV, const uint8_t ubBufferIdxV, const uint8_t unReqStateV)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	70fb      	strb	r3, [r7, #3]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	70bb      	strb	r3, [r7, #2]
	CpStatus_tv tvStatusT = eCP_ERR_CHANNEL;
 8002ed2:	2328      	movs	r3, #40	; 0x28
 8002ed4:	73fb      	strb	r3, [r7, #15]

	//----------------------------------------------------------------
	// test CAN port
	//
	if (ptsPortV != (CpPort_ts *) 0L)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00d      	beq.n	8002ef8 <CheckParam+0x36>
	{
		tvStatusT = eCP_ERR_INIT_MISSING;
 8002edc:	2305      	movs	r3, #5
 8002ede:	73fb      	strb	r3, [r7, #15]

		//--------------------------------------------------------
		// check for initialization
		//
		if (ptsPortV->ubDrvInfo >= unReqStateV)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	789b      	ldrb	r3, [r3, #2]
 8002ee4:	78ba      	ldrb	r2, [r7, #2]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d806      	bhi.n	8002ef8 <CheckParam+0x36>
		{
			tvStatusT = eCP_ERR_BUFFER;
 8002eea:	232b      	movs	r3, #43	; 0x2b
 8002eec:	73fb      	strb	r3, [r7, #15]

			//------------------------------------------------
			// check for valid buffer number
			//
			if (ubBufferIdxV < CP_BUFFER_MAX)
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	2b1f      	cmp	r3, #31
 8002ef2:	d801      	bhi.n	8002ef8 <CheckParam+0x36>
			{
				tvStatusT = eCP_ERR_NONE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return (tvStatusT);
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <CpCoreBitrate>:
//----------------------------------------------------------------------------//
// CpCoreBitrate()                                                            //
//                                                                            //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreBitrate(CpPort_ts * ptsPortV, int32_t slNomBitRateV, int32_t slDatBitRateV)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
	uint32_t pclk;
	const struct hal_baudrate *p_hal_baudrate;
	const struct hal_baudrate *p_hal_end;
	CpStatus_tv tvStatusT = eCP_ERR_CHANNEL;
 8002f10:	2328      	movs	r3, #40	; 0x28
 8002f12:	75fb      	strb	r3, [r7, #23]

	//----------------------------------------------------------------
	// test CAN port
	//
	if (ptsPortV != (CpPort_ts *) 0L)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d07f      	beq.n	800301a <CpCoreBitrate+0x116>
	{
		if (ptsPortV->ubDrvInfo > eDRV_INFO_OFF)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	789b      	ldrb	r3, [r3, #2]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d079      	beq.n	8003016 <CpCoreBitrate+0x112>
		{
			tvStatusT = eCP_ERR_NONE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75fb      	strb	r3, [r7, #23]

			//-----------------------------------------------------
			// test bit-rate
			//
			if ((slNomBitRateV > eCP_BITRATE_1M) || (slNomBitRateV == eCP_BITRATE_NONE))
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	dc03      	bgt.n	8002f34 <CpCoreBitrate+0x30>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f32:	d101      	bne.n	8002f38 <CpCoreBitrate+0x34>
			{
				tvStatusT = eCP_ERR_BITRATE;
 8002f34:	232a      	movs	r3, #42	; 0x2a
 8002f36:	75fb      	strb	r3, [r7, #23]
			}
			if ((slDatBitRateV != eCP_BITRATE_NONE) && (slNomBitRateV > slDatBitRateV))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d005      	beq.n	8002f4c <CpCoreBitrate+0x48>
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	dd01      	ble.n	8002f4c <CpCoreBitrate+0x48>
			{
				tvStatusT = eCP_ERR_BITRATE;
 8002f48:	232a      	movs	r3, #42	; 0x2a
 8002f4a:	75fb      	strb	r3, [r7, #23]
			}

			//-----------------------------------------------------
			// configure the btr register here
			//
			if (tvStatusT == eCP_ERR_NONE)
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d163      	bne.n	800301a <CpCoreBitrate+0x116>
			{
				pclk = HAL_RCC_GetPCLK1Freq();
 8002f52:	f7fe ffa9 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 8002f56:	6138      	str	r0, [r7, #16]

				switch (pclk)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4a32      	ldr	r2, [pc, #200]	; (8003024 <CpCoreBitrate+0x120>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d017      	beq.n	8002f90 <CpCoreBitrate+0x8c>
 8002f60:	4a30      	ldr	r2, [pc, #192]	; (8003024 <CpCoreBitrate+0x120>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d806      	bhi.n	8002f74 <CpCoreBitrate+0x70>
 8002f66:	4a30      	ldr	r2, [pc, #192]	; (8003028 <CpCoreBitrate+0x124>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00a      	beq.n	8002f82 <CpCoreBitrate+0x7e>
 8002f6c:	4a2f      	ldr	r2, [pc, #188]	; (800302c <CpCoreBitrate+0x128>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d009      	beq.n	8002f86 <CpCoreBitrate+0x82>
 8002f72:	e01c      	b.n	8002fae <CpCoreBitrate+0xaa>
 8002f74:	4a2e      	ldr	r2, [pc, #184]	; (8003030 <CpCoreBitrate+0x12c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00f      	beq.n	8002f9a <CpCoreBitrate+0x96>
 8002f7a:	4a2e      	ldr	r2, [pc, #184]	; (8003034 <CpCoreBitrate+0x130>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d011      	beq.n	8002fa4 <CpCoreBitrate+0xa0>
 8002f80:	e015      	b.n	8002fae <CpCoreBitrate+0xaa>
				{
					case 21000000:
						return (eCP_ERR_NOT_SUPPORTED);
 8002f82:	2332      	movs	r3, #50	; 0x32
 8002f84:	e04a      	b.n	800301c <CpCoreBitrate+0x118>
						break;

					case 36000000:
						p_hal_baudrate = hal_baudrate_timing_36mhz;
 8002f86:	4b2c      	ldr	r3, [pc, #176]	; (8003038 <CpCoreBitrate+0x134>)
 8002f88:	61fb      	str	r3, [r7, #28]
						p_hal_end = hal_baudrate_timing_36mhz + sizeof(hal_baudrate_timing_36mhz) / sizeof(hal_baudrate_timing_36mhz[0]);
 8002f8a:	4b2c      	ldr	r3, [pc, #176]	; (800303c <CpCoreBitrate+0x138>)
 8002f8c:	61bb      	str	r3, [r7, #24]
						break;
 8002f8e:	e010      	b.n	8002fb2 <CpCoreBitrate+0xae>

					case 40000000:
						p_hal_baudrate = hal_baudrate_timing_40mhz;
 8002f90:	4b2b      	ldr	r3, [pc, #172]	; (8003040 <CpCoreBitrate+0x13c>)
 8002f92:	61fb      	str	r3, [r7, #28]
						p_hal_end = hal_baudrate_timing_40mhz + sizeof(hal_baudrate_timing_40mhz) / sizeof(hal_baudrate_timing_40mhz[0]);
 8002f94:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <CpCoreBitrate+0x140>)
 8002f96:	61bb      	str	r3, [r7, #24]
						break;
 8002f98:	e00b      	b.n	8002fb2 <CpCoreBitrate+0xae>

					case 42000000:
						p_hal_baudrate = hal_baudrate_timing_42mhz;
 8002f9a:	4b2b      	ldr	r3, [pc, #172]	; (8003048 <CpCoreBitrate+0x144>)
 8002f9c:	61fb      	str	r3, [r7, #28]
						p_hal_end = hal_baudrate_timing_42mhz + sizeof(hal_baudrate_timing_42mhz) / sizeof(hal_baudrate_timing_42mhz[0]);
 8002f9e:	4b2b      	ldr	r3, [pc, #172]	; (800304c <CpCoreBitrate+0x148>)
 8002fa0:	61bb      	str	r3, [r7, #24]
						break;
 8002fa2:	e006      	b.n	8002fb2 <CpCoreBitrate+0xae>

					case 48000000:
						p_hal_baudrate = hal_baudrate_timing_48mhz;
 8002fa4:	4b2a      	ldr	r3, [pc, #168]	; (8003050 <CpCoreBitrate+0x14c>)
 8002fa6:	61fb      	str	r3, [r7, #28]
						p_hal_end = hal_baudrate_timing_48mhz + sizeof(hal_baudrate_timing_48mhz) / sizeof(hal_baudrate_timing_48mhz[0]);
 8002fa8:	4b2a      	ldr	r3, [pc, #168]	; (8003054 <CpCoreBitrate+0x150>)
 8002faa:	61bb      	str	r3, [r7, #24]
						break;
 8002fac:	e001      	b.n	8002fb2 <CpCoreBitrate+0xae>

					default:
						return (eCP_ERR_BITRATE);
 8002fae:	232a      	movs	r3, #42	; 0x2a
 8002fb0:	e034      	b.n	800301c <CpCoreBitrate+0x118>
						break;
				}

				while (p_hal_baudrate < p_hal_end)
 8002fb2:	e02b      	b.n	800300c <CpCoreBitrate+0x108>
				{
					if (p_hal_baudrate->bitrate == slNomBitRateV)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f993 3000 	ldrsb.w	r3, [r3]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d121      	bne.n	8003006 <CpCoreBitrate+0x102>
					{
						HCAN1.Init.Prescaler = p_hal_baudrate->prescaler;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4a24      	ldr	r2, [pc, #144]	; (8003058 <CpCoreBitrate+0x154>)
 8002fc8:	6053      	str	r3, [r2, #4]
						HCAN1.Init.SyncJumpWidth = p_hal_baudrate->sjw;
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	4a22      	ldr	r2, [pc, #136]	; (8003058 <CpCoreBitrate+0x154>)
 8002fd0:	60d3      	str	r3, [r2, #12]
						HCAN1.Init.TimeSeg1 = p_hal_baudrate->bs1;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	4a20      	ldr	r2, [pc, #128]	; (8003058 <CpCoreBitrate+0x154>)
 8002fd8:	6113      	str	r3, [r2, #16]
						HCAN1.Init.TimeSeg2 = p_hal_baudrate->bs2;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	4a1e      	ldr	r2, [pc, #120]	; (8003058 <CpCoreBitrate+0x154>)
 8002fe0:	6153      	str	r3, [r2, #20]

						if (HAL_CAN_DeInit(&HCAN1) != HAL_OK)
 8002fe2:	481d      	ldr	r0, [pc, #116]	; (8003058 <CpCoreBitrate+0x154>)
 8002fe4:	f7fd fa31 	bl	800044a <HAL_CAN_DeInit>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <CpCoreBitrate+0xee>
						{
							return (eCP_ERR_BITRATE);
 8002fee:	232a      	movs	r3, #42	; 0x2a
 8002ff0:	e014      	b.n	800301c <CpCoreBitrate+0x118>
						}

						if (HAL_CAN_Init(&HCAN1) == HAL_OK)
 8002ff2:	4819      	ldr	r0, [pc, #100]	; (8003058 <CpCoreBitrate+0x154>)
 8002ff4:	f7fd f92e 	bl	8000254 <HAL_CAN_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <CpCoreBitrate+0xfe>
						{
							// Bitrate change works fine so return;
							return (eCP_ERR_NONE);
 8002ffe:	2300      	movs	r3, #0
 8003000:	e00c      	b.n	800301c <CpCoreBitrate+0x118>
						}
						else
						{
							return (eCP_ERR_BITRATE);
 8003002:	232a      	movs	r3, #42	; 0x2a
 8003004:	e00a      	b.n	800301c <CpCoreBitrate+0x118>
						}
					}
					p_hal_baudrate++;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3314      	adds	r3, #20
 800300a:	61fb      	str	r3, [r7, #28]
				while (p_hal_baudrate < p_hal_end)
 800300c:	69fa      	ldr	r2, [r7, #28]
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	429a      	cmp	r2, r3
 8003012:	d3cf      	bcc.n	8002fb4 <CpCoreBitrate+0xb0>
 8003014:	e001      	b.n	800301a <CpCoreBitrate+0x116>
				}
			}
		}
		else
		{
			tvStatusT = eCP_ERR_INIT_MISSING;
 8003016:	2305      	movs	r3, #5
 8003018:	75fb      	strb	r3, [r7, #23]
		}
	}

	return (tvStatusT);
 800301a:	7dfb      	ldrb	r3, [r7, #23]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3720      	adds	r7, #32
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	02625a00 	.word	0x02625a00
 8003028:	01406f40 	.word	0x01406f40
 800302c:	02255100 	.word	0x02255100
 8003030:	0280de80 	.word	0x0280de80
 8003034:	02dc6c00 	.word	0x02dc6c00
 8003038:	08004f0c 	.word	0x08004f0c
 800303c:	08004fc0 	.word	0x08004fc0
 8003040:	08004fc0 	.word	0x08004fc0
 8003044:	08005060 	.word	0x08005060
 8003048:	08005060 	.word	0x08005060
 800304c:	08005100 	.word	0x08005100
 8003050:	08005100 	.word	0x08005100
 8003054:	080051b4 	.word	0x080051b4
 8003058:	2000045c 	.word	0x2000045c

0800305c <CpCoreBufferConfig>:
//----------------------------------------------------------------------------//
// CpCoreBufferConfig()                                                       //
//                                                                            //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreBufferConfig(CpPort_ts * ptsPortV, uint8_t ubBufferIdxV, uint32_t ulIdentifierV, uint32_t ulAcceptMaskV, uint8_t ubFormatV, uint8_t ubDirectionV)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	460b      	mov	r3, r1
 800306a:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;

	//----------------------------------------------------------------
	// test parameter ptsPortV and ubBufferIdxV
	//
	tvStatusT = CheckParam(ptsPortV, ubBufferIdxV, eDRV_INFO_INIT);
 800306c:	7afb      	ldrb	r3, [r7, #11]
 800306e:	2201      	movs	r2, #1
 8003070:	4619      	mov	r1, r3
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f7ff ff25 	bl	8002ec2 <CheckParam>
 8003078:	4603      	mov	r3, r0
 800307a:	75fb      	strb	r3, [r7, #23]
	if (tvStatusT == eCP_ERR_NONE)
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d162      	bne.n	8003148 <CpCoreBufferConfig+0xec>
	{
		//--------------------------------------------------------
		// test message format and mask identifier
		//
		switch (ubFormatV & CP_MASK_MSG_FORMAT)
 8003082:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b03      	cmp	r3, #3
 800308c:	d81c      	bhi.n	80030c8 <CpCoreBufferConfig+0x6c>
 800308e:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <CpCoreBufferConfig+0x38>)
 8003090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003094:	080030a5 	.word	0x080030a5
 8003098:	080030b7 	.word	0x080030b7
 800309c:	080030a5 	.word	0x080030a5
 80030a0:	080030b7 	.word	0x080030b7
		{
			case CP_MSG_FORMAT_CBFF:
			case CP_MSG_FORMAT_FBFF:
				ulIdentifierV = ulIdentifierV & CP_MASK_STD_FRAME;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030aa:	607b      	str	r3, [r7, #4]
				ulAcceptMaskV = ulAcceptMaskV & CP_MASK_STD_FRAME;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030b2:	603b      	str	r3, [r7, #0]
				break;
 80030b4:	e008      	b.n	80030c8 <CpCoreBufferConfig+0x6c>

			case CP_MSG_FORMAT_CEFF:
			case CP_MSG_FORMAT_FEFF:
				ulIdentifierV = ulIdentifierV & CP_MASK_EXT_FRAME;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80030bc:	607b      	str	r3, [r7, #4]
				ulAcceptMaskV = ulAcceptMaskV & CP_MASK_EXT_FRAME;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80030c4:	603b      	str	r3, [r7, #0]
				break;
 80030c6:	bf00      	nop
		}

		// save identifier
		atsCan1MsgS[ubBufferIdxV].ulIdentifier = ulIdentifierV;
 80030c8:	7afa      	ldrb	r2, [r7, #11]
 80030ca:	4922      	ldr	r1, [pc, #136]	; (8003154 <CpCoreBufferConfig+0xf8>)
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	601a      	str	r2, [r3, #0]

		// save format in message control
		atsCan1MsgS[ubBufferIdxV].ubMsgCtrl = ubFormatV;
 80030da:	7afa      	ldrb	r2, [r7, #11]
 80030dc:	491d      	ldr	r1, [pc, #116]	; (8003154 <CpCoreBufferConfig+0xf8>)
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	440b      	add	r3, r1
 80030e8:	3311      	adds	r3, #17
 80030ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 80030ee:	701a      	strb	r2, [r3, #0]

		switch (ubDirectionV)
 80030f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <CpCoreBufferConfig+0xa2>
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d019      	beq.n	8003130 <CpCoreBufferConfig+0xd4>
 80030fc:	e024      	b.n	8003148 <CpCoreBufferConfig+0xec>
		{
			case eCP_BUFFER_DIR_RCV:
				atsCan1MsgS[ubBufferIdxV].ulMsgUser = CP_BUFFER_VAL | CP_BUFFER_RCV;
 80030fe:	7afa      	ldrb	r2, [r7, #11]
 8003100:	4914      	ldr	r1, [pc, #80]	; (8003154 <CpCoreBufferConfig+0xf8>)
 8003102:	4613      	mov	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	440b      	add	r3, r1
 800310c:	3314      	adds	r3, #20
 800310e:	2205      	movs	r2, #5
 8003110:	601a      	str	r2, [r3, #0]
				hal_status = can_filter_init(ubBufferIdxV, ulIdentifierV, ulAcceptMaskV, ubFormatV);
 8003112:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003116:	7af8      	ldrb	r0, [r7, #11]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	f000 fb84 	bl	8003828 <can_filter_init>
 8003120:	4603      	mov	r3, r0
 8003122:	75bb      	strb	r3, [r7, #22]
				if (HAL_OK != hal_status)
 8003124:	7dbb      	ldrb	r3, [r7, #22]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00d      	beq.n	8003146 <CpCoreBufferConfig+0xea>
				{
					tvStatusT = eCP_ERR_INIT_FAIL;
 800312a:	2303      	movs	r3, #3
 800312c:	75fb      	strb	r3, [r7, #23]
				}
				break;
 800312e:	e00a      	b.n	8003146 <CpCoreBufferConfig+0xea>

			case eCP_BUFFER_DIR_TRM:
				atsCan1MsgS[ubBufferIdxV].ulMsgUser = CP_BUFFER_VAL | CP_BUFFER_TRM;
 8003130:	7afa      	ldrb	r2, [r7, #11]
 8003132:	4908      	ldr	r1, [pc, #32]	; (8003154 <CpCoreBufferConfig+0xf8>)
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	440b      	add	r3, r1
 800313e:	3314      	adds	r3, #20
 8003140:	2203      	movs	r2, #3
 8003142:	601a      	str	r2, [r3, #0]
				break;
 8003144:	e000      	b.n	8003148 <CpCoreBufferConfig+0xec>
				break;
 8003146:	bf00      	nop
		}
	}

	return (tvStatusT);
 8003148:	7dfb      	ldrb	r3, [r7, #23]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200000b8 	.word	0x200000b8

08003158 <CpCoreBufferRelease>:
//----------------------------------------------------------------------------//
// CpCoreBufferRelease()                                                      //
//                                                                            //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreBufferRelease(CpPort_ts * ptsPortV, uint8_t ubBufferIdxV)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af02      	add	r7, sp, #8
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
	CpStatus_tv tvStatusT;
	HAL_StatusTypeDef hal_status = HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]
	uint8_t filter_number;

	//----------------------------------------------------------------
	// test parameter ptsPortV and ubBufferIdxV
	//
	tvStatusT = CheckParam(ptsPortV, ubBufferIdxV, eDRV_INFO_INIT);
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	2201      	movs	r2, #1
 800316c:	4619      	mov	r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff fea7 	bl	8002ec2 <CheckParam>
 8003174:	4603      	mov	r3, r0
 8003176:	73bb      	strb	r3, [r7, #14]
	if (tvStatusT == eCP_ERR_NONE)
 8003178:	7bbb      	ldrb	r3, [r7, #14]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d12e      	bne.n	80031dc <CpCoreBufferRelease+0x84>
	{
		// release filter

		// check if the buffer is already defined to a filter
		status = search_for_already_defined_filter(ubBufferIdxV, &filter_number);
 800317e:	f107 020c 	add.w	r2, r7, #12
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fb2a 	bl	80037e0 <search_for_already_defined_filter>
 800318c:	4603      	mov	r3, r0
 800318e:	737b      	strb	r3, [r7, #13]
		// if (eCP_ERR_INIT_FAIL == status)
		// {
		// there is no filter assigned to this buffer so do nothing
		// }

		if (eCP_ERR_NONE == status)
 8003190:	7b7b      	ldrb	r3, [r7, #13]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10c      	bne.n	80031b0 <CpCoreBufferRelease+0x58>
		{
			// clear filter
			hal_status = can_filter_config(0, 0, 0, filter_number, CAN_RX_FIFO0, 0);
 8003196:	7b3a      	ldrb	r2, [r7, #12]
 8003198:	2300      	movs	r3, #0
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	2300      	movs	r3, #0
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	2000      	movs	r0, #0
 80031a8:	f000 fab0 	bl	800370c <can_filter_config>
 80031ac:	4603      	mov	r3, r0
 80031ae:	73fb      	strb	r3, [r7, #15]
		}

		// clear buffer
		memset(&atsCan1MsgS[ubBufferIdxV], 0x00, sizeof(CpCanMsg_ts));
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	4613      	mov	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4a0d      	ldr	r2, [pc, #52]	; (80031f0 <CpCoreBufferRelease+0x98>)
 80031bc:	4413      	add	r3, r2
 80031be:	2218      	movs	r2, #24
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 ff5f 	bl	8004086 <memset>

		// set buffer to invalid
		atsCan1MsgS[ubBufferIdxV].ulMsgUser = CP_BUFFER_IVAL;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	4909      	ldr	r1, [pc, #36]	; (80031f0 <CpCoreBufferRelease+0x98>)
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	440b      	add	r3, r1
 80031d6:	3314      	adds	r3, #20
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
	}

	if (HAL_OK != hal_status)
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <CpCoreBufferRelease+0x8e>
	{
		return eCP_ERR_INIT_FAIL;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e000      	b.n	80031e8 <CpCoreBufferRelease+0x90>
	}

	return (tvStatusT);
 80031e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	200000b8 	.word	0x200000b8

080031f4 <CpCoreBufferSend>:
//----------------------------------------------------------------------------//
// CpCoreBufferSend()                                                         //
// send message out of the CAN controller                                     //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreBufferSend(CpPort_ts * ptsPortV, uint8_t ubBufferIdxV)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	; 0x28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	70fb      	strb	r3, [r7, #3]
	CAN_TxHeaderTypeDef tx_header;

	//----------------------------------------------------------------
	// test parameter ptsPortV and ubBufferIdxV
	//
	tvStatusT = CheckParam(ptsPortV, ubBufferIdxV, eDRV_INFO_INIT);
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	2201      	movs	r2, #1
 8003204:	4619      	mov	r1, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff fe5b 	bl	8002ec2 <CheckParam>
 800320c:	4603      	mov	r3, r0
 800320e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
//	if((atsCan1MsgS[ubBufferIdxV].ulMsgUser & (CP_BUFFER_VAL | CP_BUFFER_TRM)) != (CP_BUFFER_VAL | CP_BUFFER_TRM))
//	{
//		return eCP_ERR_BUFFER;
//	}

	if (tvStatusT == eCP_ERR_NONE)
 8003212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003216:	2b00      	cmp	r3, #0
 8003218:	f040 8095 	bne.w	8003346 <CpCoreBufferSend+0x152>
	{
		//-----------------------------------------------------------------
		// setup identifier
		//
		if (CpMsgIsExtended(&atsCan1MsgS[ubBufferIdxV]))
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4a4b      	ldr	r2, [pc, #300]	; (8003354 <CpCoreBufferSend+0x160>)
 8003228:	4413      	add	r3, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fd65 	bl	8002cfa <CpMsgIsExtended>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00b      	beq.n	800324e <CpCoreBufferSend+0x5a>
		{
			tx_header.ExtId = atsCan1MsgS[ubBufferIdxV].ulIdentifier;
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	4946      	ldr	r1, [pc, #280]	; (8003354 <CpCoreBufferSend+0x160>)
 800323a:	4613      	mov	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4413      	add	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	440b      	add	r3, r1
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]
			tx_header.IDE = CAN_ID_EXT;
 8003248:	2304      	movs	r3, #4
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	e00a      	b.n	8003264 <CpCoreBufferSend+0x70>
		}
		else
		{
			tx_header.StdId = atsCan1MsgS[ubBufferIdxV].ulIdentifier;
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	4940      	ldr	r1, [pc, #256]	; (8003354 <CpCoreBufferSend+0x160>)
 8003252:	4613      	mov	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4413      	add	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	440b      	add	r3, r1
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60bb      	str	r3, [r7, #8]
			tx_header.IDE = CAN_ID_STD;
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
		}

		//-----------------------------------------------------------------
		// check for RTR bit
		//
		if (CpMsgIsRemote(&atsCan1MsgS[ubBufferIdxV]))
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4a39      	ldr	r2, [pc, #228]	; (8003354 <CpCoreBufferSend+0x160>)
 8003270:	4413      	add	r3, r2
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fd58 	bl	8002d28 <CpMsgIsRemote>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <CpCoreBufferSend+0x90>
		{
			tx_header.RTR = CAN_RTR_REMOTE;
 800327e:	2302      	movs	r3, #2
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	e001      	b.n	8003288 <CpCoreBufferSend+0x94>
		}
		else
		{
			tx_header.RTR = CAN_RTR_DATA;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
		}

		tx_header.DLC = atsCan1MsgS[ubBufferIdxV].ubMsgDLC;
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	4932      	ldr	r1, [pc, #200]	; (8003354 <CpCoreBufferSend+0x160>)
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	440b      	add	r3, r1
 8003296:	3310      	adds	r3, #16
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	61bb      	str	r3, [r7, #24]
		tx_header.TransmitGlobalTime = DISABLE;
 800329c:	2300      	movs	r3, #0
 800329e:	773b      	strb	r3, [r7, #28]
		atsCan1MsgS[ubBufferIdxV].ulMsgUser |= CP_BUFFER_PND;
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	492c      	ldr	r1, [pc, #176]	; (8003354 <CpCoreBufferSend+0x160>)
 80032a4:	4613      	mov	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	440b      	add	r3, r1
 80032ae:	3314      	adds	r3, #20
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	f043 0120 	orr.w	r1, r3, #32
 80032b8:	4826      	ldr	r0, [pc, #152]	; (8003354 <CpCoreBufferSend+0x160>)
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4403      	add	r3, r0
 80032c4:	3314      	adds	r3, #20
 80032c6:	6019      	str	r1, [r3, #0]
		if (HAL_CAN_AddTxMessage(&HCAN1, &tx_header, &atsCan1MsgS[ubBufferIdxV].tuMsgData.aubByte[0], &tx_mailbox) != HAL_OK)
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	4613      	mov	r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4413      	add	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	3308      	adds	r3, #8
 80032d4:	4a1f      	ldr	r2, [pc, #124]	; (8003354 <CpCoreBufferSend+0x160>)
 80032d6:	441a      	add	r2, r3
 80032d8:	f107 0320 	add.w	r3, r7, #32
 80032dc:	f107 0108 	add.w	r1, r7, #8
 80032e0:	481d      	ldr	r0, [pc, #116]	; (8003358 <CpCoreBufferSend+0x164>)
 80032e2:	f7fd fa2b 	bl	800073c <HAL_CAN_AddTxMessage>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d015      	beq.n	8003318 <CpCoreBufferSend+0x124>
			// mark this buffer for transmission,
			// the transmission will be done in the CAN Tx
			// interrupt
			//
#if CP_RETRANSMIT_WHEN_BUSY > 0
			atsCan1MsgS[ubBufferIdxV].ulMsgUser |= CP_BUFFER_RTX;
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	4919      	ldr	r1, [pc, #100]	; (8003354 <CpCoreBufferSend+0x160>)
 80032f0:	4613      	mov	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	440b      	add	r3, r1
 80032fa:	3314      	adds	r3, #20
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	f043 0130 	orr.w	r1, r3, #48	; 0x30
 8003304:	4813      	ldr	r0, [pc, #76]	; (8003354 <CpCoreBufferSend+0x160>)
 8003306:	4613      	mov	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4403      	add	r3, r0
 8003310:	3314      	adds	r3, #20
 8003312:	6019      	str	r1, [r3, #0]
#endif
			return eCP_ERR_TRM_FULL;
 8003314:	2308      	movs	r3, #8
 8003316:	e018      	b.n	800334a <CpCoreBufferSend+0x156>
		}
		else
		{
			/* save which buffer was used for tx */
			switch (tx_mailbox)
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d006      	beq.n	800332c <CpCoreBufferSend+0x138>
 800331e:	2b04      	cmp	r3, #4
 8003320:	d007      	beq.n	8003332 <CpCoreBufferSend+0x13e>
 8003322:	2b01      	cmp	r3, #1
 8003324:	d108      	bne.n	8003338 <CpCoreBufferSend+0x144>
			{
				case 1:
					tx_mailbox = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	623b      	str	r3, [r7, #32]
					break;
 800332a:	e007      	b.n	800333c <CpCoreBufferSend+0x148>
				case 2:
					tx_mailbox = 1;
 800332c:	2301      	movs	r3, #1
 800332e:	623b      	str	r3, [r7, #32]
					break;
 8003330:	e004      	b.n	800333c <CpCoreBufferSend+0x148>
				case 4:
					tx_mailbox = 2;
 8003332:	2302      	movs	r3, #2
 8003334:	623b      	str	r3, [r7, #32]
					break;
 8003336:	e001      	b.n	800333c <CpCoreBufferSend+0x148>
				default:
					return eCP_ERR_GENERIC;
 8003338:	2301      	movs	r3, #1
 800333a:	e006      	b.n	800334a <CpCoreBufferSend+0x156>
					break;
			}

			tx_mailbox_to_buffer[tx_mailbox] = ubBufferIdxV;
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8003342:	4a06      	ldr	r2, [pc, #24]	; (800335c <CpCoreBufferSend+0x168>)
 8003344:	54d1      	strb	r1, [r2, r3]
		}
	}

	return (tvStatusT);
 8003346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800334a:	4618      	mov	r0, r3
 800334c:	3728      	adds	r7, #40	; 0x28
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	200000b8 	.word	0x200000b8
 8003358:	2000045c 	.word	0x2000045c
 800335c:	200000a4 	.word	0x200000a4

08003360 <CpCoreCanMode>:
//----------------------------------------------------------------------------//
// CpCoreCanMode()                                                            //
//                                                                            //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreCanMode(CpPort_ts * ptsPortV, uint8_t ubModeV)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef hal_status1 = HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef hal_status2 = HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	737b      	strb	r3, [r7, #13]
	CpStatus_tv tvStatusT = eCP_ERR_CHANNEL;
 8003378:	2328      	movs	r3, #40	; 0x28
 800337a:	733b      	strb	r3, [r7, #12]

	//----------------------------------------------------------------
	// test CAN port
	//
	if (ptsPortV != (CpPort_ts *) 0L)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d05f      	beq.n	8003442 <CpCoreCanMode+0xe2>
	{
		if (ptsPortV->ubDrvInfo > eDRV_INFO_OFF)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	789b      	ldrb	r3, [r3, #2]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d05b      	beq.n	8003442 <CpCoreCanMode+0xe2>
		{
			tvStatusT = eCP_ERR_NONE;
 800338a:	2300      	movs	r3, #0
 800338c:	733b      	strb	r3, [r7, #12]
//----------------------------------------------------------------
// switch CAN controller into mode "ubModeV"
//
			switch (ubModeV)
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d013      	beq.n	80033bc <CpCoreCanMode+0x5c>
 8003394:	2b02      	cmp	r3, #2
 8003396:	d031      	beq.n	80033fc <CpCoreCanMode+0x9c>
 8003398:	2b00      	cmp	r3, #0
 800339a:	d150      	bne.n	800343e <CpCoreCanMode+0xde>
			{
				//--------------------------------------------------------
				// Stop the CAN controller (passive on the bus)
				//
				case eCP_MODE_STOP:
					hal_status = HAL_CAN_Stop(&HCAN1);
 800339c:	4831      	ldr	r0, [pc, #196]	; (8003464 <CpCoreCanMode+0x104>)
 800339e:	f7fd f984 	bl	80006aa <HAL_CAN_Stop>
 80033a2:	4603      	mov	r3, r0
 80033a4:	73fb      	strb	r3, [r7, #15]
					HAL_CAN_ResetError(&HCAN1);
 80033a6:	482f      	ldr	r0, [pc, #188]	; (8003464 <CpCoreCanMode+0x104>)
 80033a8:	f7fd fdf7 	bl	8000f9a <HAL_CAN_ResetError>
					hal_status1 = HAL_CAN_DeactivateNotification(&HCAN1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING |  CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR);
 80033ac:	f648 7113 	movw	r1, #36627	; 0x8f13
 80033b0:	482c      	ldr	r0, [pc, #176]	; (8003464 <CpCoreCanMode+0x104>)
 80033b2:	f7fd fbd3 	bl	8000b5c <HAL_CAN_DeactivateNotification>
 80033b6:	4603      	mov	r3, r0
 80033b8:	73bb      	strb	r3, [r7, #14]
					break;
 80033ba:	e043      	b.n	8003444 <CpCoreCanMode+0xe4>

					//--------------------------------------------------------
					// Start the CAN controller (active on the bus)
					//
				case eCP_MODE_OPERATION:
					HCAN1.Init.Mode = CAN_MODE_NORMAL;
 80033bc:	4b29      	ldr	r3, [pc, #164]	; (8003464 <CpCoreCanMode+0x104>)
 80033be:	2200      	movs	r2, #0
 80033c0:	609a      	str	r2, [r3, #8]
					HAL_CAN_ResetError(&HCAN1);
 80033c2:	4828      	ldr	r0, [pc, #160]	; (8003464 <CpCoreCanMode+0x104>)
 80033c4:	f7fd fde9 	bl	8000f9a <HAL_CAN_ResetError>
					/* Clear Last error code Flag */
					CLEAR_BIT(HCAN1.Instance->ESR, CAN_ESR_LEC);
 80033c8:	4b26      	ldr	r3, [pc, #152]	; (8003464 <CpCoreCanMode+0x104>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	4b25      	ldr	r3, [pc, #148]	; (8003464 <CpCoreCanMode+0x104>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80033d6:	619a      	str	r2, [r3, #24]
					hal_status = HAL_CAN_ActivateNotification(&HCAN1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR);
 80033d8:	f648 7113 	movw	r1, #36627	; 0x8f13
 80033dc:	4821      	ldr	r0, [pc, #132]	; (8003464 <CpCoreCanMode+0x104>)
 80033de:	f7fd fb98 	bl	8000b12 <HAL_CAN_ActivateNotification>
 80033e2:	4603      	mov	r3, r0
 80033e4:	73fb      	strb	r3, [r7, #15]
					hal_status1 = HAL_CAN_Init(&HCAN1);
 80033e6:	481f      	ldr	r0, [pc, #124]	; (8003464 <CpCoreCanMode+0x104>)
 80033e8:	f7fc ff34 	bl	8000254 <HAL_CAN_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	73bb      	strb	r3, [r7, #14]
					hal_status2 = HAL_CAN_Start(&HCAN1);
 80033f0:	481c      	ldr	r0, [pc, #112]	; (8003464 <CpCoreCanMode+0x104>)
 80033f2:	f7fd f916 	bl	8000622 <HAL_CAN_Start>
 80033f6:	4603      	mov	r3, r0
 80033f8:	737b      	strb	r3, [r7, #13]
					break;
 80033fa:	e023      	b.n	8003444 <CpCoreCanMode+0xe4>

					//--------------------------------------------------------
					// Start the CAN controller (Listen-Only)
					//
				case eCP_MODE_LISTEN_ONLY:
					HCAN1.Init.Mode = CAN_MODE_SILENT;
 80033fc:	4b19      	ldr	r3, [pc, #100]	; (8003464 <CpCoreCanMode+0x104>)
 80033fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003402:	609a      	str	r2, [r3, #8]
					HAL_CAN_ResetError(&HCAN1);
 8003404:	4817      	ldr	r0, [pc, #92]	; (8003464 <CpCoreCanMode+0x104>)
 8003406:	f7fd fdc8 	bl	8000f9a <HAL_CAN_ResetError>
					/* Clear Last error code Flag */
					CLEAR_BIT(HCAN1.Instance->ESR, CAN_ESR_LEC);
 800340a:	4b16      	ldr	r3, [pc, #88]	; (8003464 <CpCoreCanMode+0x104>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <CpCoreCanMode+0x104>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003418:	619a      	str	r2, [r3, #24]
					hal_status = HAL_CAN_ActivateNotification(&HCAN1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR);
 800341a:	f648 7113 	movw	r1, #36627	; 0x8f13
 800341e:	4811      	ldr	r0, [pc, #68]	; (8003464 <CpCoreCanMode+0x104>)
 8003420:	f7fd fb77 	bl	8000b12 <HAL_CAN_ActivateNotification>
 8003424:	4603      	mov	r3, r0
 8003426:	73fb      	strb	r3, [r7, #15]
					hal_status1 = HAL_CAN_Init(&HCAN1);
 8003428:	480e      	ldr	r0, [pc, #56]	; (8003464 <CpCoreCanMode+0x104>)
 800342a:	f7fc ff13 	bl	8000254 <HAL_CAN_Init>
 800342e:	4603      	mov	r3, r0
 8003430:	73bb      	strb	r3, [r7, #14]
					hal_status2 = HAL_CAN_Start(&HCAN1);
 8003432:	480c      	ldr	r0, [pc, #48]	; (8003464 <CpCoreCanMode+0x104>)
 8003434:	f7fd f8f5 	bl	8000622 <HAL_CAN_Start>
 8003438:	4603      	mov	r3, r0
 800343a:	737b      	strb	r3, [r7, #13]

					break;
 800343c:	e002      	b.n	8003444 <CpCoreCanMode+0xe4>

					//--------------------------------------------------------
					// Other modes are not supported
					//
				default:
					return (eCP_ERR_NOT_SUPPORTED);
 800343e:	2332      	movs	r3, #50	; 0x32
 8003440:	e00c      	b.n	800345c <CpCoreCanMode+0xfc>
					break;
			}
		}
 8003442:	bf00      	nop
	}

	if ((HAL_OK != hal_status) | (HAL_OK != hal_status1) | (HAL_OK != hal_status2))
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	7bbb      	ldrb	r3, [r7, #14]
 8003448:	4313      	orrs	r3, r2
 800344a:	b2da      	uxtb	r2, r3
 800344c:	7b7b      	ldrb	r3, [r7, #13]
 800344e:	4313      	orrs	r3, r2
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <CpCoreCanMode+0xfa>
	{
		return eCP_ERR_INIT_FAIL;
 8003456:	2303      	movs	r3, #3
 8003458:	e000      	b.n	800345c <CpCoreCanMode+0xfc>
	}

	return (tvStatusT);
 800345a:	7b3b      	ldrb	r3, [r7, #12]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	2000045c 	.word	0x2000045c

08003468 <CpCoreDriverInit>:
//----------------------------------------------------------------------------//
// CpCoreDriverInit()                                                         //
// init CAN controller                                                        //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreDriverInit(uint8_t ubPhyIfV, CpPort_ts * ptsPortV, uint8_t ubConfigV)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	6039      	str	r1, [r7, #0]
 8003472:	71fb      	strb	r3, [r7, #7]
 8003474:	4613      	mov	r3, r2
 8003476:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	CpStatus_tv tvStatusT = eCP_ERR_CHANNEL;
 8003478:	2328      	movs	r3, #40	; 0x28
 800347a:	73bb      	strb	r3, [r7, #14]

	//----------------------------------------------------------------
	// test physical CAN channel
	//
	if (ubPhyIfV == eCP_CHANNEL_1)
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d168      	bne.n	8003554 <CpCoreDriverInit+0xec>
	{

#if CP_STATISTIC > 0
		tx1_counter = 0;
 8003482:	4b37      	ldr	r3, [pc, #220]	; (8003560 <CpCoreDriverInit+0xf8>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
		rx1_counter = 0;
 8003488:	4b36      	ldr	r3, [pc, #216]	; (8003564 <CpCoreDriverInit+0xfc>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
		err1_counter = 0;
 800348e:	4b36      	ldr	r3, [pc, #216]	; (8003568 <CpCoreDriverInit+0x100>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
#endif

		//--------------------------------------------------------
		// test CAN port
		//
		if (ptsPortV != (CpPort_ts *) 0L)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d05a      	beq.n	8003550 <CpCoreDriverInit+0xe8>
		{
			if (ptsPortV->ubDrvInfo == eDRV_INFO_OFF)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	789b      	ldrb	r3, [r3, #2]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d153      	bne.n	800354a <CpCoreDriverInit+0xe2>
			{
				ptsPortV->ubPhyIf = eCP_CHANNEL_1;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
				ptsPortV->ubDrvInfo = eDRV_INFO_INIT;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2201      	movs	r2, #1
 80034ac:	709a      	strb	r2, [r3, #2]

				// save port
				aptsPortS[0] = ptsPortV;
 80034ae:	4a2f      	ldr	r2, [pc, #188]	; (800356c <CpCoreDriverInit+0x104>)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	6013      	str	r3, [r2, #0]
				//----------------------------------------------
				// hardware initialization
				//

				// clear filter to buffer mapping
				for (i = 0; i < MAX_CAN_FILTER_NUMBER; i++)
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]
 80034b8:	e006      	b.n	80034c8 <CpCoreDriverInit+0x60>
				{
					filter_to_cp_buffer[i] = BUFFER_NONE;
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
 80034bc:	4a2c      	ldr	r2, [pc, #176]	; (8003570 <CpCoreDriverInit+0x108>)
 80034be:	21ff      	movs	r1, #255	; 0xff
 80034c0:	54d1      	strb	r1, [r2, r3]
				for (i = 0; i < MAX_CAN_FILTER_NUMBER; i++)
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	3301      	adds	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b0d      	cmp	r3, #13
 80034cc:	d9f5      	bls.n	80034ba <CpCoreDriverInit+0x52>
				}

				// release all buffers and
				for (i = eCP_BUFFER_1; i < CP_BUFFER_MAX; i++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]
 80034d2:	e007      	b.n	80034e4 <CpCoreDriverInit+0x7c>
				{
					CpCoreBufferRelease(ptsPortV, i);
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	4619      	mov	r1, r3
 80034d8:	6838      	ldr	r0, [r7, #0]
 80034da:	f7ff fe3d 	bl	8003158 <CpCoreBufferRelease>
				for (i = eCP_BUFFER_1; i < CP_BUFFER_MAX; i++)
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	3301      	adds	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	2b1f      	cmp	r3, #31
 80034e8:	d9f4      	bls.n	80034d4 <CpCoreDriverInit+0x6c>
				}

				for (i = 0; i < 3; i++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	73fb      	strb	r3, [r7, #15]
 80034ee:	e006      	b.n	80034fe <CpCoreDriverInit+0x96>
				{
					tx_mailbox_to_buffer[i] = BUFFER_NONE;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	4a20      	ldr	r2, [pc, #128]	; (8003574 <CpCoreDriverInit+0x10c>)
 80034f4:	21ff      	movs	r1, #255	; 0xff
 80034f6:	54d1      	strb	r1, [r2, r3]
				for (i = 0; i < 3; i++)
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	3301      	adds	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d9f5      	bls.n	80034f0 <CpCoreDriverInit+0x88>
				}

				HCAN1.Instance = CAN1;
 8003504:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <CpCoreDriverInit+0x110>)
 8003506:	4a1d      	ldr	r2, [pc, #116]	; (800357c <CpCoreDriverInit+0x114>)
 8003508:	601a      	str	r2, [r3, #0]
//				HCAN1.Init.Prescaler = 16;
				HCAN1.Init.Mode = CAN_MODE_NORMAL;
 800350a:	4b1b      	ldr	r3, [pc, #108]	; (8003578 <CpCoreDriverInit+0x110>)
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
//				HCAN1.Init.SyncJumpWidth = CAN_SJW_1TQ;
//				HCAN1.Init.TimeSeg1 = CAN_BS1_1TQ;
//				HCAN1.Init.TimeSeg2 = CAN_BS2_1TQ;
				HCAN1.Init.TimeTriggeredMode = DISABLE;
 8003510:	4b19      	ldr	r3, [pc, #100]	; (8003578 <CpCoreDriverInit+0x110>)
 8003512:	2200      	movs	r2, #0
 8003514:	761a      	strb	r2, [r3, #24]
				HCAN1.Init.AutoBusOff = DISABLE;
 8003516:	4b18      	ldr	r3, [pc, #96]	; (8003578 <CpCoreDriverInit+0x110>)
 8003518:	2200      	movs	r2, #0
 800351a:	765a      	strb	r2, [r3, #25]
				HCAN1.Init.AutoWakeUp = DISABLE;
 800351c:	4b16      	ldr	r3, [pc, #88]	; (8003578 <CpCoreDriverInit+0x110>)
 800351e:	2200      	movs	r2, #0
 8003520:	769a      	strb	r2, [r3, #26]
				HCAN1.Init.AutoRetransmission = ENABLE;
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <CpCoreDriverInit+0x110>)
 8003524:	2201      	movs	r2, #1
 8003526:	76da      	strb	r2, [r3, #27]
				HCAN1.Init.ReceiveFifoLocked = DISABLE;
 8003528:	4b13      	ldr	r3, [pc, #76]	; (8003578 <CpCoreDriverInit+0x110>)
 800352a:	2200      	movs	r2, #0
 800352c:	771a      	strb	r2, [r3, #28]
				HCAN1.Init.TransmitFifoPriority = DISABLE;
 800352e:	4b12      	ldr	r3, [pc, #72]	; (8003578 <CpCoreDriverInit+0x110>)
 8003530:	2200      	movs	r2, #0
 8003532:	775a      	strb	r2, [r3, #29]
//				if (can_filter_clear_all() != eCP_ERR_NONE)
//				{
//					return (eCP_ERR_INIT_FAIL);
//				}

				if (HAL_CAN_Init(&HCAN1) != HAL_OK)
 8003534:	4810      	ldr	r0, [pc, #64]	; (8003578 <CpCoreDriverInit+0x110>)
 8003536:	f7fc fe8d 	bl	8000254 <HAL_CAN_Init>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <CpCoreDriverInit+0xdc>
				{
					return (eCP_ERR_INIT_FAIL);
 8003540:	2303      	movs	r3, #3
 8003542:	e008      	b.n	8003556 <CpCoreDriverInit+0xee>
//				if (HAL_CAN_Start(&HCAN1) != HAL_OK)
//				{
//					return (eCP_ERR_INIT_FAIL);
//				}

				tvStatusT = eCP_ERR_NONE;
 8003544:	2300      	movs	r3, #0
 8003546:	73bb      	strb	r3, [r7, #14]
 8003548:	e004      	b.n	8003554 <CpCoreDriverInit+0xec>
			else
			{
				//---------------------------------------------
				// already initialized
				//
				tvStatusT = eCP_ERR_INIT_FAIL;
 800354a:	2303      	movs	r3, #3
 800354c:	73bb      	strb	r3, [r7, #14]
 800354e:	e001      	b.n	8003554 <CpCoreDriverInit+0xec>
		else
		{
			//-----------------------------------------------------
			// parameter ptsPortV is not correct
			//
			tvStatusT = eCP_ERR_PARAM;
 8003550:	232c      	movs	r3, #44	; 0x2c
 8003552:	73bb      	strb	r3, [r7, #14]
		}
	}

	return (tvStatusT);
 8003554:	7bbb      	ldrb	r3, [r7, #14]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	200000a8 	.word	0x200000a8
 8003564:	200000ac 	.word	0x200000ac
 8003568:	200000b0 	.word	0x200000b0
 800356c:	20000438 	.word	0x20000438
 8003570:	20000094 	.word	0x20000094
 8003574:	200000a4 	.word	0x200000a4
 8003578:	2000045c 	.word	0x2000045c
 800357c:	40006400 	.word	0x40006400

08003580 <CpCoreFifoConfig>:
//----------------------------------------------------------------------------//
// CpCoreFifoConfig()                                                         //
//                                                                            //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreFifoConfig(CpPort_ts * ptsPortV, uint8_t ubBufferIdxV, CpFifo_ts * ptsFifoV)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	460b      	mov	r3, r1
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	72fb      	strb	r3, [r7, #11]
	CpStatus_tv tvStatusT;

	//----------------------------------------------------------------
	// test parameter ptsPortV and ubBufferIdxV
	//
	tvStatusT = CheckParam(ptsPortV, ubBufferIdxV, eDRV_INFO_INIT);
 800358e:	7afb      	ldrb	r3, [r7, #11]
 8003590:	2201      	movs	r2, #1
 8003592:	4619      	mov	r1, r3
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f7ff fc94 	bl	8002ec2 <CheckParam>
 800359a:	4603      	mov	r3, r0
 800359c:	75fb      	strb	r3, [r7, #23]
	if (tvStatusT == eCP_ERR_NONE)
 800359e:	7dfb      	ldrb	r3, [r7, #23]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <CpCoreFifoConfig+0x3a>
	{
		if (ptsFifoV != (CpFifo_ts *) 0)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <CpCoreFifoConfig+0x36>
		{
			aptsCan1FifoS[ubBufferIdxV] = ptsFifoV;
 80035aa:	7afb      	ldrb	r3, [r7, #11]
 80035ac:	4905      	ldr	r1, [pc, #20]	; (80035c4 <CpCoreFifoConfig+0x44>)
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80035b4:	e001      	b.n	80035ba <CpCoreFifoConfig+0x3a>
		}
		else
		{
			tvStatusT = eCP_ERR_FIFO_PARAM;
 80035b6:	2318      	movs	r3, #24
 80035b8:	75fb      	strb	r3, [r7, #23]
		}
	}

	return (tvStatusT);
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	200003b8 	.word	0x200003b8

080035c8 <CpCoreFifoWrite>:
//----------------------------------------------------------------------------//
// CpCoreFifoWrite()                                                          //
//                                                                            //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreFifoWrite(CpPort_ts * ptsPortV, uint8_t ubBufferIdxV, CpCanMsg_ts * ptsCanMsgV, uint32_t * pulBufferSizeV)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	460b      	mov	r3, r1
 80035d6:	72fb      	strb	r3, [r7, #11]
	CpStatus_tv tvStatusT;

	//----------------------------------------------------------------
	// test parameter ptsPortV and ubBufferIdxV
	//
	tvStatusT = CheckParam(ptsPortV, ubBufferIdxV, eDRV_INFO_INIT);
 80035d8:	7afb      	ldrb	r3, [r7, #11]
 80035da:	2201      	movs	r2, #1
 80035dc:	4619      	mov	r1, r3
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f7ff fc6f 	bl	8002ec2 <CheckParam>
 80035e4:	4603      	mov	r3, r0
 80035e6:	77fb      	strb	r3, [r7, #31]

	if (tvStatusT == eCP_ERR_NONE)
 80035e8:	7ffb      	ldrb	r3, [r7, #31]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d15c      	bne.n	80036a8 <CpCoreFifoWrite+0xe0>
	{
		// check if buffer is valid
		if ((atsCan1MsgS[ubBufferIdxV].ulMsgUser & CP_BUFFER_VAL) != (CP_BUFFER_VAL))
 80035ee:	7afa      	ldrb	r2, [r7, #11]
 80035f0:	4930      	ldr	r1, [pc, #192]	; (80036b4 <CpCoreFifoWrite+0xec>)
 80035f2:	4613      	mov	r3, r2
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	440b      	add	r3, r1
 80035fc:	3314      	adds	r3, #20
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <CpCoreFifoWrite+0x44>
		{
			return eCP_ERR_BUFFER;
 8003608:	232b      	movs	r3, #43	; 0x2b
 800360a:	e04e      	b.n	80036aa <CpCoreFifoWrite+0xe2>
		}

		if (pulBufferSizeV != (uint32_t *) 0L)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d04a      	beq.n	80036a8 <CpCoreFifoWrite+0xe0>
		{
			if (ptsCanMsgV != (CpCanMsg_ts *) 0L)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d047      	beq.n	80036a8 <CpCoreFifoWrite+0xe0>
			{
				ptsFifoT = aptsCan1FifoS[ubBufferIdxV];
 8003618:	7afb      	ldrb	r3, [r7, #11]
 800361a:	4a27      	ldr	r2, [pc, #156]	; (80036b8 <CpCoreFifoWrite+0xf0>)
 800361c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003620:	61bb      	str	r3, [r7, #24]

				//----------------------------------------------------------------
				// check the FIFO
				//
				if (ptsFifoT == 0L)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <CpCoreFifoWrite+0x64>
				{
					return (eCP_ERR_FIFO_PARAM);
 8003628:	2318      	movs	r3, #24
 800362a:	e03e      	b.n	80036aa <CpCoreFifoWrite+0xe2>
				}

				//----------------------------------------------------------------
				// check if buffer is busy
				//
				if ((atsCan1MsgS[ubBufferIdxV].ulMsgUser & CP_BUFFER_PND) > 0)
 800362c:	7afa      	ldrb	r2, [r7, #11]
 800362e:	4921      	ldr	r1, [pc, #132]	; (80036b4 <CpCoreFifoWrite+0xec>)
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	440b      	add	r3, r1
 800363a:	3314      	adds	r3, #20
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01d      	beq.n	8003682 <CpCoreFifoWrite+0xba>
				{

					if (CpFifoIsFull(ptsFifoT) == 1)
 8003646:	69b8      	ldr	r0, [r7, #24]
 8003648:	f7ff fadb 	bl	8002c02 <CpFifoIsFull>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <CpCoreFifoWrite+0x96>
					{
						//--------------------------------------------------------
						// FIFO is empty, no data has been copied
						//
						*pulBufferSizeV = 0;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
						tvStatusT = eCP_ERR_FIFO_FULL;
 8003658:	2316      	movs	r3, #22
 800365a:	77fb      	strb	r3, [r7, #31]
 800365c:	e024      	b.n	80036a8 <CpCoreFifoWrite+0xe0>
					}
					else
					{
						ptsCanMsgT = CpFifoDataInPtr(ptsFifoT);
 800365e:	69b8      	ldr	r0, [r7, #24]
 8003660:	f7ff fa33 	bl	8002aca <CpFifoDataInPtr>
 8003664:	6178      	str	r0, [r7, #20]
						memcpy(ptsCanMsgT, ptsCanMsgV, sizeof(CpCanMsg_ts));
 8003666:	2218      	movs	r2, #24
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	6978      	ldr	r0, [r7, #20]
 800366c:	f000 fd00 	bl	8004070 <memcpy>
						CpFifoIncIn(ptsFifoT);
 8003670:	69b8      	ldr	r0, [r7, #24]
 8003672:	f7ff fa4e 	bl	8002b12 <CpFifoIncIn>
						*pulBufferSizeV = 1;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]
						tvStatusT = eCP_ERR_NONE;
 800367c:	2300      	movs	r3, #0
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e012      	b.n	80036a8 <CpCoreFifoWrite+0xe0>
					}
				}
				else
				{
					memcpy(&atsCan1MsgS[ubBufferIdxV], ptsCanMsgV, sizeof(CpCanMsg_ts));
 8003682:	7afa      	ldrb	r2, [r7, #11]
 8003684:	4613      	mov	r3, r2
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4413      	add	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <CpCoreFifoWrite+0xec>)
 800368e:	4413      	add	r3, r2
 8003690:	2218      	movs	r2, #24
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fceb 	bl	8004070 <memcpy>
					CpCoreBufferSend(ptsPortV, ubBufferIdxV);
 800369a:	7afb      	ldrb	r3, [r7, #11]
 800369c:	4619      	mov	r1, r3
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7ff fda8 	bl	80031f4 <CpCoreBufferSend>
					tvStatusT = eCP_ERR_NONE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	77fb      	strb	r3, [r7, #31]
				}
			}
		}
	}

	return (tvStatusT);
 80036a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3720      	adds	r7, #32
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	200000b8 	.word	0x200000b8
 80036b8:	200003b8 	.word	0x200003b8

080036bc <CpCoreIntFunctions>:
//----------------------------------------------------------------------------//
// CpCoreIntFunctions()                                                       //
//                                                                            //
//----------------------------------------------------------------------------//
CpStatus_tv CpCoreIntFunctions(CpPort_ts * ptsPortV, CpRcvHandler_Fn pfnRcvHandlerV, CpTrmHandler_Fn pfnTrmHandlerV, CpErrHandler_Fn pfnErrHandlerV)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
	CpStatus_tv tvStatusT = eCP_ERR_CHANNEL;
 80036ca:	2328      	movs	r3, #40	; 0x28
 80036cc:	75fb      	strb	r3, [r7, #23]

	//----------------------------------------------------------------
	// test CAN port
	//
	if (ptsPortV != (CpPort_ts *) 0L)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00e      	beq.n	80036f2 <CpCoreIntFunctions+0x36>
	{
		if (ptsPortV->ubDrvInfo > eDRV_INFO_OFF)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	789b      	ldrb	r3, [r3, #2]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <CpCoreIntFunctions+0x36>
		{
			tvStatusT = eCP_ERR_NONE;
 80036dc:	2300      	movs	r3, #0
 80036de:	75fb      	strb	r3, [r7, #23]

			//-----------------------------------------------------
			// store the new callback
			//
			pfnRcvHandlerS = pfnRcvHandlerV;
 80036e0:	4a07      	ldr	r2, [pc, #28]	; (8003700 <CpCoreIntFunctions+0x44>)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	6013      	str	r3, [r2, #0]
			pfnTrmHandlerS = pfnTrmHandlerV;
 80036e6:	4a07      	ldr	r2, [pc, #28]	; (8003704 <CpCoreIntFunctions+0x48>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6013      	str	r3, [r2, #0]
			pfnErrHandlerS = pfnErrHandlerV;
 80036ec:	4a06      	ldr	r2, [pc, #24]	; (8003708 <CpCoreIntFunctions+0x4c>)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6013      	str	r3, [r2, #0]
		}
	}

	return (tvStatusT);
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	2000043c 	.word	0x2000043c
 8003704:	20000440 	.word	0x20000440
 8003708:	20000444 	.word	0x20000444

0800370c <can_filter_config>:
 * @param filter_number
 * @param activate
 * @retval HAL status
 */
static HAL_StatusTypeDef can_filter_config(uint32_t ulIdentifierV, uint32_t ulAcceptMaskV, uint8_t ubFormatV, uint8_t filter_number, uint32_t fifo, bool_t activate)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08e      	sub	sp, #56	; 0x38
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	4611      	mov	r1, r2
 8003718:	461a      	mov	r2, r3
 800371a:	460b      	mov	r3, r1
 800371c:	71fb      	strb	r3, [r7, #7]
 800371e:	4613      	mov	r3, r2
 8003720:	71bb      	strb	r3, [r7, #6]
	CAN_FilterTypeDef filter_config;

	// config filter only use 32Bit
	filter_config.FilterBank = filter_number;
 8003722:	79bb      	ldrb	r3, [r7, #6]
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
	filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 8003726:	2300      	movs	r3, #0
 8003728:	62bb      	str	r3, [r7, #40]	; 0x28
	filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 800372a:	2301      	movs	r3, #1
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c

	if ((ubFormatV & CP_MASK_MSG_FORMAT) == CP_MSG_FORMAT_CBFF)
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10d      	bne.n	8003754 <can_filter_config+0x48>
	{
		filter_config.FilterIdHigh = ulIdentifierV << 5;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	015b      	lsls	r3, r3, #5
 800373c:	613b      	str	r3, [r7, #16]
		filter_config.FilterIdLow = 0x0;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
		filter_config.FilterMaskIdHigh = ulAcceptMaskV << 5 | (0x1F);
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	015b      	lsls	r3, r3, #5
 8003746:	f043 031f 	orr.w	r3, r3, #31
 800374a:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdLow = 0xFFF8; // low 3bits ignore
 800374c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	e011      	b.n	8003778 <can_filter_config+0x6c>
	}
	else //  if((ubFormatV & CP_MSG_FORMAT_MASK) == CP_MSG_FORMAT_CEFF)
	{
		filter_config.FilterIdHigh = ulIdentifierV >> 13; // EXTID[28:13]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	0b5b      	lsrs	r3, r3, #13
 8003758:	613b      	str	r3, [r7, #16]
		filter_config.FilterIdLow = (0xFFFF & (ulIdentifierV << 3)) | (1 << 2); // EXTID[12:0] + IDE
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	b29b      	uxth	r3, r3
 8003760:	f043 0304 	orr.w	r3, r3, #4
 8003764:	617b      	str	r3, [r7, #20]
		filter_config.FilterMaskIdHigh = ulAcceptMaskV >> 13;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	0b5b      	lsrs	r3, r3, #13
 800376a:	61bb      	str	r3, [r7, #24]
		filter_config.FilterMaskIdLow = (0xFFFF & (ulAcceptMaskV << 3)) | (1 << 2);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	b29b      	uxth	r3, r3
 8003772:	f043 0304 	orr.w	r3, r3, #4
 8003776:	61fb      	str	r3, [r7, #28]
	}

	filter_config.FilterFIFOAssignment = fifo;
 8003778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377a:	623b      	str	r3, [r7, #32]
	filter_config.FilterActivation = activate;
 800377c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003780:	633b      	str	r3, [r7, #48]	; 0x30
	filter_config.SlaveStartFilterBank = 14;
 8003782:	230e      	movs	r3, #14
 8003784:	637b      	str	r3, [r7, #52]	; 0x34

	return HAL_CAN_ConfigFilter(&HCAN1, &filter_config);
 8003786:	f107 0310 	add.w	r3, r7, #16
 800378a:	4619      	mov	r1, r3
 800378c:	4803      	ldr	r0, [pc, #12]	; (800379c <can_filter_config+0x90>)
 800378e:	f7fc fe7f 	bl	8000490 <HAL_CAN_ConfigFilter>
 8003792:	4603      	mov	r3, r0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3738      	adds	r7, #56	; 0x38
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	2000045c 	.word	0x2000045c

080037a0 <get_next_free_filter_number>:
/**
 * @param filter_number
 * @return Error code is defined by the #CpErr_e enumeration. If no error occurred, the function will return the value \c #eCP_ERR_NONE.
 */
static CpStatus_tv get_next_free_filter_number(uint8_t *filter_number)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < MAX_CAN_FILTER_NUMBER; ++i)
 80037a8:	2300      	movs	r3, #0
 80037aa:	73fb      	strb	r3, [r7, #15]
 80037ac:	e00d      	b.n	80037ca <get_next_free_filter_number+0x2a>
	{
		if (filter_to_cp_buffer[i] == BUFFER_NONE)
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <get_next_free_filter_number+0x3c>)
 80037b2:	56d3      	ldrsb	r3, [r2, r3]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b8:	d104      	bne.n	80037c4 <get_next_free_filter_number+0x24>
		{
			*filter_number = i;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	7bfa      	ldrb	r2, [r7, #15]
 80037be:	701a      	strb	r2, [r3, #0]
			return eCP_ERR_NONE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e006      	b.n	80037d2 <get_next_free_filter_number+0x32>
	for (i = 0; i < MAX_CAN_FILTER_NUMBER; ++i)
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	3301      	adds	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	2b0d      	cmp	r3, #13
 80037ce:	d9ee      	bls.n	80037ae <get_next_free_filter_number+0xe>
		}
	}

	return eCP_ERR_INIT_FAIL;
 80037d0:	2303      	movs	r3, #3
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr
 80037dc:	20000094 	.word	0x20000094

080037e0 <search_for_already_defined_filter>:
 * @param ubBufferIdxV
 * @param filter_number
 * @return Error code is defined by the #CpErr_e enumeration. If no error occurred, the function will return the value \c #eCP_ERR_NONE.
 */
static CpStatus_tv search_for_already_defined_filter(uint8_t ubBufferIdxV, uint8_t *filter_number)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	6039      	str	r1, [r7, #0]
 80037ea:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 0; i < MAX_CAN_FILTER_NUMBER; ++i)
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]
 80037f0:	e00e      	b.n	8003810 <search_for_already_defined_filter+0x30>
	{
		if (filter_to_cp_buffer[i] == ubBufferIdxV)
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	4a0b      	ldr	r2, [pc, #44]	; (8003824 <search_for_already_defined_filter+0x44>)
 80037f6:	56d3      	ldrsb	r3, [r2, r3]
 80037f8:	461a      	mov	r2, r3
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d104      	bne.n	800380a <search_for_already_defined_filter+0x2a>
		{
			*filter_number = i;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	7bfa      	ldrb	r2, [r7, #15]
 8003804:	701a      	strb	r2, [r3, #0]
			return eCP_ERR_NONE;
 8003806:	2300      	movs	r3, #0
 8003808:	e006      	b.n	8003818 <search_for_already_defined_filter+0x38>
	for (i = 0; i < MAX_CAN_FILTER_NUMBER; ++i)
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	3301      	adds	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b0d      	cmp	r3, #13
 8003814:	d9ed      	bls.n	80037f2 <search_for_already_defined_filter+0x12>
		}
	}

	return eCP_ERR_INIT_FAIL;
 8003816:	2303      	movs	r3, #3
}
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000094 	.word	0x20000094

08003828 <can_filter_init>:
 * @param ulAcceptMaskV
 * @param ubFormatV
 * @return Error code is defined by the #CpErr_e enumeration. If no error occurred, the function will return the value \c #eCP_ERR_NONE.
 */
static CpStatus_tv can_filter_init(uint8_t ubBufferIdxV, uint32_t ulIdentifierV, uint32_t ulAcceptMaskV, uint8_t ubFormatV)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af02      	add	r7, sp, #8
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	461a      	mov	r2, r3
 8003834:	4603      	mov	r3, r0
 8003836:	73fb      	strb	r3, [r7, #15]
 8003838:	4613      	mov	r3, r2
 800383a:	73bb      	strb	r3, [r7, #14]
	uint8_t filter_number;
	HAL_StatusTypeDef hal_status;
	static uint32_t fifo_number = CAN_RX_FIFO0;

	// check if the buffer is already defined to a filter
	status = search_for_already_defined_filter(ubBufferIdxV, &filter_number);
 800383c:	f107 0215 	add.w	r2, r7, #21
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff ffcb 	bl	80037e0 <search_for_already_defined_filter>
 800384a:	4603      	mov	r3, r0
 800384c:	75fb      	strb	r3, [r7, #23]
	// it is not really nice but I use the status to check if a filter exists or not
	if (eCP_ERR_INIT_FAIL == status)
 800384e:	7dfb      	ldrb	r3, [r7, #23]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d106      	bne.n	8003862 <can_filter_init+0x3a>
	{
		// there is no filter assigned to this buffer so get a free one
		status = get_next_free_filter_number(&filter_number);
 8003854:	f107 0315 	add.w	r3, r7, #21
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff ffa1 	bl	80037a0 <get_next_free_filter_number>
 800385e:	4603      	mov	r3, r0
 8003860:	75fb      	strb	r3, [r7, #23]
	}

	if (eCP_ERR_NONE == status)
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d119      	bne.n	800389c <can_filter_init+0x74>
	{
		// save the buffer index on the filter to buffer table
		filter_to_cp_buffer[filter_number] = ubBufferIdxV;
 8003868:	7d7b      	ldrb	r3, [r7, #21]
 800386a:	461a      	mov	r2, r3
 800386c:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8003870:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <can_filter_init+0x80>)
 8003872:	5499      	strb	r1, [r3, r2]

		// config filter
		hal_status = can_filter_config(ulIdentifierV, ulAcceptMaskV, ubFormatV, filter_number, fifo_number, 1);
 8003874:	7d78      	ldrb	r0, [r7, #21]
 8003876:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <can_filter_init+0x84>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	7bb9      	ldrb	r1, [r7, #14]
 800387c:	2201      	movs	r2, #1
 800387e:	9201      	str	r2, [sp, #4]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	4603      	mov	r3, r0
 8003884:	460a      	mov	r2, r1
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	68b8      	ldr	r0, [r7, #8]
 800388a:	f7ff ff3f 	bl	800370c <can_filter_config>
 800388e:	4603      	mov	r3, r0
 8003890:	75bb      	strb	r3, [r7, #22]

		if (HAL_OK == hal_status)
 8003892:	7dbb      	ldrb	r3, [r7, #22]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <can_filter_init+0x74>
		{
			return eCP_ERR_NONE;
 8003898:	2300      	movs	r3, #0
 800389a:	e000      	b.n	800389e <can_filter_init+0x76>
		}
	}

	return eCP_ERR_INIT_FAIL;
 800389c:	2303      	movs	r3, #3
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000094 	.word	0x20000094
 80038ac:	20000448 	.word	0x20000448

080038b0 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan)
{
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	int8_t canpie_buffer_number;
	CpFifo_ts *ptsFifoT;
	CpCanMsg_ts *ptsFifoMsgT;
	CpCanMsg_ts *ptsCanMsgT;

	canpie_buffer_number = tx_mailbox_to_buffer[TX_MAILBOX_0];
 80038b8:	4b46      	ldr	r3, [pc, #280]	; (80039d4 <HAL_CAN_TxMailbox0CompleteCallback+0x124>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	75fb      	strb	r3, [r7, #23]
	//-----------------------------------------------------------------
	// get pointer to CAN buffer
	//
	if (canpie_buffer_number == BUFFER_NONE)
 80038be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c6:	d105      	bne.n	80038d4 <HAL_CAN_TxMailbox0CompleteCallback+0x24>
	{
#if CP_STATISTIC > 0
			err1_counter++;
 80038c8:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <HAL_CAN_TxMailbox0CompleteCallback+0x128>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	4a42      	ldr	r2, [pc, #264]	; (80039d8 <HAL_CAN_TxMailbox0CompleteCallback+0x128>)
 80038d0:	6013      	str	r3, [r2, #0]
		return;
 80038d2:	e07b      	b.n	80039cc <HAL_CAN_TxMailbox0CompleteCallback+0x11c>
#endif
	}

	ptsCanMsgT = &atsCan1MsgS[canpie_buffer_number];
 80038d4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80038d8:	4613      	mov	r3, r2
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	4413      	add	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4a3e      	ldr	r2, [pc, #248]	; (80039dc <HAL_CAN_TxMailbox0CompleteCallback+0x12c>)
 80038e2:	4413      	add	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
	ptsCanMsgT->ulMsgUser &= ~CP_BUFFER_PND;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f023 0220 	bic.w	r2, r3, #32
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	615a      	str	r2, [r3, #20]

	if (aptsCan1FifoS[canpie_buffer_number] == 0L)
 80038f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038f6:	4a3a      	ldr	r2, [pc, #232]	; (80039e0 <HAL_CAN_TxMailbox0CompleteCallback+0x130>)
 80038f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d117      	bne.n	8003930 <HAL_CAN_TxMailbox0CompleteCallback+0x80>
	{
		if ((canpie_buffer_number != BUFFER_NONE) && (CPP_NULL != pfnTrmHandlerS))
 8003900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003908:	d033      	beq.n	8003972 <HAL_CAN_TxMailbox0CompleteCallback+0xc2>
 800390a:	4b36      	ldr	r3, [pc, #216]	; (80039e4 <HAL_CAN_TxMailbox0CompleteCallback+0x134>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d02f      	beq.n	8003972 <HAL_CAN_TxMailbox0CompleteCallback+0xc2>
		{
			pfnTrmHandlerS(&atsCan1MsgS[canpie_buffer_number], canpie_buffer_number);
 8003912:	4b34      	ldr	r3, [pc, #208]	; (80039e4 <HAL_CAN_TxMailbox0CompleteCallback+0x134>)
 8003914:	681c      	ldr	r4, [r3, #0]
 8003916:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800391a:	4613      	mov	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4a2e      	ldr	r2, [pc, #184]	; (80039dc <HAL_CAN_TxMailbox0CompleteCallback+0x12c>)
 8003924:	4413      	add	r3, r2
 8003926:	7dfa      	ldrb	r2, [r7, #23]
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	47a0      	blx	r4
 800392e:	e020      	b.n	8003972 <HAL_CAN_TxMailbox0CompleteCallback+0xc2>
		}
	}
	else
	{
		ptsFifoT = aptsCan1FifoS[canpie_buffer_number];
 8003930:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003934:	4a2a      	ldr	r2, [pc, #168]	; (80039e0 <HAL_CAN_TxMailbox0CompleteCallback+0x130>)
 8003936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393a:	60fb      	str	r3, [r7, #12]
		if (CpFifoIsEmpty(ptsFifoT) == 0)
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f7ff f94e 	bl	8002bde <CpFifoIsEmpty>
 8003942:	4603      	mov	r3, r0
 8003944:	f083 0301 	eor.w	r3, r3, #1
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d011      	beq.n	8003972 <HAL_CAN_TxMailbox0CompleteCallback+0xc2>
		{
			ptsFifoMsgT = CpFifoDataOutPtr(ptsFifoT);
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f7ff f8cd 	bl	8002aee <CpFifoDataOutPtr>
 8003954:	60b8      	str	r0, [r7, #8]
			memcpy(ptsCanMsgT, ptsFifoMsgT, sizeof(CpCanMsg_ts));
 8003956:	2218      	movs	r2, #24
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	6938      	ldr	r0, [r7, #16]
 800395c:	f000 fb88 	bl	8004070 <memcpy>
			CpFifoIncOut(ptsFifoT);
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f7ff f8fc 	bl	8002b5e <CpFifoIncOut>
			ptsCanMsgT->ulMsgUser |= CP_BUFFER_PND;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	615a      	str	r2, [r3, #20]
		}
	}

	// clear mailbox buffer 0
	tx_mailbox_to_buffer[TX_MAILBOX_0] = BUFFER_NONE;
 8003972:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <HAL_CAN_TxMailbox0CompleteCallback+0x124>)
 8003974:	22ff      	movs	r2, #255	; 0xff
 8003976:	701a      	strb	r2, [r3, #0]

	//-----------------------------------------------------------------
	// run through buffer list and test for open Tx requests
	//
	ptsCanMsgT = &atsCan1MsgS[0];
 8003978:	4b18      	ldr	r3, [pc, #96]	; (80039dc <HAL_CAN_TxMailbox0CompleteCallback+0x12c>)
 800397a:	613b      	str	r3, [r7, #16]
	for (canpie_buffer_number = 0; canpie_buffer_number < CP_BUFFER_MAX; canpie_buffer_number++)
 800397c:	2300      	movs	r3, #0
 800397e:	75fb      	strb	r3, [r7, #23]
 8003980:	e01b      	b.n	80039ba <HAL_CAN_TxMailbox0CompleteCallback+0x10a>
	{
		if (((ptsCanMsgT->ulMsgUser) & CP_BUFFER_PND))
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00c      	beq.n	80039a8 <HAL_CAN_TxMailbox0CompleteCallback+0xf8>
		{
			ptsCanMsgT->ulMsgUser &= ~CP_BUFFER_PND;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f023 0220 	bic.w	r2, r3, #32
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	615a      	str	r2, [r3, #20]
			CpCoreBufferSend(aptsPortS[0], canpie_buffer_number);
 800399a:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <HAL_CAN_TxMailbox0CompleteCallback+0x138>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	7dfa      	ldrb	r2, [r7, #23]
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff fc26 	bl	80031f4 <CpCoreBufferSend>
		}
		ptsCanMsgT++;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	3318      	adds	r3, #24
 80039ac:	613b      	str	r3, [r7, #16]
	for (canpie_buffer_number = 0; canpie_buffer_number < CP_BUFFER_MAX; canpie_buffer_number++)
 80039ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	3301      	adds	r3, #1
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	75fb      	strb	r3, [r7, #23]
 80039ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039be:	2b1f      	cmp	r3, #31
 80039c0:	dddf      	ble.n	8003982 <HAL_CAN_TxMailbox0CompleteCallback+0xd2>
	}

#if CP_STATISTIC > 0
	tx1_counter++;
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <HAL_CAN_TxMailbox0CompleteCallback+0x13c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3301      	adds	r3, #1
 80039c8:	4a08      	ldr	r2, [pc, #32]	; (80039ec <HAL_CAN_TxMailbox0CompleteCallback+0x13c>)
 80039ca:	6013      	str	r3, [r2, #0]
#endif
}
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd90      	pop	{r4, r7, pc}
 80039d2:	bf00      	nop
 80039d4:	200000a4 	.word	0x200000a4
 80039d8:	200000b0 	.word	0x200000b0
 80039dc:	200000b8 	.word	0x200000b8
 80039e0:	200003b8 	.word	0x200003b8
 80039e4:	20000440 	.word	0x20000440
 80039e8:	20000438 	.word	0x20000438
 80039ec:	200000a8 	.word	0x200000a8

080039f0 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan)
{
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
	int8_t canpie_buffer_number;
	CpFifo_ts *ptsFifoT;
	CpCanMsg_ts *ptsFifoMsgT;
	CpCanMsg_ts *ptsCanMsgT;

	canpie_buffer_number = tx_mailbox_to_buffer[TX_MAILBOX_1];
 80039f8:	4b44      	ldr	r3, [pc, #272]	; (8003b0c <HAL_CAN_TxMailbox1CompleteCallback+0x11c>)
 80039fa:	785b      	ldrb	r3, [r3, #1]
 80039fc:	75fb      	strb	r3, [r7, #23]
	//-----------------------------------------------------------------
	// get pointer to CAN buffer
	//
	if (canpie_buffer_number == BUFFER_NONE)
 80039fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d07c      	beq.n	8003b02 <HAL_CAN_TxMailbox1CompleteCallback+0x112>
	{
		//printf("error should not happen");
		return;
	}

	ptsCanMsgT = &atsCan1MsgS[canpie_buffer_number];
 8003a08:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4a3e      	ldr	r2, [pc, #248]	; (8003b10 <HAL_CAN_TxMailbox1CompleteCallback+0x120>)
 8003a16:	4413      	add	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
	ptsCanMsgT->ulMsgUser &= ~CP_BUFFER_PND;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f023 0220 	bic.w	r2, r3, #32
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	615a      	str	r2, [r3, #20]

	if (aptsCan1FifoS[canpie_buffer_number] == 0L)
 8003a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a2a:	4a3a      	ldr	r2, [pc, #232]	; (8003b14 <HAL_CAN_TxMailbox1CompleteCallback+0x124>)
 8003a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d117      	bne.n	8003a64 <HAL_CAN_TxMailbox1CompleteCallback+0x74>
	{
		if ((canpie_buffer_number != BUFFER_NONE) && (CPP_NULL != pfnTrmHandlerS))
 8003a34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d033      	beq.n	8003aa6 <HAL_CAN_TxMailbox1CompleteCallback+0xb6>
 8003a3e:	4b36      	ldr	r3, [pc, #216]	; (8003b18 <HAL_CAN_TxMailbox1CompleteCallback+0x128>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d02f      	beq.n	8003aa6 <HAL_CAN_TxMailbox1CompleteCallback+0xb6>
		{
			pfnTrmHandlerS(&atsCan1MsgS[canpie_buffer_number], canpie_buffer_number);
 8003a46:	4b34      	ldr	r3, [pc, #208]	; (8003b18 <HAL_CAN_TxMailbox1CompleteCallback+0x128>)
 8003a48:	681c      	ldr	r4, [r3, #0]
 8003a4a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4a2e      	ldr	r2, [pc, #184]	; (8003b10 <HAL_CAN_TxMailbox1CompleteCallback+0x120>)
 8003a58:	4413      	add	r3, r2
 8003a5a:	7dfa      	ldrb	r2, [r7, #23]
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	47a0      	blx	r4
 8003a62:	e020      	b.n	8003aa6 <HAL_CAN_TxMailbox1CompleteCallback+0xb6>
		}
	}
	else
	{
		ptsFifoT = aptsCan1FifoS[canpie_buffer_number];
 8003a64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a68:	4a2a      	ldr	r2, [pc, #168]	; (8003b14 <HAL_CAN_TxMailbox1CompleteCallback+0x124>)
 8003a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6e:	60fb      	str	r3, [r7, #12]
		if (CpFifoIsEmpty(ptsFifoT) == 0)
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f7ff f8b4 	bl	8002bde <CpFifoIsEmpty>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f083 0301 	eor.w	r3, r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d011      	beq.n	8003aa6 <HAL_CAN_TxMailbox1CompleteCallback+0xb6>
		{
			ptsFifoMsgT = CpFifoDataOutPtr(ptsFifoT);
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f7ff f833 	bl	8002aee <CpFifoDataOutPtr>
 8003a88:	60b8      	str	r0, [r7, #8]
			memcpy(ptsCanMsgT, ptsFifoMsgT, sizeof(CpCanMsg_ts));
 8003a8a:	2218      	movs	r2, #24
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	6938      	ldr	r0, [r7, #16]
 8003a90:	f000 faee 	bl	8004070 <memcpy>
			CpFifoIncOut(ptsFifoT);
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f7ff f862 	bl	8002b5e <CpFifoIncOut>
			ptsCanMsgT->ulMsgUser |= CP_BUFFER_PND;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f043 0220 	orr.w	r2, r3, #32
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	615a      	str	r2, [r3, #20]
		}
	}

	// clear mailbox buffer 1
	tx_mailbox_to_buffer[TX_MAILBOX_1] = BUFFER_NONE;
 8003aa6:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <HAL_CAN_TxMailbox1CompleteCallback+0x11c>)
 8003aa8:	22ff      	movs	r2, #255	; 0xff
 8003aaa:	705a      	strb	r2, [r3, #1]

	//-----------------------------------------------------------------
	// run through buffer list and test for open Tx requests
	//
	ptsCanMsgT = &atsCan1MsgS[0];
 8003aac:	4b18      	ldr	r3, [pc, #96]	; (8003b10 <HAL_CAN_TxMailbox1CompleteCallback+0x120>)
 8003aae:	613b      	str	r3, [r7, #16]
	for (canpie_buffer_number = 0; canpie_buffer_number < CP_BUFFER_MAX; canpie_buffer_number++)
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	75fb      	strb	r3, [r7, #23]
 8003ab4:	e01b      	b.n	8003aee <HAL_CAN_TxMailbox1CompleteCallback+0xfe>
	{
		if (((ptsCanMsgT->ulMsgUser) & CP_BUFFER_PND))
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00c      	beq.n	8003adc <HAL_CAN_TxMailbox1CompleteCallback+0xec>
		{
			ptsCanMsgT->ulMsgUser &= ~CP_BUFFER_PND;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f023 0220 	bic.w	r2, r3, #32
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	615a      	str	r2, [r3, #20]
			CpCoreBufferSend(aptsPortS[0], canpie_buffer_number);
 8003ace:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <HAL_CAN_TxMailbox1CompleteCallback+0x12c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	7dfa      	ldrb	r2, [r7, #23]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fb8c 	bl	80031f4 <CpCoreBufferSend>
		}
		ptsCanMsgT++;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	3318      	adds	r3, #24
 8003ae0:	613b      	str	r3, [r7, #16]
	for (canpie_buffer_number = 0; canpie_buffer_number < CP_BUFFER_MAX; canpie_buffer_number++)
 8003ae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	3301      	adds	r3, #1
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	75fb      	strb	r3, [r7, #23]
 8003aee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003af2:	2b1f      	cmp	r3, #31
 8003af4:	dddf      	ble.n	8003ab6 <HAL_CAN_TxMailbox1CompleteCallback+0xc6>
	}

#if CP_STATISTIC > 0
	tx1_counter++;
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <HAL_CAN_TxMailbox1CompleteCallback+0x130>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3301      	adds	r3, #1
 8003afc:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <HAL_CAN_TxMailbox1CompleteCallback+0x130>)
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e000      	b.n	8003b04 <HAL_CAN_TxMailbox1CompleteCallback+0x114>
		return;
 8003b02:	bf00      	nop
#endif
}
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd90      	pop	{r4, r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200000a4 	.word	0x200000a4
 8003b10:	200000b8 	.word	0x200000b8
 8003b14:	200003b8 	.word	0x200003b8
 8003b18:	20000440 	.word	0x20000440
 8003b1c:	20000438 	.word	0x20000438
 8003b20:	200000a8 	.word	0x200000a8

08003b24 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8003b24:	b590      	push	{r4, r7, lr}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	int8_t canpie_buffer_number;
	CpFifo_ts *ptsFifoT;
	CpCanMsg_ts *ptsFifoMsgT;
	CpCanMsg_ts *ptsCanMsgT;

	canpie_buffer_number = tx_mailbox_to_buffer[TX_MAILBOX_2];
 8003b2c:	4b44      	ldr	r3, [pc, #272]	; (8003c40 <HAL_CAN_TxMailbox2CompleteCallback+0x11c>)
 8003b2e:	789b      	ldrb	r3, [r3, #2]
 8003b30:	75fb      	strb	r3, [r7, #23]
	//-----------------------------------------------------------------
	// get pointer to CAN buffer
	//
	if (canpie_buffer_number == BUFFER_NONE)
 8003b32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d07d      	beq.n	8003c38 <HAL_CAN_TxMailbox2CompleteCallback+0x114>
	{
		//printf("error should not happen");
		return;
	}

	ptsCanMsgT = &atsCan1MsgS[canpie_buffer_number];
 8003b3c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8003b40:	4613      	mov	r3, r2
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4a3e      	ldr	r2, [pc, #248]	; (8003c44 <HAL_CAN_TxMailbox2CompleteCallback+0x120>)
 8003b4a:	4413      	add	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
	ptsCanMsgT->ulMsgUser &= ~CP_BUFFER_PND;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f023 0220 	bic.w	r2, r3, #32
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	615a      	str	r2, [r3, #20]

	if (aptsCan1FifoS[canpie_buffer_number] == 0L)
 8003b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b5e:	4a3a      	ldr	r2, [pc, #232]	; (8003c48 <HAL_CAN_TxMailbox2CompleteCallback+0x124>)
 8003b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d117      	bne.n	8003b98 <HAL_CAN_TxMailbox2CompleteCallback+0x74>
	{
		if ((canpie_buffer_number != BUFFER_NONE) && (CPP_NULL != pfnTrmHandlerS))
 8003b68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d033      	beq.n	8003bda <HAL_CAN_TxMailbox2CompleteCallback+0xb6>
 8003b72:	4b36      	ldr	r3, [pc, #216]	; (8003c4c <HAL_CAN_TxMailbox2CompleteCallback+0x128>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d02f      	beq.n	8003bda <HAL_CAN_TxMailbox2CompleteCallback+0xb6>
		{
			pfnTrmHandlerS(&atsCan1MsgS[canpie_buffer_number], canpie_buffer_number);
 8003b7a:	4b34      	ldr	r3, [pc, #208]	; (8003c4c <HAL_CAN_TxMailbox2CompleteCallback+0x128>)
 8003b7c:	681c      	ldr	r4, [r3, #0]
 8003b7e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8003b82:	4613      	mov	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4a2e      	ldr	r2, [pc, #184]	; (8003c44 <HAL_CAN_TxMailbox2CompleteCallback+0x120>)
 8003b8c:	4413      	add	r3, r2
 8003b8e:	7dfa      	ldrb	r2, [r7, #23]
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	47a0      	blx	r4
 8003b96:	e020      	b.n	8003bda <HAL_CAN_TxMailbox2CompleteCallback+0xb6>
		}
	}
	else
	{
		ptsFifoT = aptsCan1FifoS[canpie_buffer_number];
 8003b98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b9c:	4a2a      	ldr	r2, [pc, #168]	; (8003c48 <HAL_CAN_TxMailbox2CompleteCallback+0x124>)
 8003b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba2:	60fb      	str	r3, [r7, #12]
		if (CpFifoIsEmpty(ptsFifoT) == 0)
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff f81a 	bl	8002bde <CpFifoIsEmpty>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f083 0301 	eor.w	r3, r3, #1
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d011      	beq.n	8003bda <HAL_CAN_TxMailbox2CompleteCallback+0xb6>
		{
			ptsFifoMsgT = CpFifoDataOutPtr(ptsFifoT);
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f7fe ff99 	bl	8002aee <CpFifoDataOutPtr>
 8003bbc:	60b8      	str	r0, [r7, #8]
			memcpy(ptsCanMsgT, ptsFifoMsgT, sizeof(CpCanMsg_ts));
 8003bbe:	2218      	movs	r2, #24
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	6938      	ldr	r0, [r7, #16]
 8003bc4:	f000 fa54 	bl	8004070 <memcpy>
			CpFifoIncOut(ptsFifoT);
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f7fe ffc8 	bl	8002b5e <CpFifoIncOut>
			ptsCanMsgT->ulMsgUser |= CP_BUFFER_PND;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f043 0220 	orr.w	r2, r3, #32
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	615a      	str	r2, [r3, #20]
		}
	}

	// clear mailbox buffer 2
	tx_mailbox_to_buffer[TX_MAILBOX_2] = BUFFER_NONE;
 8003bda:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <HAL_CAN_TxMailbox2CompleteCallback+0x11c>)
 8003bdc:	22ff      	movs	r2, #255	; 0xff
 8003bde:	709a      	strb	r2, [r3, #2]

	//-----------------------------------------------------------------
	// run through buffer list and test for open Tx requests
	//
	ptsCanMsgT = &atsCan1MsgS[0];
 8003be0:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <HAL_CAN_TxMailbox2CompleteCallback+0x120>)
 8003be2:	613b      	str	r3, [r7, #16]
	for (canpie_buffer_number = 0; canpie_buffer_number < CP_BUFFER_MAX; canpie_buffer_number++)
 8003be4:	2300      	movs	r3, #0
 8003be6:	75fb      	strb	r3, [r7, #23]
 8003be8:	e01c      	b.n	8003c24 <HAL_CAN_TxMailbox2CompleteCallback+0x100>
	{
		if (((ptsCanMsgT->ulMsgUser) & CP_BUFFER_PND))
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <HAL_CAN_TxMailbox2CompleteCallback+0xee>
		{
			ptsCanMsgT->ulMsgUser &= ~CP_BUFFER_PND;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f023 0220 	bic.w	r2, r3, #32
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	615a      	str	r2, [r3, #20]
			CpCoreBufferSend(aptsPortS[0], canpie_buffer_number);
 8003c02:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <HAL_CAN_TxMailbox2CompleteCallback+0x12c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	7dfa      	ldrb	r2, [r7, #23]
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff faf2 	bl	80031f4 <CpCoreBufferSend>
			break;
 8003c10:	e00c      	b.n	8003c2c <HAL_CAN_TxMailbox2CompleteCallback+0x108>
		}
		ptsCanMsgT++;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	3318      	adds	r3, #24
 8003c16:	613b      	str	r3, [r7, #16]
	for (canpie_buffer_number = 0; canpie_buffer_number < CP_BUFFER_MAX; canpie_buffer_number++)
 8003c18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	75fb      	strb	r3, [r7, #23]
 8003c24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c28:	2b1f      	cmp	r3, #31
 8003c2a:	ddde      	ble.n	8003bea <HAL_CAN_TxMailbox2CompleteCallback+0xc6>
	}

#if CP_STATISTIC > 0
	tx1_counter++;
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <HAL_CAN_TxMailbox2CompleteCallback+0x130>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <HAL_CAN_TxMailbox2CompleteCallback+0x130>)
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e000      	b.n	8003c3a <HAL_CAN_TxMailbox2CompleteCallback+0x116>
		return;
 8003c38:	bf00      	nop
#endif
}
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd90      	pop	{r4, r7, pc}
 8003c40:	200000a4 	.word	0x200000a4
 8003c44:	200000b8 	.word	0x200000b8
 8003c48:	200003b8 	.word	0x200003b8
 8003c4c:	20000440 	.word	0x20000440
 8003c50:	20000438 	.word	0x20000438
 8003c54:	200000a8 	.word	0x200000a8

08003c58 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b090      	sub	sp, #64	; 0x40
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	CpCanMsg_ts *ptsFifoMsgT;

	CAN_RxHeaderTypeDef header;
	uint8_t rx_data[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &header, rx_data);
 8003c60:	f107 030c 	add.w	r3, r7, #12
 8003c64:	f107 0214 	add.w	r2, r7, #20
 8003c68:	2100      	movs	r1, #0
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fc fe40 	bl	80008f0 <HAL_CAN_GetRxMessage>

	canpie_buffer_number = filter_to_cp_buffer[header.FilterMatchIndex];
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	4a3d      	ldr	r2, [pc, #244]	; (8003d68 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8003c74:	56d3      	ldrsb	r3, [r2, r3]
 8003c76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	pcan_msg = &atsCan1MsgS[canpie_buffer_number];
 8003c7a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003c7e:	4613      	mov	r3, r2
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4413      	add	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4a39      	ldr	r2, [pc, #228]	; (8003d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8003c88:	4413      	add	r3, r2
 8003c8a:	63bb      	str	r3, [r7, #56]	; 0x38

	if (header.IDE == CAN_ID_STD)
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
	{
		CpMsgSetStdId(pcan_msg, header.StdId);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	4619      	mov	r1, r3
 8003c98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c9a:	f7ff f8f6 	bl	8002e8a <CpMsgSetStdId>
 8003c9e:	e004      	b.n	8003caa <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	}
	else
	{
		CpMsgSetExtId(pcan_msg, header.ExtId);
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ca6:	f7ff f89e 	bl	8002de6 <CpMsgSetExtId>
	}

	if (header.RTR == CAN_RTR_REMOTE)
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d103      	bne.n	8003cb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
	{
		CpMsgSetRemote(pcan_msg);
 8003cb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cb2:	f7ff f8d1 	bl	8002e58 <CpMsgSetRemote>
 8003cb6:	e002      	b.n	8003cbe <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
	}
	else
	{
		CpMsgClrRemote(pcan_msg);
 8003cb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cba:	f7fe ffdc 	bl	8002c76 <CpMsgClrRemote>
	}

	CpMsgSetDlc(pcan_msg, header.DLC);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cc6:	f7ff f86d 	bl	8002da4 <CpMsgSetDlc>

	pcan_msg->tuMsgData.aubByte[0] = rx_data[0];
 8003cca:	7b3a      	ldrb	r2, [r7, #12]
 8003ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cce:	721a      	strb	r2, [r3, #8]
	pcan_msg->tuMsgData.aubByte[1] = rx_data[1];
 8003cd0:	7b7a      	ldrb	r2, [r7, #13]
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	725a      	strb	r2, [r3, #9]
	pcan_msg->tuMsgData.aubByte[2] = rx_data[2];
 8003cd6:	7bba      	ldrb	r2, [r7, #14]
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cda:	729a      	strb	r2, [r3, #10]
	pcan_msg->tuMsgData.aubByte[3] = rx_data[3];
 8003cdc:	7bfa      	ldrb	r2, [r7, #15]
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	72da      	strb	r2, [r3, #11]
	pcan_msg->tuMsgData.aubByte[4] = rx_data[4];
 8003ce2:	7c3a      	ldrb	r2, [r7, #16]
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce6:	731a      	strb	r2, [r3, #12]
	pcan_msg->tuMsgData.aubByte[5] = rx_data[5];
 8003ce8:	7c7a      	ldrb	r2, [r7, #17]
 8003cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cec:	735a      	strb	r2, [r3, #13]
	pcan_msg->tuMsgData.aubByte[6] = rx_data[6];
 8003cee:	7cba      	ldrb	r2, [r7, #18]
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf2:	739a      	strb	r2, [r3, #14]
	pcan_msg->tuMsgData.aubByte[7] = rx_data[7];
 8003cf4:	7cfa      	ldrb	r2, [r7, #19]
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf8:	73da      	strb	r2, [r3, #15]
	//pcan_msg->ulMsgUser = hcan->pRxMsg->FIFONumber;

	//-----------------------------------------------------------------
	// test for receive callback handler
	//
	if (aptsCan1FifoS[canpie_buffer_number] == 0L)
 8003cfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003cfe:	4a1c      	ldr	r2, [pc, #112]	; (8003d70 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8003d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10b      	bne.n	8003d20 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
	{
		if (CPP_NULL != pfnRcvHandlerS)
 8003d08:	4b1a      	ldr	r3, [pc, #104]	; (8003d74 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d022      	beq.n	8003d56 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			pfnRcvHandlerS(pcan_msg, canpie_buffer_number);
 8003d10:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003d18:	4611      	mov	r1, r2
 8003d1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d1c:	4798      	blx	r3
 8003d1e:	e01a      	b.n	8003d56 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		}
	}
	else
	{
		ptsFifoT = aptsCan1FifoS[canpie_buffer_number];
 8003d20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d24:	4a12      	ldr	r2, [pc, #72]	; (8003d70 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8003d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2a:	637b      	str	r3, [r7, #52]	; 0x34
		if (CpFifoIsFull(ptsFifoT) == 0)
 8003d2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d2e:	f7fe ff68 	bl	8002c02 <CpFifoIsFull>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f083 0301 	eor.w	r3, r3, #1
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00b      	beq.n	8003d56 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			ptsFifoMsgT = CpFifoDataInPtr(ptsFifoT);
 8003d3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d40:	f7fe fec3 	bl	8002aca <CpFifoDataInPtr>
 8003d44:	6338      	str	r0, [r7, #48]	; 0x30
			memcpy(ptsFifoMsgT, pcan_msg, sizeof(CpCanMsg_ts));
 8003d46:	2218      	movs	r2, #24
 8003d48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d4c:	f000 f990 	bl	8004070 <memcpy>
			CpFifoIncIn(ptsFifoT);
 8003d50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d52:	f7fe fede 	bl	8002b12 <CpFifoIncIn>
		}
	}

#if CP_STATISTIC > 0
	rx1_counter++;
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	4a06      	ldr	r2, [pc, #24]	; (8003d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8003d5e:	6013      	str	r3, [r2, #0]
#endif
}
 8003d60:	bf00      	nop
 8003d62:	3740      	adds	r7, #64	; 0x40
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20000094 	.word	0x20000094
 8003d6c:	200000b8 	.word	0x200000b8
 8003d70:	200003b8 	.word	0x200003b8
 8003d74:	2000043c 	.word	0x2000043c
 8003d78:	200000ac 	.word	0x200000ac

08003d7c <HAL_CAN_ErrorCallback>:
/**
 * @todo enable error callback for error counter
 * @param hcan
 */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	static CpState_ts state;
	/**@todo fill state */
#if CP_STATISTIC > 0
	err1_counter++;
 8003d84:	4b0d      	ldr	r3, [pc, #52]	; (8003dbc <HAL_CAN_ErrorCallback+0x40>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	4a0c      	ldr	r2, [pc, #48]	; (8003dbc <HAL_CAN_ErrorCallback+0x40>)
 8003d8c:	6013      	str	r3, [r2, #0]
#endif
	/* Enable Error warning, Error passive, Bus-off, Last error and Error Interrupts and FIFO0, FIFO1 */
	__HAL_CAN_ENABLE_IT(hcan, CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_OVERRUN | CAN_IT_RX_FIFO0_MSG_PENDING| CAN_IT_RX_FIFO1_OVERRUN | CAN_IT_RX_FIFO1_MSG_PENDING);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	f443 430f 	orr.w	r3, r3, #36608	; 0x8f00
 8003d9c:	f043 035b 	orr.w	r3, r3, #91	; 0x5b
 8003da0:	6153      	str	r3, [r2, #20]

	if (CPP_NULL != pfnErrHandlerS)
 8003da2:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <HAL_CAN_ErrorCallback+0x44>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_CAN_ErrorCallback+0x36>
	{
		pfnErrHandlerS(&state);
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_CAN_ErrorCallback+0x44>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4805      	ldr	r0, [pc, #20]	; (8003dc4 <HAL_CAN_ErrorCallback+0x48>)
 8003db0:	4798      	blx	r3
	}
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	200000b0 	.word	0x200000b0
 8003dc0:	20000444 	.word	0x20000444
 8003dc4:	2000044c 	.word	0x2000044c

08003dc8 <app_init>:

/*--------------------------------------------------------------------------*/
/* function definition (public/exported)                                    */
/*--------------------------------------------------------------------------*/
lcsa_errorcode_t app_init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af02      	add	r7, sp, #8
    tx_data[0] = 'C';
 8003dce:	4b29      	ldr	r3, [pc, #164]	; (8003e74 <app_init+0xac>)
 8003dd0:	2243      	movs	r2, #67	; 0x43
 8003dd2:	701a      	strb	r2, [r3, #0]
    tx_data[1] = 'A';
 8003dd4:	4b27      	ldr	r3, [pc, #156]	; (8003e74 <app_init+0xac>)
 8003dd6:	2241      	movs	r2, #65	; 0x41
 8003dd8:	705a      	strb	r2, [r3, #1]
    tx_data[2] = 'N';
 8003dda:	4b26      	ldr	r3, [pc, #152]	; (8003e74 <app_init+0xac>)
 8003ddc:	224e      	movs	r2, #78	; 0x4e
 8003dde:	709a      	strb	r2, [r3, #2]
    tx_data[3] = 'P';
 8003de0:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <app_init+0xac>)
 8003de2:	2250      	movs	r2, #80	; 0x50
 8003de4:	70da      	strb	r2, [r3, #3]
    tx_data[4] = 'I';
 8003de6:	4b23      	ldr	r3, [pc, #140]	; (8003e74 <app_init+0xac>)
 8003de8:	2249      	movs	r2, #73	; 0x49
 8003dea:	711a      	strb	r2, [r3, #4]
    tx_data[5] = 'E';
 8003dec:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <app_init+0xac>)
 8003dee:	2245      	movs	r2, #69	; 0x45
 8003df0:	715a      	strb	r2, [r3, #5]
    tx_data[6] = 'F';
 8003df2:	4b20      	ldr	r3, [pc, #128]	; (8003e74 <app_init+0xac>)
 8003df4:	2246      	movs	r2, #70	; 0x46
 8003df6:	719a      	strb	r2, [r3, #6]
    tx_data[7] = 'D';
 8003df8:	4b1e      	ldr	r3, [pc, #120]	; (8003e74 <app_init+0xac>)
 8003dfa:	2244      	movs	r2, #68	; 0x44
 8003dfc:	71da      	strb	r2, [r3, #7]

    pclk = HAL_RCC_GetPCLK1Freq();
 8003dfe:	f7fe f853 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 8003e02:	4602      	mov	r2, r0
 8003e04:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <app_init+0xb0>)
 8003e06:	601a      	str	r2, [r3, #0]
    // start initialization

    //----------------------------------------------------------------
    // valid initialization
    //
    memset(&can_port_main, 0, sizeof(CpPort_ts));
 8003e08:	2203      	movs	r2, #3
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	481b      	ldr	r0, [pc, #108]	; (8003e7c <app_init+0xb4>)
 8003e0e:	f000 f93a 	bl	8004086 <memset>
    tvResultT = CpCoreDriverInit(eCP_CHANNEL_1, &can_port_main, 0);
 8003e12:	2200      	movs	r2, #0
 8003e14:	4919      	ldr	r1, [pc, #100]	; (8003e7c <app_init+0xb4>)
 8003e16:	2001      	movs	r0, #1
 8003e18:	f7ff fb26 	bl	8003468 <CpCoreDriverInit>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	461a      	mov	r2, r3
 8003e20:	4b17      	ldr	r3, [pc, #92]	; (8003e80 <app_init+0xb8>)
 8003e22:	701a      	strb	r2, [r3, #0]
    CpCoreIntFunctions(&can_port_main, canpie_rx_handler, canpie_tx_handler, canpie_err_handler);
 8003e24:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <app_init+0xbc>)
 8003e26:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <app_init+0xc0>)
 8003e28:	4918      	ldr	r1, [pc, #96]	; (8003e8c <app_init+0xc4>)
 8003e2a:	4814      	ldr	r0, [pc, #80]	; (8003e7c <app_init+0xb4>)
 8003e2c:	f7ff fc46 	bl	80036bc <CpCoreIntFunctions>

    CpCoreBitrate(&can_port_main, eCP_BITRATE_125K, eCP_BITRATE_125K);
 8003e30:	2204      	movs	r2, #4
 8003e32:	2104      	movs	r1, #4
 8003e34:	4811      	ldr	r0, [pc, #68]	; (8003e7c <app_init+0xb4>)
 8003e36:	f7ff f865 	bl	8002f04 <CpCoreBitrate>
    CpCoreCanMode(&can_port_main, eCP_MODE_START);
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	480f      	ldr	r0, [pc, #60]	; (8003e7c <app_init+0xb4>)
 8003e3e:	f7ff fa8f 	bl	8003360 <CpCoreCanMode>

    CpFifoInit(&tx_fifo, &tx_fifo_messages[0], 16);
 8003e42:	2210      	movs	r2, #16
 8003e44:	4912      	ldr	r1, [pc, #72]	; (8003e90 <app_init+0xc8>)
 8003e46:	4813      	ldr	r0, [pc, #76]	; (8003e94 <app_init+0xcc>)
 8003e48:	f7fe feaf 	bl	8002baa <CpFifoInit>

	//CpCoreBufferConfig(&can_port_main, eCP_BUFFER_11, (uint32_t) 0x123, CP_MASK_STD_FRAME, CP_MSG_FORMAT_CBFF, eCP_BUFFER_DIR_TRM);
	CpCoreBufferConfig(&can_port_main, eCP_BUFFER_11, (uint32_t) 0, CP_MASK_EXT_FRAME, CP_MSG_FORMAT_CEFF, eCP_BUFFER_DIR_TRM);
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	9301      	str	r3, [sp, #4]
 8003e50:	2301      	movs	r3, #1
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8003e58:	2200      	movs	r2, #0
 8003e5a:	210a      	movs	r1, #10
 8003e5c:	4807      	ldr	r0, [pc, #28]	; (8003e7c <app_init+0xb4>)
 8003e5e:	f7ff f8fd 	bl	800305c <CpCoreBufferConfig>
    CpCoreFifoConfig(&can_port_main, eCP_BUFFER_11, &tx_fifo);
 8003e62:	4a0c      	ldr	r2, [pc, #48]	; (8003e94 <app_init+0xcc>)
 8003e64:	210a      	movs	r1, #10
 8003e66:	4805      	ldr	r0, [pc, #20]	; (8003e7c <app_init+0xb4>)
 8003e68:	f7ff fb8a 	bl	8003580 <CpCoreFifoConfig>

	return LCSA_ERROR_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000878 	.word	0x20000878
 8003e78:	20000874 	.word	0x20000874
 8003e7c:	20000870 	.word	0x20000870
 8003e80:	20000550 	.word	0x20000550
 8003e84:	08004001 	.word	0x08004001
 8003e88:	08003f9d 	.word	0x08003f9d
 8003e8c:	08003fcd 	.word	0x08003fcd
 8003e90:	200006f0 	.word	0x200006f0
 8003e94:	20000558 	.word	0x20000558

08003e98 <app_main>:

void app_main(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
    //CpCanMsg_ts myMessage;
    uint32_t tmp;

    app_init();
 8003e9e:	f7ff ff93 	bl	8003dc8 <app_init>

    CpMsgInit(&myMessage, CP_MSG_FORMAT_CBFF);   // initialise message
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	4838      	ldr	r0, [pc, #224]	; (8003f88 <app_main+0xf0>)
 8003ea6:	f7fe ff0e 	bl	8002cc6 <CpMsgInit>
    CpMsgClear(&myMessage);
 8003eaa:	4837      	ldr	r0, [pc, #220]	; (8003f88 <app_main+0xf0>)
 8003eac:	f7fe febb 	bl	8002c26 <CpMsgClear>
    CpMsgSetIdentifier(&myMessage, 100);         // identifier is 100 dec.
 8003eb0:	2164      	movs	r1, #100	; 0x64
 8003eb2:	4835      	ldr	r0, [pc, #212]	; (8003f88 <app_main+0xf0>)
 8003eb4:	f7fe ffb2 	bl	8002e1c <CpMsgSetIdentifier>
  __ASM volatile ("cpsid i" : : : "memory");
 8003eb8:	b672      	cpsid	i

    while (1)
    {
    	li_can_slv_port_disable_irq();
    	myMessage.ulMsgUser = ((uint32_t)0x00000001);
 8003eba:	4b33      	ldr	r3, [pc, #204]	; (8003f88 <app_main+0xf0>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	615a      	str	r2, [r3, #20]
        CpMsgSetDlc(&myMessage, 1);
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	4831      	ldr	r0, [pc, #196]	; (8003f88 <app_main+0xf0>)
 8003ec4:	f7fe ff6e 	bl	8002da4 <CpMsgSetDlc>
        CpMsgSetData(&myMessage, 0, 0xa);
 8003ec8:	220a      	movs	r2, #10
 8003eca:	2100      	movs	r1, #0
 8003ecc:	482e      	ldr	r0, [pc, #184]	; (8003f88 <app_main+0xf0>)
 8003ece:	f7fe ff42 	bl	8002d56 <CpMsgSetData>
        CpMsgSetIdentifier(&myMessage, 101);         // identifier is 100 dec.
 8003ed2:	2165      	movs	r1, #101	; 0x65
 8003ed4:	482c      	ldr	r0, [pc, #176]	; (8003f88 <app_main+0xf0>)
 8003ed6:	f7fe ffa1 	bl	8002e1c <CpMsgSetIdentifier>
        CpCoreFifoWrite(&can_port_main, eCP_BUFFER_11,  &myMessage, &tmp);
 8003eda:	1d3b      	adds	r3, r7, #4
 8003edc:	4a2a      	ldr	r2, [pc, #168]	; (8003f88 <app_main+0xf0>)
 8003ede:	210a      	movs	r1, #10
 8003ee0:	482a      	ldr	r0, [pc, #168]	; (8003f8c <app_main+0xf4>)
 8003ee2:	f7ff fb71 	bl	80035c8 <CpCoreFifoWrite>
//        HAL_Delay(1);
        CpMsgSetData(&myMessage, 0, 0xb);
 8003ee6:	220b      	movs	r2, #11
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4827      	ldr	r0, [pc, #156]	; (8003f88 <app_main+0xf0>)
 8003eec:	f7fe ff33 	bl	8002d56 <CpMsgSetData>
        CpMsgSetIdentifier(&myMessage, 102);         // identifier is 100 dec.
 8003ef0:	2166      	movs	r1, #102	; 0x66
 8003ef2:	4825      	ldr	r0, [pc, #148]	; (8003f88 <app_main+0xf0>)
 8003ef4:	f7fe ff92 	bl	8002e1c <CpMsgSetIdentifier>
        CpCoreFifoWrite(&can_port_main, eCP_BUFFER_11,  &myMessage, &tmp);
 8003ef8:	1d3b      	adds	r3, r7, #4
 8003efa:	4a23      	ldr	r2, [pc, #140]	; (8003f88 <app_main+0xf0>)
 8003efc:	210a      	movs	r1, #10
 8003efe:	4823      	ldr	r0, [pc, #140]	; (8003f8c <app_main+0xf4>)
 8003f00:	f7ff fb62 	bl	80035c8 <CpCoreFifoWrite>
//        HAL_Delay(1);
        CpMsgSetData(&myMessage, 0, 0xc);
 8003f04:	220c      	movs	r2, #12
 8003f06:	2100      	movs	r1, #0
 8003f08:	481f      	ldr	r0, [pc, #124]	; (8003f88 <app_main+0xf0>)
 8003f0a:	f7fe ff24 	bl	8002d56 <CpMsgSetData>
        CpMsgSetIdentifier(&myMessage, 103);         // identifier is 100 dec.
 8003f0e:	2167      	movs	r1, #103	; 0x67
 8003f10:	481d      	ldr	r0, [pc, #116]	; (8003f88 <app_main+0xf0>)
 8003f12:	f7fe ff83 	bl	8002e1c <CpMsgSetIdentifier>
        CpCoreFifoWrite(&can_port_main, eCP_BUFFER_11,  &myMessage, &tmp);
 8003f16:	1d3b      	adds	r3, r7, #4
 8003f18:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <app_main+0xf0>)
 8003f1a:	210a      	movs	r1, #10
 8003f1c:	481b      	ldr	r0, [pc, #108]	; (8003f8c <app_main+0xf4>)
 8003f1e:	f7ff fb53 	bl	80035c8 <CpCoreFifoWrite>
//        HAL_Delay(1);
        CpMsgSetData(&myMessage, 0, 0xd);
 8003f22:	220d      	movs	r2, #13
 8003f24:	2100      	movs	r1, #0
 8003f26:	4818      	ldr	r0, [pc, #96]	; (8003f88 <app_main+0xf0>)
 8003f28:	f7fe ff15 	bl	8002d56 <CpMsgSetData>
        CpMsgSetIdentifier(&myMessage, 104);         // identifier is 100 dec.
 8003f2c:	2168      	movs	r1, #104	; 0x68
 8003f2e:	4816      	ldr	r0, [pc, #88]	; (8003f88 <app_main+0xf0>)
 8003f30:	f7fe ff74 	bl	8002e1c <CpMsgSetIdentifier>
        CpCoreFifoWrite(&can_port_main, eCP_BUFFER_11,  &myMessage, &tmp);
 8003f34:	1d3b      	adds	r3, r7, #4
 8003f36:	4a14      	ldr	r2, [pc, #80]	; (8003f88 <app_main+0xf0>)
 8003f38:	210a      	movs	r1, #10
 8003f3a:	4814      	ldr	r0, [pc, #80]	; (8003f8c <app_main+0xf4>)
 8003f3c:	f7ff fb44 	bl	80035c8 <CpCoreFifoWrite>
 //       HAL_Delay(1);
        CpMsgSetData(&myMessage, 0, 0xe);
 8003f40:	220e      	movs	r2, #14
 8003f42:	2100      	movs	r1, #0
 8003f44:	4810      	ldr	r0, [pc, #64]	; (8003f88 <app_main+0xf0>)
 8003f46:	f7fe ff06 	bl	8002d56 <CpMsgSetData>
        CpMsgSetIdentifier(&myMessage, 105);         // identifier is 100 dec.
 8003f4a:	2169      	movs	r1, #105	; 0x69
 8003f4c:	480e      	ldr	r0, [pc, #56]	; (8003f88 <app_main+0xf0>)
 8003f4e:	f7fe ff65 	bl	8002e1c <CpMsgSetIdentifier>
        CpCoreFifoWrite(&can_port_main, eCP_BUFFER_11,  &myMessage, &tmp);
 8003f52:	1d3b      	adds	r3, r7, #4
 8003f54:	4a0c      	ldr	r2, [pc, #48]	; (8003f88 <app_main+0xf0>)
 8003f56:	210a      	movs	r1, #10
 8003f58:	480c      	ldr	r0, [pc, #48]	; (8003f8c <app_main+0xf4>)
 8003f5a:	f7ff fb35 	bl	80035c8 <CpCoreFifoWrite>
//        HAL_Delay(1);
        CpMsgSetData(&myMessage, 0, 0xf);
 8003f5e:	220f      	movs	r2, #15
 8003f60:	2100      	movs	r1, #0
 8003f62:	4809      	ldr	r0, [pc, #36]	; (8003f88 <app_main+0xf0>)
 8003f64:	f7fe fef7 	bl	8002d56 <CpMsgSetData>
        CpMsgSetIdentifier(&myMessage, 106);         // identifier is 100 dec.
 8003f68:	216a      	movs	r1, #106	; 0x6a
 8003f6a:	4807      	ldr	r0, [pc, #28]	; (8003f88 <app_main+0xf0>)
 8003f6c:	f7fe ff56 	bl	8002e1c <CpMsgSetIdentifier>
        CpCoreFifoWrite(&can_port_main, eCP_BUFFER_11,  &myMessage, &tmp);
 8003f70:	1d3b      	adds	r3, r7, #4
 8003f72:	4a05      	ldr	r2, [pc, #20]	; (8003f88 <app_main+0xf0>)
 8003f74:	210a      	movs	r1, #10
 8003f76:	4805      	ldr	r0, [pc, #20]	; (8003f8c <app_main+0xf4>)
 8003f78:	f7ff fb26 	bl	80035c8 <CpCoreFifoWrite>
  __ASM volatile ("cpsie i" : : : "memory");
 8003f7c:	b662      	cpsie	i


        li_can_slv_port_enable_irq();


        HAL_Delay(1000);
 8003f7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f82:	f7fc f945 	bl	8000210 <HAL_Delay>
    	li_can_slv_port_disable_irq();
 8003f86:	e797      	b.n	8003eb8 <app_main+0x20>
 8003f88:	20000508 	.word	0x20000508
 8003f8c:	20000870 	.word	0x20000870

08003f90 <app_process_5msec>:
{
	return LCSA_ERROR_OK;
}

void app_process_5msec(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0

}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <canpie_tx_handler>:

/*--------------------------------------------------------------------------*/
/* function definition (private/not exported)                               */
/*--------------------------------------------------------------------------*/
uint8_t canpie_tx_handler(CpCanMsg_ts *ptsCanMsgV, uint8_t ubBufferIdxV)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	70fb      	strb	r3, [r7, #3]
    uint32_t canid = CpMsgGetStdId(ptsCanMsgV);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7fe fe77 	bl	8002c9c <CpMsgGetStdId>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	60fb      	str	r3, [r7, #12]
    printf("\ntx_handler: %d, id: 0x%lx", ubBufferIdxV, canid);
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4803      	ldr	r0, [pc, #12]	; (8003fc8 <canpie_tx_handler+0x2c>)
 8003fba:	f000 f86d 	bl	8004098 <iprintf>
    return 0;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	08004ea0 	.word	0x08004ea0

08003fcc <canpie_rx_handler>:

uint8_t canpie_rx_handler(CpCanMsg_ts *ptsCanMsgV, uint8_t ubBufferIdxV)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	70fb      	strb	r3, [r7, #3]
    uint32_t canid = CpMsgGetStdId(ptsCanMsgV);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fe fe5f 	bl	8002c9c <CpMsgGetStdId>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	60fb      	str	r3, [r7, #12]
    printf("\nrx: %d, id: 0x%lx, usr:%ld", ubBufferIdxV, canid,
 8003fe2:	78f9      	ldrb	r1, [r7, #3]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4804      	ldr	r0, [pc, #16]	; (8003ffc <canpie_rx_handler+0x30>)
 8003fec:	f000 f854 	bl	8004098 <iprintf>
           ptsCanMsgV->ulMsgUser);
    return 0;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	08004ebc 	.word	0x08004ebc

08004000 <canpie_err_handler>:

uint8_t canpie_err_handler(CpState_ts *state)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
    printf("\ncanpie_err_handler ... ");
 8004008:	4803      	ldr	r0, [pc, #12]	; (8004018 <canpie_err_handler+0x18>)
 800400a:	f000 f845 	bl	8004098 <iprintf>
    return 0;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	08004ed8 	.word	0x08004ed8

0800401c <__errno>:
 800401c:	4b01      	ldr	r3, [pc, #4]	; (8004024 <__errno+0x8>)
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	2000000c 	.word	0x2000000c

08004028 <__libc_init_array>:
 8004028:	b570      	push	{r4, r5, r6, lr}
 800402a:	2500      	movs	r5, #0
 800402c:	4e0c      	ldr	r6, [pc, #48]	; (8004060 <__libc_init_array+0x38>)
 800402e:	4c0d      	ldr	r4, [pc, #52]	; (8004064 <__libc_init_array+0x3c>)
 8004030:	1ba4      	subs	r4, r4, r6
 8004032:	10a4      	asrs	r4, r4, #2
 8004034:	42a5      	cmp	r5, r4
 8004036:	d109      	bne.n	800404c <__libc_init_array+0x24>
 8004038:	f000 ff1c 	bl	8004e74 <_init>
 800403c:	2500      	movs	r5, #0
 800403e:	4e0a      	ldr	r6, [pc, #40]	; (8004068 <__libc_init_array+0x40>)
 8004040:	4c0a      	ldr	r4, [pc, #40]	; (800406c <__libc_init_array+0x44>)
 8004042:	1ba4      	subs	r4, r4, r6
 8004044:	10a4      	asrs	r4, r4, #2
 8004046:	42a5      	cmp	r5, r4
 8004048:	d105      	bne.n	8004056 <__libc_init_array+0x2e>
 800404a:	bd70      	pop	{r4, r5, r6, pc}
 800404c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004050:	4798      	blx	r3
 8004052:	3501      	adds	r5, #1
 8004054:	e7ee      	b.n	8004034 <__libc_init_array+0xc>
 8004056:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800405a:	4798      	blx	r3
 800405c:	3501      	adds	r5, #1
 800405e:	e7f2      	b.n	8004046 <__libc_init_array+0x1e>
 8004060:	0800524c 	.word	0x0800524c
 8004064:	0800524c 	.word	0x0800524c
 8004068:	0800524c 	.word	0x0800524c
 800406c:	08005250 	.word	0x08005250

08004070 <memcpy>:
 8004070:	b510      	push	{r4, lr}
 8004072:	1e43      	subs	r3, r0, #1
 8004074:	440a      	add	r2, r1
 8004076:	4291      	cmp	r1, r2
 8004078:	d100      	bne.n	800407c <memcpy+0xc>
 800407a:	bd10      	pop	{r4, pc}
 800407c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004080:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004084:	e7f7      	b.n	8004076 <memcpy+0x6>

08004086 <memset>:
 8004086:	4603      	mov	r3, r0
 8004088:	4402      	add	r2, r0
 800408a:	4293      	cmp	r3, r2
 800408c:	d100      	bne.n	8004090 <memset+0xa>
 800408e:	4770      	bx	lr
 8004090:	f803 1b01 	strb.w	r1, [r3], #1
 8004094:	e7f9      	b.n	800408a <memset+0x4>
	...

08004098 <iprintf>:
 8004098:	b40f      	push	{r0, r1, r2, r3}
 800409a:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <iprintf+0x2c>)
 800409c:	b513      	push	{r0, r1, r4, lr}
 800409e:	681c      	ldr	r4, [r3, #0]
 80040a0:	b124      	cbz	r4, 80040ac <iprintf+0x14>
 80040a2:	69a3      	ldr	r3, [r4, #24]
 80040a4:	b913      	cbnz	r3, 80040ac <iprintf+0x14>
 80040a6:	4620      	mov	r0, r4
 80040a8:	f000 f84e 	bl	8004148 <__sinit>
 80040ac:	ab05      	add	r3, sp, #20
 80040ae:	9a04      	ldr	r2, [sp, #16]
 80040b0:	68a1      	ldr	r1, [r4, #8]
 80040b2:	4620      	mov	r0, r4
 80040b4:	9301      	str	r3, [sp, #4]
 80040b6:	f000 f953 	bl	8004360 <_vfiprintf_r>
 80040ba:	b002      	add	sp, #8
 80040bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040c0:	b004      	add	sp, #16
 80040c2:	4770      	bx	lr
 80040c4:	2000000c 	.word	0x2000000c

080040c8 <std>:
 80040c8:	2300      	movs	r3, #0
 80040ca:	b510      	push	{r4, lr}
 80040cc:	4604      	mov	r4, r0
 80040ce:	e9c0 3300 	strd	r3, r3, [r0]
 80040d2:	6083      	str	r3, [r0, #8]
 80040d4:	8181      	strh	r1, [r0, #12]
 80040d6:	6643      	str	r3, [r0, #100]	; 0x64
 80040d8:	81c2      	strh	r2, [r0, #14]
 80040da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040de:	6183      	str	r3, [r0, #24]
 80040e0:	4619      	mov	r1, r3
 80040e2:	2208      	movs	r2, #8
 80040e4:	305c      	adds	r0, #92	; 0x5c
 80040e6:	f7ff ffce 	bl	8004086 <memset>
 80040ea:	4b05      	ldr	r3, [pc, #20]	; (8004100 <std+0x38>)
 80040ec:	6224      	str	r4, [r4, #32]
 80040ee:	6263      	str	r3, [r4, #36]	; 0x24
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <std+0x3c>)
 80040f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80040f4:	4b04      	ldr	r3, [pc, #16]	; (8004108 <std+0x40>)
 80040f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <std+0x44>)
 80040fa:	6323      	str	r3, [r4, #48]	; 0x30
 80040fc:	bd10      	pop	{r4, pc}
 80040fe:	bf00      	nop
 8004100:	080048bd 	.word	0x080048bd
 8004104:	080048df 	.word	0x080048df
 8004108:	08004917 	.word	0x08004917
 800410c:	0800493b 	.word	0x0800493b

08004110 <_cleanup_r>:
 8004110:	4901      	ldr	r1, [pc, #4]	; (8004118 <_cleanup_r+0x8>)
 8004112:	f000 b885 	b.w	8004220 <_fwalk_reent>
 8004116:	bf00      	nop
 8004118:	08004c15 	.word	0x08004c15

0800411c <__sfmoreglue>:
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	2568      	movs	r5, #104	; 0x68
 8004120:	1e4a      	subs	r2, r1, #1
 8004122:	4355      	muls	r5, r2
 8004124:	460e      	mov	r6, r1
 8004126:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800412a:	f000 f897 	bl	800425c <_malloc_r>
 800412e:	4604      	mov	r4, r0
 8004130:	b140      	cbz	r0, 8004144 <__sfmoreglue+0x28>
 8004132:	2100      	movs	r1, #0
 8004134:	e9c0 1600 	strd	r1, r6, [r0]
 8004138:	300c      	adds	r0, #12
 800413a:	60a0      	str	r0, [r4, #8]
 800413c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004140:	f7ff ffa1 	bl	8004086 <memset>
 8004144:	4620      	mov	r0, r4
 8004146:	bd70      	pop	{r4, r5, r6, pc}

08004148 <__sinit>:
 8004148:	6983      	ldr	r3, [r0, #24]
 800414a:	b510      	push	{r4, lr}
 800414c:	4604      	mov	r4, r0
 800414e:	bb33      	cbnz	r3, 800419e <__sinit+0x56>
 8004150:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004154:	6503      	str	r3, [r0, #80]	; 0x50
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <__sinit+0x58>)
 8004158:	4a12      	ldr	r2, [pc, #72]	; (80041a4 <__sinit+0x5c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6282      	str	r2, [r0, #40]	; 0x28
 800415e:	4298      	cmp	r0, r3
 8004160:	bf04      	itt	eq
 8004162:	2301      	moveq	r3, #1
 8004164:	6183      	streq	r3, [r0, #24]
 8004166:	f000 f81f 	bl	80041a8 <__sfp>
 800416a:	6060      	str	r0, [r4, #4]
 800416c:	4620      	mov	r0, r4
 800416e:	f000 f81b 	bl	80041a8 <__sfp>
 8004172:	60a0      	str	r0, [r4, #8]
 8004174:	4620      	mov	r0, r4
 8004176:	f000 f817 	bl	80041a8 <__sfp>
 800417a:	2200      	movs	r2, #0
 800417c:	60e0      	str	r0, [r4, #12]
 800417e:	2104      	movs	r1, #4
 8004180:	6860      	ldr	r0, [r4, #4]
 8004182:	f7ff ffa1 	bl	80040c8 <std>
 8004186:	2201      	movs	r2, #1
 8004188:	2109      	movs	r1, #9
 800418a:	68a0      	ldr	r0, [r4, #8]
 800418c:	f7ff ff9c 	bl	80040c8 <std>
 8004190:	2202      	movs	r2, #2
 8004192:	2112      	movs	r1, #18
 8004194:	68e0      	ldr	r0, [r4, #12]
 8004196:	f7ff ff97 	bl	80040c8 <std>
 800419a:	2301      	movs	r3, #1
 800419c:	61a3      	str	r3, [r4, #24]
 800419e:	bd10      	pop	{r4, pc}
 80041a0:	080051b4 	.word	0x080051b4
 80041a4:	08004111 	.word	0x08004111

080041a8 <__sfp>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <__sfp+0x70>)
 80041ac:	4607      	mov	r7, r0
 80041ae:	681e      	ldr	r6, [r3, #0]
 80041b0:	69b3      	ldr	r3, [r6, #24]
 80041b2:	b913      	cbnz	r3, 80041ba <__sfp+0x12>
 80041b4:	4630      	mov	r0, r6
 80041b6:	f7ff ffc7 	bl	8004148 <__sinit>
 80041ba:	3648      	adds	r6, #72	; 0x48
 80041bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	d503      	bpl.n	80041cc <__sfp+0x24>
 80041c4:	6833      	ldr	r3, [r6, #0]
 80041c6:	b133      	cbz	r3, 80041d6 <__sfp+0x2e>
 80041c8:	6836      	ldr	r6, [r6, #0]
 80041ca:	e7f7      	b.n	80041bc <__sfp+0x14>
 80041cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80041d0:	b16d      	cbz	r5, 80041ee <__sfp+0x46>
 80041d2:	3468      	adds	r4, #104	; 0x68
 80041d4:	e7f4      	b.n	80041c0 <__sfp+0x18>
 80041d6:	2104      	movs	r1, #4
 80041d8:	4638      	mov	r0, r7
 80041da:	f7ff ff9f 	bl	800411c <__sfmoreglue>
 80041de:	6030      	str	r0, [r6, #0]
 80041e0:	2800      	cmp	r0, #0
 80041e2:	d1f1      	bne.n	80041c8 <__sfp+0x20>
 80041e4:	230c      	movs	r3, #12
 80041e6:	4604      	mov	r4, r0
 80041e8:	603b      	str	r3, [r7, #0]
 80041ea:	4620      	mov	r0, r4
 80041ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041ee:	4b0b      	ldr	r3, [pc, #44]	; (800421c <__sfp+0x74>)
 80041f0:	6665      	str	r5, [r4, #100]	; 0x64
 80041f2:	e9c4 5500 	strd	r5, r5, [r4]
 80041f6:	60a5      	str	r5, [r4, #8]
 80041f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80041fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004200:	2208      	movs	r2, #8
 8004202:	4629      	mov	r1, r5
 8004204:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004208:	f7ff ff3d 	bl	8004086 <memset>
 800420c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004210:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004214:	e7e9      	b.n	80041ea <__sfp+0x42>
 8004216:	bf00      	nop
 8004218:	080051b4 	.word	0x080051b4
 800421c:	ffff0001 	.word	0xffff0001

08004220 <_fwalk_reent>:
 8004220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004224:	4680      	mov	r8, r0
 8004226:	4689      	mov	r9, r1
 8004228:	2600      	movs	r6, #0
 800422a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800422e:	b914      	cbnz	r4, 8004236 <_fwalk_reent+0x16>
 8004230:	4630      	mov	r0, r6
 8004232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004236:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800423a:	3f01      	subs	r7, #1
 800423c:	d501      	bpl.n	8004242 <_fwalk_reent+0x22>
 800423e:	6824      	ldr	r4, [r4, #0]
 8004240:	e7f5      	b.n	800422e <_fwalk_reent+0xe>
 8004242:	89ab      	ldrh	r3, [r5, #12]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d907      	bls.n	8004258 <_fwalk_reent+0x38>
 8004248:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800424c:	3301      	adds	r3, #1
 800424e:	d003      	beq.n	8004258 <_fwalk_reent+0x38>
 8004250:	4629      	mov	r1, r5
 8004252:	4640      	mov	r0, r8
 8004254:	47c8      	blx	r9
 8004256:	4306      	orrs	r6, r0
 8004258:	3568      	adds	r5, #104	; 0x68
 800425a:	e7ee      	b.n	800423a <_fwalk_reent+0x1a>

0800425c <_malloc_r>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	1ccd      	adds	r5, r1, #3
 8004260:	f025 0503 	bic.w	r5, r5, #3
 8004264:	3508      	adds	r5, #8
 8004266:	2d0c      	cmp	r5, #12
 8004268:	bf38      	it	cc
 800426a:	250c      	movcc	r5, #12
 800426c:	2d00      	cmp	r5, #0
 800426e:	4606      	mov	r6, r0
 8004270:	db01      	blt.n	8004276 <_malloc_r+0x1a>
 8004272:	42a9      	cmp	r1, r5
 8004274:	d903      	bls.n	800427e <_malloc_r+0x22>
 8004276:	230c      	movs	r3, #12
 8004278:	6033      	str	r3, [r6, #0]
 800427a:	2000      	movs	r0, #0
 800427c:	bd70      	pop	{r4, r5, r6, pc}
 800427e:	f000 fd77 	bl	8004d70 <__malloc_lock>
 8004282:	4a21      	ldr	r2, [pc, #132]	; (8004308 <_malloc_r+0xac>)
 8004284:	6814      	ldr	r4, [r2, #0]
 8004286:	4621      	mov	r1, r4
 8004288:	b991      	cbnz	r1, 80042b0 <_malloc_r+0x54>
 800428a:	4c20      	ldr	r4, [pc, #128]	; (800430c <_malloc_r+0xb0>)
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	b91b      	cbnz	r3, 8004298 <_malloc_r+0x3c>
 8004290:	4630      	mov	r0, r6
 8004292:	f000 fb03 	bl	800489c <_sbrk_r>
 8004296:	6020      	str	r0, [r4, #0]
 8004298:	4629      	mov	r1, r5
 800429a:	4630      	mov	r0, r6
 800429c:	f000 fafe 	bl	800489c <_sbrk_r>
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	d124      	bne.n	80042ee <_malloc_r+0x92>
 80042a4:	230c      	movs	r3, #12
 80042a6:	4630      	mov	r0, r6
 80042a8:	6033      	str	r3, [r6, #0]
 80042aa:	f000 fd62 	bl	8004d72 <__malloc_unlock>
 80042ae:	e7e4      	b.n	800427a <_malloc_r+0x1e>
 80042b0:	680b      	ldr	r3, [r1, #0]
 80042b2:	1b5b      	subs	r3, r3, r5
 80042b4:	d418      	bmi.n	80042e8 <_malloc_r+0x8c>
 80042b6:	2b0b      	cmp	r3, #11
 80042b8:	d90f      	bls.n	80042da <_malloc_r+0x7e>
 80042ba:	600b      	str	r3, [r1, #0]
 80042bc:	18cc      	adds	r4, r1, r3
 80042be:	50cd      	str	r5, [r1, r3]
 80042c0:	4630      	mov	r0, r6
 80042c2:	f000 fd56 	bl	8004d72 <__malloc_unlock>
 80042c6:	f104 000b 	add.w	r0, r4, #11
 80042ca:	1d23      	adds	r3, r4, #4
 80042cc:	f020 0007 	bic.w	r0, r0, #7
 80042d0:	1ac3      	subs	r3, r0, r3
 80042d2:	d0d3      	beq.n	800427c <_malloc_r+0x20>
 80042d4:	425a      	negs	r2, r3
 80042d6:	50e2      	str	r2, [r4, r3]
 80042d8:	e7d0      	b.n	800427c <_malloc_r+0x20>
 80042da:	684b      	ldr	r3, [r1, #4]
 80042dc:	428c      	cmp	r4, r1
 80042de:	bf16      	itet	ne
 80042e0:	6063      	strne	r3, [r4, #4]
 80042e2:	6013      	streq	r3, [r2, #0]
 80042e4:	460c      	movne	r4, r1
 80042e6:	e7eb      	b.n	80042c0 <_malloc_r+0x64>
 80042e8:	460c      	mov	r4, r1
 80042ea:	6849      	ldr	r1, [r1, #4]
 80042ec:	e7cc      	b.n	8004288 <_malloc_r+0x2c>
 80042ee:	1cc4      	adds	r4, r0, #3
 80042f0:	f024 0403 	bic.w	r4, r4, #3
 80042f4:	42a0      	cmp	r0, r4
 80042f6:	d005      	beq.n	8004304 <_malloc_r+0xa8>
 80042f8:	1a21      	subs	r1, r4, r0
 80042fa:	4630      	mov	r0, r6
 80042fc:	f000 face 	bl	800489c <_sbrk_r>
 8004300:	3001      	adds	r0, #1
 8004302:	d0cf      	beq.n	80042a4 <_malloc_r+0x48>
 8004304:	6025      	str	r5, [r4, #0]
 8004306:	e7db      	b.n	80042c0 <_malloc_r+0x64>
 8004308:	20000450 	.word	0x20000450
 800430c:	20000454 	.word	0x20000454

08004310 <__sfputc_r>:
 8004310:	6893      	ldr	r3, [r2, #8]
 8004312:	b410      	push	{r4}
 8004314:	3b01      	subs	r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	6093      	str	r3, [r2, #8]
 800431a:	da07      	bge.n	800432c <__sfputc_r+0x1c>
 800431c:	6994      	ldr	r4, [r2, #24]
 800431e:	42a3      	cmp	r3, r4
 8004320:	db01      	blt.n	8004326 <__sfputc_r+0x16>
 8004322:	290a      	cmp	r1, #10
 8004324:	d102      	bne.n	800432c <__sfputc_r+0x1c>
 8004326:	bc10      	pop	{r4}
 8004328:	f000 bb0c 	b.w	8004944 <__swbuf_r>
 800432c:	6813      	ldr	r3, [r2, #0]
 800432e:	1c58      	adds	r0, r3, #1
 8004330:	6010      	str	r0, [r2, #0]
 8004332:	7019      	strb	r1, [r3, #0]
 8004334:	4608      	mov	r0, r1
 8004336:	bc10      	pop	{r4}
 8004338:	4770      	bx	lr

0800433a <__sfputs_r>:
 800433a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433c:	4606      	mov	r6, r0
 800433e:	460f      	mov	r7, r1
 8004340:	4614      	mov	r4, r2
 8004342:	18d5      	adds	r5, r2, r3
 8004344:	42ac      	cmp	r4, r5
 8004346:	d101      	bne.n	800434c <__sfputs_r+0x12>
 8004348:	2000      	movs	r0, #0
 800434a:	e007      	b.n	800435c <__sfputs_r+0x22>
 800434c:	463a      	mov	r2, r7
 800434e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004352:	4630      	mov	r0, r6
 8004354:	f7ff ffdc 	bl	8004310 <__sfputc_r>
 8004358:	1c43      	adds	r3, r0, #1
 800435a:	d1f3      	bne.n	8004344 <__sfputs_r+0xa>
 800435c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004360 <_vfiprintf_r>:
 8004360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004364:	460c      	mov	r4, r1
 8004366:	b09d      	sub	sp, #116	; 0x74
 8004368:	4617      	mov	r7, r2
 800436a:	461d      	mov	r5, r3
 800436c:	4606      	mov	r6, r0
 800436e:	b118      	cbz	r0, 8004378 <_vfiprintf_r+0x18>
 8004370:	6983      	ldr	r3, [r0, #24]
 8004372:	b90b      	cbnz	r3, 8004378 <_vfiprintf_r+0x18>
 8004374:	f7ff fee8 	bl	8004148 <__sinit>
 8004378:	4b7c      	ldr	r3, [pc, #496]	; (800456c <_vfiprintf_r+0x20c>)
 800437a:	429c      	cmp	r4, r3
 800437c:	d158      	bne.n	8004430 <_vfiprintf_r+0xd0>
 800437e:	6874      	ldr	r4, [r6, #4]
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	0718      	lsls	r0, r3, #28
 8004384:	d55e      	bpl.n	8004444 <_vfiprintf_r+0xe4>
 8004386:	6923      	ldr	r3, [r4, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d05b      	beq.n	8004444 <_vfiprintf_r+0xe4>
 800438c:	2300      	movs	r3, #0
 800438e:	9309      	str	r3, [sp, #36]	; 0x24
 8004390:	2320      	movs	r3, #32
 8004392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004396:	2330      	movs	r3, #48	; 0x30
 8004398:	f04f 0b01 	mov.w	fp, #1
 800439c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043a0:	9503      	str	r5, [sp, #12]
 80043a2:	46b8      	mov	r8, r7
 80043a4:	4645      	mov	r5, r8
 80043a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80043aa:	b10b      	cbz	r3, 80043b0 <_vfiprintf_r+0x50>
 80043ac:	2b25      	cmp	r3, #37	; 0x25
 80043ae:	d154      	bne.n	800445a <_vfiprintf_r+0xfa>
 80043b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80043b4:	d00b      	beq.n	80043ce <_vfiprintf_r+0x6e>
 80043b6:	4653      	mov	r3, sl
 80043b8:	463a      	mov	r2, r7
 80043ba:	4621      	mov	r1, r4
 80043bc:	4630      	mov	r0, r6
 80043be:	f7ff ffbc 	bl	800433a <__sfputs_r>
 80043c2:	3001      	adds	r0, #1
 80043c4:	f000 80c2 	beq.w	800454c <_vfiprintf_r+0x1ec>
 80043c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ca:	4453      	add	r3, sl
 80043cc:	9309      	str	r3, [sp, #36]	; 0x24
 80043ce:	f898 3000 	ldrb.w	r3, [r8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80ba 	beq.w	800454c <_vfiprintf_r+0x1ec>
 80043d8:	2300      	movs	r3, #0
 80043da:	f04f 32ff 	mov.w	r2, #4294967295
 80043de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043e2:	9304      	str	r3, [sp, #16]
 80043e4:	9307      	str	r3, [sp, #28]
 80043e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043ea:	931a      	str	r3, [sp, #104]	; 0x68
 80043ec:	46a8      	mov	r8, r5
 80043ee:	2205      	movs	r2, #5
 80043f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80043f4:	485e      	ldr	r0, [pc, #376]	; (8004570 <_vfiprintf_r+0x210>)
 80043f6:	f000 fcad 	bl	8004d54 <memchr>
 80043fa:	9b04      	ldr	r3, [sp, #16]
 80043fc:	bb78      	cbnz	r0, 800445e <_vfiprintf_r+0xfe>
 80043fe:	06d9      	lsls	r1, r3, #27
 8004400:	bf44      	itt	mi
 8004402:	2220      	movmi	r2, #32
 8004404:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004408:	071a      	lsls	r2, r3, #28
 800440a:	bf44      	itt	mi
 800440c:	222b      	movmi	r2, #43	; 0x2b
 800440e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004412:	782a      	ldrb	r2, [r5, #0]
 8004414:	2a2a      	cmp	r2, #42	; 0x2a
 8004416:	d02a      	beq.n	800446e <_vfiprintf_r+0x10e>
 8004418:	46a8      	mov	r8, r5
 800441a:	2000      	movs	r0, #0
 800441c:	250a      	movs	r5, #10
 800441e:	9a07      	ldr	r2, [sp, #28]
 8004420:	4641      	mov	r1, r8
 8004422:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004426:	3b30      	subs	r3, #48	; 0x30
 8004428:	2b09      	cmp	r3, #9
 800442a:	d969      	bls.n	8004500 <_vfiprintf_r+0x1a0>
 800442c:	b360      	cbz	r0, 8004488 <_vfiprintf_r+0x128>
 800442e:	e024      	b.n	800447a <_vfiprintf_r+0x11a>
 8004430:	4b50      	ldr	r3, [pc, #320]	; (8004574 <_vfiprintf_r+0x214>)
 8004432:	429c      	cmp	r4, r3
 8004434:	d101      	bne.n	800443a <_vfiprintf_r+0xda>
 8004436:	68b4      	ldr	r4, [r6, #8]
 8004438:	e7a2      	b.n	8004380 <_vfiprintf_r+0x20>
 800443a:	4b4f      	ldr	r3, [pc, #316]	; (8004578 <_vfiprintf_r+0x218>)
 800443c:	429c      	cmp	r4, r3
 800443e:	bf08      	it	eq
 8004440:	68f4      	ldreq	r4, [r6, #12]
 8004442:	e79d      	b.n	8004380 <_vfiprintf_r+0x20>
 8004444:	4621      	mov	r1, r4
 8004446:	4630      	mov	r0, r6
 8004448:	f000 fae0 	bl	8004a0c <__swsetup_r>
 800444c:	2800      	cmp	r0, #0
 800444e:	d09d      	beq.n	800438c <_vfiprintf_r+0x2c>
 8004450:	f04f 30ff 	mov.w	r0, #4294967295
 8004454:	b01d      	add	sp, #116	; 0x74
 8004456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800445a:	46a8      	mov	r8, r5
 800445c:	e7a2      	b.n	80043a4 <_vfiprintf_r+0x44>
 800445e:	4a44      	ldr	r2, [pc, #272]	; (8004570 <_vfiprintf_r+0x210>)
 8004460:	4645      	mov	r5, r8
 8004462:	1a80      	subs	r0, r0, r2
 8004464:	fa0b f000 	lsl.w	r0, fp, r0
 8004468:	4318      	orrs	r0, r3
 800446a:	9004      	str	r0, [sp, #16]
 800446c:	e7be      	b.n	80043ec <_vfiprintf_r+0x8c>
 800446e:	9a03      	ldr	r2, [sp, #12]
 8004470:	1d11      	adds	r1, r2, #4
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	9103      	str	r1, [sp, #12]
 8004476:	2a00      	cmp	r2, #0
 8004478:	db01      	blt.n	800447e <_vfiprintf_r+0x11e>
 800447a:	9207      	str	r2, [sp, #28]
 800447c:	e004      	b.n	8004488 <_vfiprintf_r+0x128>
 800447e:	4252      	negs	r2, r2
 8004480:	f043 0302 	orr.w	r3, r3, #2
 8004484:	9207      	str	r2, [sp, #28]
 8004486:	9304      	str	r3, [sp, #16]
 8004488:	f898 3000 	ldrb.w	r3, [r8]
 800448c:	2b2e      	cmp	r3, #46	; 0x2e
 800448e:	d10e      	bne.n	80044ae <_vfiprintf_r+0x14e>
 8004490:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004494:	2b2a      	cmp	r3, #42	; 0x2a
 8004496:	d138      	bne.n	800450a <_vfiprintf_r+0x1aa>
 8004498:	9b03      	ldr	r3, [sp, #12]
 800449a:	f108 0802 	add.w	r8, r8, #2
 800449e:	1d1a      	adds	r2, r3, #4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	9203      	str	r2, [sp, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bfb8      	it	lt
 80044a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80044ac:	9305      	str	r3, [sp, #20]
 80044ae:	4d33      	ldr	r5, [pc, #204]	; (800457c <_vfiprintf_r+0x21c>)
 80044b0:	2203      	movs	r2, #3
 80044b2:	f898 1000 	ldrb.w	r1, [r8]
 80044b6:	4628      	mov	r0, r5
 80044b8:	f000 fc4c 	bl	8004d54 <memchr>
 80044bc:	b140      	cbz	r0, 80044d0 <_vfiprintf_r+0x170>
 80044be:	2340      	movs	r3, #64	; 0x40
 80044c0:	1b40      	subs	r0, r0, r5
 80044c2:	fa03 f000 	lsl.w	r0, r3, r0
 80044c6:	9b04      	ldr	r3, [sp, #16]
 80044c8:	f108 0801 	add.w	r8, r8, #1
 80044cc:	4303      	orrs	r3, r0
 80044ce:	9304      	str	r3, [sp, #16]
 80044d0:	f898 1000 	ldrb.w	r1, [r8]
 80044d4:	2206      	movs	r2, #6
 80044d6:	482a      	ldr	r0, [pc, #168]	; (8004580 <_vfiprintf_r+0x220>)
 80044d8:	f108 0701 	add.w	r7, r8, #1
 80044dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044e0:	f000 fc38 	bl	8004d54 <memchr>
 80044e4:	2800      	cmp	r0, #0
 80044e6:	d037      	beq.n	8004558 <_vfiprintf_r+0x1f8>
 80044e8:	4b26      	ldr	r3, [pc, #152]	; (8004584 <_vfiprintf_r+0x224>)
 80044ea:	bb1b      	cbnz	r3, 8004534 <_vfiprintf_r+0x1d4>
 80044ec:	9b03      	ldr	r3, [sp, #12]
 80044ee:	3307      	adds	r3, #7
 80044f0:	f023 0307 	bic.w	r3, r3, #7
 80044f4:	3308      	adds	r3, #8
 80044f6:	9303      	str	r3, [sp, #12]
 80044f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044fa:	444b      	add	r3, r9
 80044fc:	9309      	str	r3, [sp, #36]	; 0x24
 80044fe:	e750      	b.n	80043a2 <_vfiprintf_r+0x42>
 8004500:	fb05 3202 	mla	r2, r5, r2, r3
 8004504:	2001      	movs	r0, #1
 8004506:	4688      	mov	r8, r1
 8004508:	e78a      	b.n	8004420 <_vfiprintf_r+0xc0>
 800450a:	2300      	movs	r3, #0
 800450c:	250a      	movs	r5, #10
 800450e:	4619      	mov	r1, r3
 8004510:	f108 0801 	add.w	r8, r8, #1
 8004514:	9305      	str	r3, [sp, #20]
 8004516:	4640      	mov	r0, r8
 8004518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800451c:	3a30      	subs	r2, #48	; 0x30
 800451e:	2a09      	cmp	r2, #9
 8004520:	d903      	bls.n	800452a <_vfiprintf_r+0x1ca>
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0c3      	beq.n	80044ae <_vfiprintf_r+0x14e>
 8004526:	9105      	str	r1, [sp, #20]
 8004528:	e7c1      	b.n	80044ae <_vfiprintf_r+0x14e>
 800452a:	fb05 2101 	mla	r1, r5, r1, r2
 800452e:	2301      	movs	r3, #1
 8004530:	4680      	mov	r8, r0
 8004532:	e7f0      	b.n	8004516 <_vfiprintf_r+0x1b6>
 8004534:	ab03      	add	r3, sp, #12
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	4622      	mov	r2, r4
 800453a:	4b13      	ldr	r3, [pc, #76]	; (8004588 <_vfiprintf_r+0x228>)
 800453c:	a904      	add	r1, sp, #16
 800453e:	4630      	mov	r0, r6
 8004540:	f3af 8000 	nop.w
 8004544:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004548:	4681      	mov	r9, r0
 800454a:	d1d5      	bne.n	80044f8 <_vfiprintf_r+0x198>
 800454c:	89a3      	ldrh	r3, [r4, #12]
 800454e:	065b      	lsls	r3, r3, #25
 8004550:	f53f af7e 	bmi.w	8004450 <_vfiprintf_r+0xf0>
 8004554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004556:	e77d      	b.n	8004454 <_vfiprintf_r+0xf4>
 8004558:	ab03      	add	r3, sp, #12
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	4622      	mov	r2, r4
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <_vfiprintf_r+0x228>)
 8004560:	a904      	add	r1, sp, #16
 8004562:	4630      	mov	r0, r6
 8004564:	f000 f888 	bl	8004678 <_printf_i>
 8004568:	e7ec      	b.n	8004544 <_vfiprintf_r+0x1e4>
 800456a:	bf00      	nop
 800456c:	080051d8 	.word	0x080051d8
 8004570:	08005218 	.word	0x08005218
 8004574:	080051f8 	.word	0x080051f8
 8004578:	080051b8 	.word	0x080051b8
 800457c:	0800521e 	.word	0x0800521e
 8004580:	08005222 	.word	0x08005222
 8004584:	00000000 	.word	0x00000000
 8004588:	0800433b 	.word	0x0800433b

0800458c <_printf_common>:
 800458c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004590:	4691      	mov	r9, r2
 8004592:	461f      	mov	r7, r3
 8004594:	688a      	ldr	r2, [r1, #8]
 8004596:	690b      	ldr	r3, [r1, #16]
 8004598:	4606      	mov	r6, r0
 800459a:	4293      	cmp	r3, r2
 800459c:	bfb8      	it	lt
 800459e:	4613      	movlt	r3, r2
 80045a0:	f8c9 3000 	str.w	r3, [r9]
 80045a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045a8:	460c      	mov	r4, r1
 80045aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045ae:	b112      	cbz	r2, 80045b6 <_printf_common+0x2a>
 80045b0:	3301      	adds	r3, #1
 80045b2:	f8c9 3000 	str.w	r3, [r9]
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	0699      	lsls	r1, r3, #26
 80045ba:	bf42      	ittt	mi
 80045bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80045c0:	3302      	addmi	r3, #2
 80045c2:	f8c9 3000 	strmi.w	r3, [r9]
 80045c6:	6825      	ldr	r5, [r4, #0]
 80045c8:	f015 0506 	ands.w	r5, r5, #6
 80045cc:	d107      	bne.n	80045de <_printf_common+0x52>
 80045ce:	f104 0a19 	add.w	sl, r4, #25
 80045d2:	68e3      	ldr	r3, [r4, #12]
 80045d4:	f8d9 2000 	ldr.w	r2, [r9]
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	42ab      	cmp	r3, r5
 80045dc:	dc29      	bgt.n	8004632 <_printf_common+0xa6>
 80045de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	3300      	adds	r3, #0
 80045e6:	bf18      	it	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	0692      	lsls	r2, r2, #26
 80045ec:	d42e      	bmi.n	800464c <_printf_common+0xc0>
 80045ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045f2:	4639      	mov	r1, r7
 80045f4:	4630      	mov	r0, r6
 80045f6:	47c0      	blx	r8
 80045f8:	3001      	adds	r0, #1
 80045fa:	d021      	beq.n	8004640 <_printf_common+0xb4>
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	68e5      	ldr	r5, [r4, #12]
 8004600:	f003 0306 	and.w	r3, r3, #6
 8004604:	2b04      	cmp	r3, #4
 8004606:	bf18      	it	ne
 8004608:	2500      	movne	r5, #0
 800460a:	f8d9 2000 	ldr.w	r2, [r9]
 800460e:	f04f 0900 	mov.w	r9, #0
 8004612:	bf08      	it	eq
 8004614:	1aad      	subeq	r5, r5, r2
 8004616:	68a3      	ldr	r3, [r4, #8]
 8004618:	6922      	ldr	r2, [r4, #16]
 800461a:	bf08      	it	eq
 800461c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004620:	4293      	cmp	r3, r2
 8004622:	bfc4      	itt	gt
 8004624:	1a9b      	subgt	r3, r3, r2
 8004626:	18ed      	addgt	r5, r5, r3
 8004628:	341a      	adds	r4, #26
 800462a:	454d      	cmp	r5, r9
 800462c:	d11a      	bne.n	8004664 <_printf_common+0xd8>
 800462e:	2000      	movs	r0, #0
 8004630:	e008      	b.n	8004644 <_printf_common+0xb8>
 8004632:	2301      	movs	r3, #1
 8004634:	4652      	mov	r2, sl
 8004636:	4639      	mov	r1, r7
 8004638:	4630      	mov	r0, r6
 800463a:	47c0      	blx	r8
 800463c:	3001      	adds	r0, #1
 800463e:	d103      	bne.n	8004648 <_printf_common+0xbc>
 8004640:	f04f 30ff 	mov.w	r0, #4294967295
 8004644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004648:	3501      	adds	r5, #1
 800464a:	e7c2      	b.n	80045d2 <_printf_common+0x46>
 800464c:	2030      	movs	r0, #48	; 0x30
 800464e:	18e1      	adds	r1, r4, r3
 8004650:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800465a:	4422      	add	r2, r4
 800465c:	3302      	adds	r3, #2
 800465e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004662:	e7c4      	b.n	80045ee <_printf_common+0x62>
 8004664:	2301      	movs	r3, #1
 8004666:	4622      	mov	r2, r4
 8004668:	4639      	mov	r1, r7
 800466a:	4630      	mov	r0, r6
 800466c:	47c0      	blx	r8
 800466e:	3001      	adds	r0, #1
 8004670:	d0e6      	beq.n	8004640 <_printf_common+0xb4>
 8004672:	f109 0901 	add.w	r9, r9, #1
 8004676:	e7d8      	b.n	800462a <_printf_common+0x9e>

08004678 <_printf_i>:
 8004678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800467c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004680:	460c      	mov	r4, r1
 8004682:	7e09      	ldrb	r1, [r1, #24]
 8004684:	b085      	sub	sp, #20
 8004686:	296e      	cmp	r1, #110	; 0x6e
 8004688:	4617      	mov	r7, r2
 800468a:	4606      	mov	r6, r0
 800468c:	4698      	mov	r8, r3
 800468e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004690:	f000 80b3 	beq.w	80047fa <_printf_i+0x182>
 8004694:	d822      	bhi.n	80046dc <_printf_i+0x64>
 8004696:	2963      	cmp	r1, #99	; 0x63
 8004698:	d036      	beq.n	8004708 <_printf_i+0x90>
 800469a:	d80a      	bhi.n	80046b2 <_printf_i+0x3a>
 800469c:	2900      	cmp	r1, #0
 800469e:	f000 80b9 	beq.w	8004814 <_printf_i+0x19c>
 80046a2:	2958      	cmp	r1, #88	; 0x58
 80046a4:	f000 8083 	beq.w	80047ae <_printf_i+0x136>
 80046a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80046b0:	e032      	b.n	8004718 <_printf_i+0xa0>
 80046b2:	2964      	cmp	r1, #100	; 0x64
 80046b4:	d001      	beq.n	80046ba <_printf_i+0x42>
 80046b6:	2969      	cmp	r1, #105	; 0x69
 80046b8:	d1f6      	bne.n	80046a8 <_printf_i+0x30>
 80046ba:	6820      	ldr	r0, [r4, #0]
 80046bc:	6813      	ldr	r3, [r2, #0]
 80046be:	0605      	lsls	r5, r0, #24
 80046c0:	f103 0104 	add.w	r1, r3, #4
 80046c4:	d52a      	bpl.n	800471c <_printf_i+0xa4>
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6011      	str	r1, [r2, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	da03      	bge.n	80046d6 <_printf_i+0x5e>
 80046ce:	222d      	movs	r2, #45	; 0x2d
 80046d0:	425b      	negs	r3, r3
 80046d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80046d6:	486f      	ldr	r0, [pc, #444]	; (8004894 <_printf_i+0x21c>)
 80046d8:	220a      	movs	r2, #10
 80046da:	e039      	b.n	8004750 <_printf_i+0xd8>
 80046dc:	2973      	cmp	r1, #115	; 0x73
 80046de:	f000 809d 	beq.w	800481c <_printf_i+0x1a4>
 80046e2:	d808      	bhi.n	80046f6 <_printf_i+0x7e>
 80046e4:	296f      	cmp	r1, #111	; 0x6f
 80046e6:	d020      	beq.n	800472a <_printf_i+0xb2>
 80046e8:	2970      	cmp	r1, #112	; 0x70
 80046ea:	d1dd      	bne.n	80046a8 <_printf_i+0x30>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	f043 0320 	orr.w	r3, r3, #32
 80046f2:	6023      	str	r3, [r4, #0]
 80046f4:	e003      	b.n	80046fe <_printf_i+0x86>
 80046f6:	2975      	cmp	r1, #117	; 0x75
 80046f8:	d017      	beq.n	800472a <_printf_i+0xb2>
 80046fa:	2978      	cmp	r1, #120	; 0x78
 80046fc:	d1d4      	bne.n	80046a8 <_printf_i+0x30>
 80046fe:	2378      	movs	r3, #120	; 0x78
 8004700:	4865      	ldr	r0, [pc, #404]	; (8004898 <_printf_i+0x220>)
 8004702:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004706:	e055      	b.n	80047b4 <_printf_i+0x13c>
 8004708:	6813      	ldr	r3, [r2, #0]
 800470a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800470e:	1d19      	adds	r1, r3, #4
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6011      	str	r1, [r2, #0]
 8004714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004718:	2301      	movs	r3, #1
 800471a:	e08c      	b.n	8004836 <_printf_i+0x1be>
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004722:	6011      	str	r1, [r2, #0]
 8004724:	bf18      	it	ne
 8004726:	b21b      	sxthne	r3, r3
 8004728:	e7cf      	b.n	80046ca <_printf_i+0x52>
 800472a:	6813      	ldr	r3, [r2, #0]
 800472c:	6825      	ldr	r5, [r4, #0]
 800472e:	1d18      	adds	r0, r3, #4
 8004730:	6010      	str	r0, [r2, #0]
 8004732:	0628      	lsls	r0, r5, #24
 8004734:	d501      	bpl.n	800473a <_printf_i+0xc2>
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	e002      	b.n	8004740 <_printf_i+0xc8>
 800473a:	0668      	lsls	r0, r5, #25
 800473c:	d5fb      	bpl.n	8004736 <_printf_i+0xbe>
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	296f      	cmp	r1, #111	; 0x6f
 8004742:	bf14      	ite	ne
 8004744:	220a      	movne	r2, #10
 8004746:	2208      	moveq	r2, #8
 8004748:	4852      	ldr	r0, [pc, #328]	; (8004894 <_printf_i+0x21c>)
 800474a:	2100      	movs	r1, #0
 800474c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004750:	6865      	ldr	r5, [r4, #4]
 8004752:	2d00      	cmp	r5, #0
 8004754:	60a5      	str	r5, [r4, #8]
 8004756:	f2c0 8095 	blt.w	8004884 <_printf_i+0x20c>
 800475a:	6821      	ldr	r1, [r4, #0]
 800475c:	f021 0104 	bic.w	r1, r1, #4
 8004760:	6021      	str	r1, [r4, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d13d      	bne.n	80047e2 <_printf_i+0x16a>
 8004766:	2d00      	cmp	r5, #0
 8004768:	f040 808e 	bne.w	8004888 <_printf_i+0x210>
 800476c:	4665      	mov	r5, ip
 800476e:	2a08      	cmp	r2, #8
 8004770:	d10b      	bne.n	800478a <_printf_i+0x112>
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	07db      	lsls	r3, r3, #31
 8004776:	d508      	bpl.n	800478a <_printf_i+0x112>
 8004778:	6923      	ldr	r3, [r4, #16]
 800477a:	6862      	ldr	r2, [r4, #4]
 800477c:	429a      	cmp	r2, r3
 800477e:	bfde      	ittt	le
 8004780:	2330      	movle	r3, #48	; 0x30
 8004782:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004786:	f105 35ff 	addle.w	r5, r5, #4294967295
 800478a:	ebac 0305 	sub.w	r3, ip, r5
 800478e:	6123      	str	r3, [r4, #16]
 8004790:	f8cd 8000 	str.w	r8, [sp]
 8004794:	463b      	mov	r3, r7
 8004796:	aa03      	add	r2, sp, #12
 8004798:	4621      	mov	r1, r4
 800479a:	4630      	mov	r0, r6
 800479c:	f7ff fef6 	bl	800458c <_printf_common>
 80047a0:	3001      	adds	r0, #1
 80047a2:	d14d      	bne.n	8004840 <_printf_i+0x1c8>
 80047a4:	f04f 30ff 	mov.w	r0, #4294967295
 80047a8:	b005      	add	sp, #20
 80047aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047ae:	4839      	ldr	r0, [pc, #228]	; (8004894 <_printf_i+0x21c>)
 80047b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80047b4:	6813      	ldr	r3, [r2, #0]
 80047b6:	6821      	ldr	r1, [r4, #0]
 80047b8:	1d1d      	adds	r5, r3, #4
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6015      	str	r5, [r2, #0]
 80047be:	060a      	lsls	r2, r1, #24
 80047c0:	d50b      	bpl.n	80047da <_printf_i+0x162>
 80047c2:	07ca      	lsls	r2, r1, #31
 80047c4:	bf44      	itt	mi
 80047c6:	f041 0120 	orrmi.w	r1, r1, #32
 80047ca:	6021      	strmi	r1, [r4, #0]
 80047cc:	b91b      	cbnz	r3, 80047d6 <_printf_i+0x15e>
 80047ce:	6822      	ldr	r2, [r4, #0]
 80047d0:	f022 0220 	bic.w	r2, r2, #32
 80047d4:	6022      	str	r2, [r4, #0]
 80047d6:	2210      	movs	r2, #16
 80047d8:	e7b7      	b.n	800474a <_printf_i+0xd2>
 80047da:	064d      	lsls	r5, r1, #25
 80047dc:	bf48      	it	mi
 80047de:	b29b      	uxthmi	r3, r3
 80047e0:	e7ef      	b.n	80047c2 <_printf_i+0x14a>
 80047e2:	4665      	mov	r5, ip
 80047e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80047e8:	fb02 3311 	mls	r3, r2, r1, r3
 80047ec:	5cc3      	ldrb	r3, [r0, r3]
 80047ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80047f2:	460b      	mov	r3, r1
 80047f4:	2900      	cmp	r1, #0
 80047f6:	d1f5      	bne.n	80047e4 <_printf_i+0x16c>
 80047f8:	e7b9      	b.n	800476e <_printf_i+0xf6>
 80047fa:	6813      	ldr	r3, [r2, #0]
 80047fc:	6825      	ldr	r5, [r4, #0]
 80047fe:	1d18      	adds	r0, r3, #4
 8004800:	6961      	ldr	r1, [r4, #20]
 8004802:	6010      	str	r0, [r2, #0]
 8004804:	0628      	lsls	r0, r5, #24
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	d501      	bpl.n	800480e <_printf_i+0x196>
 800480a:	6019      	str	r1, [r3, #0]
 800480c:	e002      	b.n	8004814 <_printf_i+0x19c>
 800480e:	066a      	lsls	r2, r5, #25
 8004810:	d5fb      	bpl.n	800480a <_printf_i+0x192>
 8004812:	8019      	strh	r1, [r3, #0]
 8004814:	2300      	movs	r3, #0
 8004816:	4665      	mov	r5, ip
 8004818:	6123      	str	r3, [r4, #16]
 800481a:	e7b9      	b.n	8004790 <_printf_i+0x118>
 800481c:	6813      	ldr	r3, [r2, #0]
 800481e:	1d19      	adds	r1, r3, #4
 8004820:	6011      	str	r1, [r2, #0]
 8004822:	681d      	ldr	r5, [r3, #0]
 8004824:	6862      	ldr	r2, [r4, #4]
 8004826:	2100      	movs	r1, #0
 8004828:	4628      	mov	r0, r5
 800482a:	f000 fa93 	bl	8004d54 <memchr>
 800482e:	b108      	cbz	r0, 8004834 <_printf_i+0x1bc>
 8004830:	1b40      	subs	r0, r0, r5
 8004832:	6060      	str	r0, [r4, #4]
 8004834:	6863      	ldr	r3, [r4, #4]
 8004836:	6123      	str	r3, [r4, #16]
 8004838:	2300      	movs	r3, #0
 800483a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800483e:	e7a7      	b.n	8004790 <_printf_i+0x118>
 8004840:	6923      	ldr	r3, [r4, #16]
 8004842:	462a      	mov	r2, r5
 8004844:	4639      	mov	r1, r7
 8004846:	4630      	mov	r0, r6
 8004848:	47c0      	blx	r8
 800484a:	3001      	adds	r0, #1
 800484c:	d0aa      	beq.n	80047a4 <_printf_i+0x12c>
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	079b      	lsls	r3, r3, #30
 8004852:	d413      	bmi.n	800487c <_printf_i+0x204>
 8004854:	68e0      	ldr	r0, [r4, #12]
 8004856:	9b03      	ldr	r3, [sp, #12]
 8004858:	4298      	cmp	r0, r3
 800485a:	bfb8      	it	lt
 800485c:	4618      	movlt	r0, r3
 800485e:	e7a3      	b.n	80047a8 <_printf_i+0x130>
 8004860:	2301      	movs	r3, #1
 8004862:	464a      	mov	r2, r9
 8004864:	4639      	mov	r1, r7
 8004866:	4630      	mov	r0, r6
 8004868:	47c0      	blx	r8
 800486a:	3001      	adds	r0, #1
 800486c:	d09a      	beq.n	80047a4 <_printf_i+0x12c>
 800486e:	3501      	adds	r5, #1
 8004870:	68e3      	ldr	r3, [r4, #12]
 8004872:	9a03      	ldr	r2, [sp, #12]
 8004874:	1a9b      	subs	r3, r3, r2
 8004876:	42ab      	cmp	r3, r5
 8004878:	dcf2      	bgt.n	8004860 <_printf_i+0x1e8>
 800487a:	e7eb      	b.n	8004854 <_printf_i+0x1dc>
 800487c:	2500      	movs	r5, #0
 800487e:	f104 0919 	add.w	r9, r4, #25
 8004882:	e7f5      	b.n	8004870 <_printf_i+0x1f8>
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1ac      	bne.n	80047e2 <_printf_i+0x16a>
 8004888:	7803      	ldrb	r3, [r0, #0]
 800488a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800488e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004892:	e76c      	b.n	800476e <_printf_i+0xf6>
 8004894:	08005229 	.word	0x08005229
 8004898:	0800523a 	.word	0x0800523a

0800489c <_sbrk_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	2300      	movs	r3, #0
 80048a0:	4c05      	ldr	r4, [pc, #20]	; (80048b8 <_sbrk_r+0x1c>)
 80048a2:	4605      	mov	r5, r0
 80048a4:	4608      	mov	r0, r1
 80048a6:	6023      	str	r3, [r4, #0]
 80048a8:	f7fd ffbe 	bl	8002828 <_sbrk>
 80048ac:	1c43      	adds	r3, r0, #1
 80048ae:	d102      	bne.n	80048b6 <_sbrk_r+0x1a>
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	b103      	cbz	r3, 80048b6 <_sbrk_r+0x1a>
 80048b4:	602b      	str	r3, [r5, #0]
 80048b6:	bd38      	pop	{r3, r4, r5, pc}
 80048b8:	20000880 	.word	0x20000880

080048bc <__sread>:
 80048bc:	b510      	push	{r4, lr}
 80048be:	460c      	mov	r4, r1
 80048c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c4:	f000 faa2 	bl	8004e0c <_read_r>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	bfab      	itete	ge
 80048cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048ce:	89a3      	ldrhlt	r3, [r4, #12]
 80048d0:	181b      	addge	r3, r3, r0
 80048d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048d6:	bfac      	ite	ge
 80048d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80048da:	81a3      	strhlt	r3, [r4, #12]
 80048dc:	bd10      	pop	{r4, pc}

080048de <__swrite>:
 80048de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e2:	461f      	mov	r7, r3
 80048e4:	898b      	ldrh	r3, [r1, #12]
 80048e6:	4605      	mov	r5, r0
 80048e8:	05db      	lsls	r3, r3, #23
 80048ea:	460c      	mov	r4, r1
 80048ec:	4616      	mov	r6, r2
 80048ee:	d505      	bpl.n	80048fc <__swrite+0x1e>
 80048f0:	2302      	movs	r3, #2
 80048f2:	2200      	movs	r2, #0
 80048f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f8:	f000 f9b6 	bl	8004c68 <_lseek_r>
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	4632      	mov	r2, r6
 8004900:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004904:	81a3      	strh	r3, [r4, #12]
 8004906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800490a:	463b      	mov	r3, r7
 800490c:	4628      	mov	r0, r5
 800490e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004912:	f000 b869 	b.w	80049e8 <_write_r>

08004916 <__sseek>:
 8004916:	b510      	push	{r4, lr}
 8004918:	460c      	mov	r4, r1
 800491a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800491e:	f000 f9a3 	bl	8004c68 <_lseek_r>
 8004922:	1c43      	adds	r3, r0, #1
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	bf15      	itete	ne
 8004928:	6560      	strne	r0, [r4, #84]	; 0x54
 800492a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800492e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004932:	81a3      	strheq	r3, [r4, #12]
 8004934:	bf18      	it	ne
 8004936:	81a3      	strhne	r3, [r4, #12]
 8004938:	bd10      	pop	{r4, pc}

0800493a <__sclose>:
 800493a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800493e:	f000 b8d3 	b.w	8004ae8 <_close_r>
	...

08004944 <__swbuf_r>:
 8004944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004946:	460e      	mov	r6, r1
 8004948:	4614      	mov	r4, r2
 800494a:	4605      	mov	r5, r0
 800494c:	b118      	cbz	r0, 8004956 <__swbuf_r+0x12>
 800494e:	6983      	ldr	r3, [r0, #24]
 8004950:	b90b      	cbnz	r3, 8004956 <__swbuf_r+0x12>
 8004952:	f7ff fbf9 	bl	8004148 <__sinit>
 8004956:	4b21      	ldr	r3, [pc, #132]	; (80049dc <__swbuf_r+0x98>)
 8004958:	429c      	cmp	r4, r3
 800495a:	d12a      	bne.n	80049b2 <__swbuf_r+0x6e>
 800495c:	686c      	ldr	r4, [r5, #4]
 800495e:	69a3      	ldr	r3, [r4, #24]
 8004960:	60a3      	str	r3, [r4, #8]
 8004962:	89a3      	ldrh	r3, [r4, #12]
 8004964:	071a      	lsls	r2, r3, #28
 8004966:	d52e      	bpl.n	80049c6 <__swbuf_r+0x82>
 8004968:	6923      	ldr	r3, [r4, #16]
 800496a:	b363      	cbz	r3, 80049c6 <__swbuf_r+0x82>
 800496c:	6923      	ldr	r3, [r4, #16]
 800496e:	6820      	ldr	r0, [r4, #0]
 8004970:	b2f6      	uxtb	r6, r6
 8004972:	1ac0      	subs	r0, r0, r3
 8004974:	6963      	ldr	r3, [r4, #20]
 8004976:	4637      	mov	r7, r6
 8004978:	4283      	cmp	r3, r0
 800497a:	dc04      	bgt.n	8004986 <__swbuf_r+0x42>
 800497c:	4621      	mov	r1, r4
 800497e:	4628      	mov	r0, r5
 8004980:	f000 f948 	bl	8004c14 <_fflush_r>
 8004984:	bb28      	cbnz	r0, 80049d2 <__swbuf_r+0x8e>
 8004986:	68a3      	ldr	r3, [r4, #8]
 8004988:	3001      	adds	r0, #1
 800498a:	3b01      	subs	r3, #1
 800498c:	60a3      	str	r3, [r4, #8]
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	6022      	str	r2, [r4, #0]
 8004994:	701e      	strb	r6, [r3, #0]
 8004996:	6963      	ldr	r3, [r4, #20]
 8004998:	4283      	cmp	r3, r0
 800499a:	d004      	beq.n	80049a6 <__swbuf_r+0x62>
 800499c:	89a3      	ldrh	r3, [r4, #12]
 800499e:	07db      	lsls	r3, r3, #31
 80049a0:	d519      	bpl.n	80049d6 <__swbuf_r+0x92>
 80049a2:	2e0a      	cmp	r6, #10
 80049a4:	d117      	bne.n	80049d6 <__swbuf_r+0x92>
 80049a6:	4621      	mov	r1, r4
 80049a8:	4628      	mov	r0, r5
 80049aa:	f000 f933 	bl	8004c14 <_fflush_r>
 80049ae:	b190      	cbz	r0, 80049d6 <__swbuf_r+0x92>
 80049b0:	e00f      	b.n	80049d2 <__swbuf_r+0x8e>
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <__swbuf_r+0x9c>)
 80049b4:	429c      	cmp	r4, r3
 80049b6:	d101      	bne.n	80049bc <__swbuf_r+0x78>
 80049b8:	68ac      	ldr	r4, [r5, #8]
 80049ba:	e7d0      	b.n	800495e <__swbuf_r+0x1a>
 80049bc:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <__swbuf_r+0xa0>)
 80049be:	429c      	cmp	r4, r3
 80049c0:	bf08      	it	eq
 80049c2:	68ec      	ldreq	r4, [r5, #12]
 80049c4:	e7cb      	b.n	800495e <__swbuf_r+0x1a>
 80049c6:	4621      	mov	r1, r4
 80049c8:	4628      	mov	r0, r5
 80049ca:	f000 f81f 	bl	8004a0c <__swsetup_r>
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d0cc      	beq.n	800496c <__swbuf_r+0x28>
 80049d2:	f04f 37ff 	mov.w	r7, #4294967295
 80049d6:	4638      	mov	r0, r7
 80049d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049da:	bf00      	nop
 80049dc:	080051d8 	.word	0x080051d8
 80049e0:	080051f8 	.word	0x080051f8
 80049e4:	080051b8 	.word	0x080051b8

080049e8 <_write_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	4605      	mov	r5, r0
 80049ec:	4608      	mov	r0, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	2200      	movs	r2, #0
 80049f2:	4c05      	ldr	r4, [pc, #20]	; (8004a08 <_write_r+0x20>)
 80049f4:	6022      	str	r2, [r4, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	f7fd fec9 	bl	800278e <_write>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	d102      	bne.n	8004a06 <_write_r+0x1e>
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	b103      	cbz	r3, 8004a06 <_write_r+0x1e>
 8004a04:	602b      	str	r3, [r5, #0]
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	20000880 	.word	0x20000880

08004a0c <__swsetup_r>:
 8004a0c:	4b32      	ldr	r3, [pc, #200]	; (8004ad8 <__swsetup_r+0xcc>)
 8004a0e:	b570      	push	{r4, r5, r6, lr}
 8004a10:	681d      	ldr	r5, [r3, #0]
 8004a12:	4606      	mov	r6, r0
 8004a14:	460c      	mov	r4, r1
 8004a16:	b125      	cbz	r5, 8004a22 <__swsetup_r+0x16>
 8004a18:	69ab      	ldr	r3, [r5, #24]
 8004a1a:	b913      	cbnz	r3, 8004a22 <__swsetup_r+0x16>
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f7ff fb93 	bl	8004148 <__sinit>
 8004a22:	4b2e      	ldr	r3, [pc, #184]	; (8004adc <__swsetup_r+0xd0>)
 8004a24:	429c      	cmp	r4, r3
 8004a26:	d10f      	bne.n	8004a48 <__swsetup_r+0x3c>
 8004a28:	686c      	ldr	r4, [r5, #4]
 8004a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	0715      	lsls	r5, r2, #28
 8004a32:	d42c      	bmi.n	8004a8e <__swsetup_r+0x82>
 8004a34:	06d0      	lsls	r0, r2, #27
 8004a36:	d411      	bmi.n	8004a5c <__swsetup_r+0x50>
 8004a38:	2209      	movs	r2, #9
 8004a3a:	6032      	str	r2, [r6, #0]
 8004a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a40:	81a3      	strh	r3, [r4, #12]
 8004a42:	f04f 30ff 	mov.w	r0, #4294967295
 8004a46:	e03e      	b.n	8004ac6 <__swsetup_r+0xba>
 8004a48:	4b25      	ldr	r3, [pc, #148]	; (8004ae0 <__swsetup_r+0xd4>)
 8004a4a:	429c      	cmp	r4, r3
 8004a4c:	d101      	bne.n	8004a52 <__swsetup_r+0x46>
 8004a4e:	68ac      	ldr	r4, [r5, #8]
 8004a50:	e7eb      	b.n	8004a2a <__swsetup_r+0x1e>
 8004a52:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <__swsetup_r+0xd8>)
 8004a54:	429c      	cmp	r4, r3
 8004a56:	bf08      	it	eq
 8004a58:	68ec      	ldreq	r4, [r5, #12]
 8004a5a:	e7e6      	b.n	8004a2a <__swsetup_r+0x1e>
 8004a5c:	0751      	lsls	r1, r2, #29
 8004a5e:	d512      	bpl.n	8004a86 <__swsetup_r+0x7a>
 8004a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a62:	b141      	cbz	r1, 8004a76 <__swsetup_r+0x6a>
 8004a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a68:	4299      	cmp	r1, r3
 8004a6a:	d002      	beq.n	8004a72 <__swsetup_r+0x66>
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f000 f981 	bl	8004d74 <_free_r>
 8004a72:	2300      	movs	r3, #0
 8004a74:	6363      	str	r3, [r4, #52]	; 0x34
 8004a76:	89a3      	ldrh	r3, [r4, #12]
 8004a78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a7c:	81a3      	strh	r3, [r4, #12]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	6063      	str	r3, [r4, #4]
 8004a82:	6923      	ldr	r3, [r4, #16]
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	f043 0308 	orr.w	r3, r3, #8
 8004a8c:	81a3      	strh	r3, [r4, #12]
 8004a8e:	6923      	ldr	r3, [r4, #16]
 8004a90:	b94b      	cbnz	r3, 8004aa6 <__swsetup_r+0x9a>
 8004a92:	89a3      	ldrh	r3, [r4, #12]
 8004a94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a9c:	d003      	beq.n	8004aa6 <__swsetup_r+0x9a>
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	f000 f917 	bl	8004cd4 <__smakebuf_r>
 8004aa6:	89a2      	ldrh	r2, [r4, #12]
 8004aa8:	f012 0301 	ands.w	r3, r2, #1
 8004aac:	d00c      	beq.n	8004ac8 <__swsetup_r+0xbc>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60a3      	str	r3, [r4, #8]
 8004ab2:	6963      	ldr	r3, [r4, #20]
 8004ab4:	425b      	negs	r3, r3
 8004ab6:	61a3      	str	r3, [r4, #24]
 8004ab8:	6923      	ldr	r3, [r4, #16]
 8004aba:	b953      	cbnz	r3, 8004ad2 <__swsetup_r+0xc6>
 8004abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ac0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004ac4:	d1ba      	bne.n	8004a3c <__swsetup_r+0x30>
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}
 8004ac8:	0792      	lsls	r2, r2, #30
 8004aca:	bf58      	it	pl
 8004acc:	6963      	ldrpl	r3, [r4, #20]
 8004ace:	60a3      	str	r3, [r4, #8]
 8004ad0:	e7f2      	b.n	8004ab8 <__swsetup_r+0xac>
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	e7f7      	b.n	8004ac6 <__swsetup_r+0xba>
 8004ad6:	bf00      	nop
 8004ad8:	2000000c 	.word	0x2000000c
 8004adc:	080051d8 	.word	0x080051d8
 8004ae0:	080051f8 	.word	0x080051f8
 8004ae4:	080051b8 	.word	0x080051b8

08004ae8 <_close_r>:
 8004ae8:	b538      	push	{r3, r4, r5, lr}
 8004aea:	2300      	movs	r3, #0
 8004aec:	4c05      	ldr	r4, [pc, #20]	; (8004b04 <_close_r+0x1c>)
 8004aee:	4605      	mov	r5, r0
 8004af0:	4608      	mov	r0, r1
 8004af2:	6023      	str	r3, [r4, #0]
 8004af4:	f7fd fe67 	bl	80027c6 <_close>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	d102      	bne.n	8004b02 <_close_r+0x1a>
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	b103      	cbz	r3, 8004b02 <_close_r+0x1a>
 8004b00:	602b      	str	r3, [r5, #0]
 8004b02:	bd38      	pop	{r3, r4, r5, pc}
 8004b04:	20000880 	.word	0x20000880

08004b08 <__sflush_r>:
 8004b08:	898a      	ldrh	r2, [r1, #12]
 8004b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b0e:	4605      	mov	r5, r0
 8004b10:	0710      	lsls	r0, r2, #28
 8004b12:	460c      	mov	r4, r1
 8004b14:	d458      	bmi.n	8004bc8 <__sflush_r+0xc0>
 8004b16:	684b      	ldr	r3, [r1, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	dc05      	bgt.n	8004b28 <__sflush_r+0x20>
 8004b1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	dc02      	bgt.n	8004b28 <__sflush_r+0x20>
 8004b22:	2000      	movs	r0, #0
 8004b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b2a:	2e00      	cmp	r6, #0
 8004b2c:	d0f9      	beq.n	8004b22 <__sflush_r+0x1a>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b34:	682f      	ldr	r7, [r5, #0]
 8004b36:	6a21      	ldr	r1, [r4, #32]
 8004b38:	602b      	str	r3, [r5, #0]
 8004b3a:	d032      	beq.n	8004ba2 <__sflush_r+0x9a>
 8004b3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	075a      	lsls	r2, r3, #29
 8004b42:	d505      	bpl.n	8004b50 <__sflush_r+0x48>
 8004b44:	6863      	ldr	r3, [r4, #4]
 8004b46:	1ac0      	subs	r0, r0, r3
 8004b48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b4a:	b10b      	cbz	r3, 8004b50 <__sflush_r+0x48>
 8004b4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b4e:	1ac0      	subs	r0, r0, r3
 8004b50:	2300      	movs	r3, #0
 8004b52:	4602      	mov	r2, r0
 8004b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b56:	6a21      	ldr	r1, [r4, #32]
 8004b58:	4628      	mov	r0, r5
 8004b5a:	47b0      	blx	r6
 8004b5c:	1c43      	adds	r3, r0, #1
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	d106      	bne.n	8004b70 <__sflush_r+0x68>
 8004b62:	6829      	ldr	r1, [r5, #0]
 8004b64:	291d      	cmp	r1, #29
 8004b66:	d848      	bhi.n	8004bfa <__sflush_r+0xf2>
 8004b68:	4a29      	ldr	r2, [pc, #164]	; (8004c10 <__sflush_r+0x108>)
 8004b6a:	40ca      	lsrs	r2, r1
 8004b6c:	07d6      	lsls	r6, r2, #31
 8004b6e:	d544      	bpl.n	8004bfa <__sflush_r+0xf2>
 8004b70:	2200      	movs	r2, #0
 8004b72:	6062      	str	r2, [r4, #4]
 8004b74:	6922      	ldr	r2, [r4, #16]
 8004b76:	04d9      	lsls	r1, r3, #19
 8004b78:	6022      	str	r2, [r4, #0]
 8004b7a:	d504      	bpl.n	8004b86 <__sflush_r+0x7e>
 8004b7c:	1c42      	adds	r2, r0, #1
 8004b7e:	d101      	bne.n	8004b84 <__sflush_r+0x7c>
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	b903      	cbnz	r3, 8004b86 <__sflush_r+0x7e>
 8004b84:	6560      	str	r0, [r4, #84]	; 0x54
 8004b86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b88:	602f      	str	r7, [r5, #0]
 8004b8a:	2900      	cmp	r1, #0
 8004b8c:	d0c9      	beq.n	8004b22 <__sflush_r+0x1a>
 8004b8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b92:	4299      	cmp	r1, r3
 8004b94:	d002      	beq.n	8004b9c <__sflush_r+0x94>
 8004b96:	4628      	mov	r0, r5
 8004b98:	f000 f8ec 	bl	8004d74 <_free_r>
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	6360      	str	r0, [r4, #52]	; 0x34
 8004ba0:	e7c0      	b.n	8004b24 <__sflush_r+0x1c>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	47b0      	blx	r6
 8004ba8:	1c41      	adds	r1, r0, #1
 8004baa:	d1c8      	bne.n	8004b3e <__sflush_r+0x36>
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0c5      	beq.n	8004b3e <__sflush_r+0x36>
 8004bb2:	2b1d      	cmp	r3, #29
 8004bb4:	d001      	beq.n	8004bba <__sflush_r+0xb2>
 8004bb6:	2b16      	cmp	r3, #22
 8004bb8:	d101      	bne.n	8004bbe <__sflush_r+0xb6>
 8004bba:	602f      	str	r7, [r5, #0]
 8004bbc:	e7b1      	b.n	8004b22 <__sflush_r+0x1a>
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bc4:	81a3      	strh	r3, [r4, #12]
 8004bc6:	e7ad      	b.n	8004b24 <__sflush_r+0x1c>
 8004bc8:	690f      	ldr	r7, [r1, #16]
 8004bca:	2f00      	cmp	r7, #0
 8004bcc:	d0a9      	beq.n	8004b22 <__sflush_r+0x1a>
 8004bce:	0793      	lsls	r3, r2, #30
 8004bd0:	bf18      	it	ne
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	680e      	ldr	r6, [r1, #0]
 8004bd6:	bf08      	it	eq
 8004bd8:	694b      	ldreq	r3, [r1, #20]
 8004bda:	eba6 0807 	sub.w	r8, r6, r7
 8004bde:	600f      	str	r7, [r1, #0]
 8004be0:	608b      	str	r3, [r1, #8]
 8004be2:	f1b8 0f00 	cmp.w	r8, #0
 8004be6:	dd9c      	ble.n	8004b22 <__sflush_r+0x1a>
 8004be8:	4643      	mov	r3, r8
 8004bea:	463a      	mov	r2, r7
 8004bec:	6a21      	ldr	r1, [r4, #32]
 8004bee:	4628      	mov	r0, r5
 8004bf0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bf2:	47b0      	blx	r6
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	dc06      	bgt.n	8004c06 <__sflush_r+0xfe>
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bfe:	81a3      	strh	r3, [r4, #12]
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295
 8004c04:	e78e      	b.n	8004b24 <__sflush_r+0x1c>
 8004c06:	4407      	add	r7, r0
 8004c08:	eba8 0800 	sub.w	r8, r8, r0
 8004c0c:	e7e9      	b.n	8004be2 <__sflush_r+0xda>
 8004c0e:	bf00      	nop
 8004c10:	20400001 	.word	0x20400001

08004c14 <_fflush_r>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	690b      	ldr	r3, [r1, #16]
 8004c18:	4605      	mov	r5, r0
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	b1db      	cbz	r3, 8004c56 <_fflush_r+0x42>
 8004c1e:	b118      	cbz	r0, 8004c28 <_fflush_r+0x14>
 8004c20:	6983      	ldr	r3, [r0, #24]
 8004c22:	b90b      	cbnz	r3, 8004c28 <_fflush_r+0x14>
 8004c24:	f7ff fa90 	bl	8004148 <__sinit>
 8004c28:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <_fflush_r+0x48>)
 8004c2a:	429c      	cmp	r4, r3
 8004c2c:	d109      	bne.n	8004c42 <_fflush_r+0x2e>
 8004c2e:	686c      	ldr	r4, [r5, #4]
 8004c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c34:	b17b      	cbz	r3, 8004c56 <_fflush_r+0x42>
 8004c36:	4621      	mov	r1, r4
 8004c38:	4628      	mov	r0, r5
 8004c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c3e:	f7ff bf63 	b.w	8004b08 <__sflush_r>
 8004c42:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <_fflush_r+0x4c>)
 8004c44:	429c      	cmp	r4, r3
 8004c46:	d101      	bne.n	8004c4c <_fflush_r+0x38>
 8004c48:	68ac      	ldr	r4, [r5, #8]
 8004c4a:	e7f1      	b.n	8004c30 <_fflush_r+0x1c>
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <_fflush_r+0x50>)
 8004c4e:	429c      	cmp	r4, r3
 8004c50:	bf08      	it	eq
 8004c52:	68ec      	ldreq	r4, [r5, #12]
 8004c54:	e7ec      	b.n	8004c30 <_fflush_r+0x1c>
 8004c56:	2000      	movs	r0, #0
 8004c58:	bd38      	pop	{r3, r4, r5, pc}
 8004c5a:	bf00      	nop
 8004c5c:	080051d8 	.word	0x080051d8
 8004c60:	080051f8 	.word	0x080051f8
 8004c64:	080051b8 	.word	0x080051b8

08004c68 <_lseek_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	4611      	mov	r1, r2
 8004c70:	2200      	movs	r2, #0
 8004c72:	4c05      	ldr	r4, [pc, #20]	; (8004c88 <_lseek_r+0x20>)
 8004c74:	6022      	str	r2, [r4, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	f7fd fdc9 	bl	800280e <_lseek>
 8004c7c:	1c43      	adds	r3, r0, #1
 8004c7e:	d102      	bne.n	8004c86 <_lseek_r+0x1e>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	b103      	cbz	r3, 8004c86 <_lseek_r+0x1e>
 8004c84:	602b      	str	r3, [r5, #0]
 8004c86:	bd38      	pop	{r3, r4, r5, pc}
 8004c88:	20000880 	.word	0x20000880

08004c8c <__swhatbuf_r>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	460e      	mov	r6, r1
 8004c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c94:	b096      	sub	sp, #88	; 0x58
 8004c96:	2900      	cmp	r1, #0
 8004c98:	4614      	mov	r4, r2
 8004c9a:	461d      	mov	r5, r3
 8004c9c:	da07      	bge.n	8004cae <__swhatbuf_r+0x22>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	602b      	str	r3, [r5, #0]
 8004ca2:	89b3      	ldrh	r3, [r6, #12]
 8004ca4:	061a      	lsls	r2, r3, #24
 8004ca6:	d410      	bmi.n	8004cca <__swhatbuf_r+0x3e>
 8004ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cac:	e00e      	b.n	8004ccc <__swhatbuf_r+0x40>
 8004cae:	466a      	mov	r2, sp
 8004cb0:	f000 f8be 	bl	8004e30 <_fstat_r>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	dbf2      	blt.n	8004c9e <__swhatbuf_r+0x12>
 8004cb8:	9a01      	ldr	r2, [sp, #4]
 8004cba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004cbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004cc2:	425a      	negs	r2, r3
 8004cc4:	415a      	adcs	r2, r3
 8004cc6:	602a      	str	r2, [r5, #0]
 8004cc8:	e7ee      	b.n	8004ca8 <__swhatbuf_r+0x1c>
 8004cca:	2340      	movs	r3, #64	; 0x40
 8004ccc:	2000      	movs	r0, #0
 8004cce:	6023      	str	r3, [r4, #0]
 8004cd0:	b016      	add	sp, #88	; 0x58
 8004cd2:	bd70      	pop	{r4, r5, r6, pc}

08004cd4 <__smakebuf_r>:
 8004cd4:	898b      	ldrh	r3, [r1, #12]
 8004cd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cd8:	079d      	lsls	r5, r3, #30
 8004cda:	4606      	mov	r6, r0
 8004cdc:	460c      	mov	r4, r1
 8004cde:	d507      	bpl.n	8004cf0 <__smakebuf_r+0x1c>
 8004ce0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ce4:	6023      	str	r3, [r4, #0]
 8004ce6:	6123      	str	r3, [r4, #16]
 8004ce8:	2301      	movs	r3, #1
 8004cea:	6163      	str	r3, [r4, #20]
 8004cec:	b002      	add	sp, #8
 8004cee:	bd70      	pop	{r4, r5, r6, pc}
 8004cf0:	ab01      	add	r3, sp, #4
 8004cf2:	466a      	mov	r2, sp
 8004cf4:	f7ff ffca 	bl	8004c8c <__swhatbuf_r>
 8004cf8:	9900      	ldr	r1, [sp, #0]
 8004cfa:	4605      	mov	r5, r0
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	f7ff faad 	bl	800425c <_malloc_r>
 8004d02:	b948      	cbnz	r0, 8004d18 <__smakebuf_r+0x44>
 8004d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d08:	059a      	lsls	r2, r3, #22
 8004d0a:	d4ef      	bmi.n	8004cec <__smakebuf_r+0x18>
 8004d0c:	f023 0303 	bic.w	r3, r3, #3
 8004d10:	f043 0302 	orr.w	r3, r3, #2
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	e7e3      	b.n	8004ce0 <__smakebuf_r+0xc>
 8004d18:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <__smakebuf_r+0x7c>)
 8004d1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d1c:	89a3      	ldrh	r3, [r4, #12]
 8004d1e:	6020      	str	r0, [r4, #0]
 8004d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d24:	81a3      	strh	r3, [r4, #12]
 8004d26:	9b00      	ldr	r3, [sp, #0]
 8004d28:	6120      	str	r0, [r4, #16]
 8004d2a:	6163      	str	r3, [r4, #20]
 8004d2c:	9b01      	ldr	r3, [sp, #4]
 8004d2e:	b15b      	cbz	r3, 8004d48 <__smakebuf_r+0x74>
 8004d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d34:	4630      	mov	r0, r6
 8004d36:	f000 f88d 	bl	8004e54 <_isatty_r>
 8004d3a:	b128      	cbz	r0, 8004d48 <__smakebuf_r+0x74>
 8004d3c:	89a3      	ldrh	r3, [r4, #12]
 8004d3e:	f023 0303 	bic.w	r3, r3, #3
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	81a3      	strh	r3, [r4, #12]
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	431d      	orrs	r5, r3
 8004d4c:	81a5      	strh	r5, [r4, #12]
 8004d4e:	e7cd      	b.n	8004cec <__smakebuf_r+0x18>
 8004d50:	08004111 	.word	0x08004111

08004d54 <memchr>:
 8004d54:	b510      	push	{r4, lr}
 8004d56:	b2c9      	uxtb	r1, r1
 8004d58:	4402      	add	r2, r0
 8004d5a:	4290      	cmp	r0, r2
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	d101      	bne.n	8004d64 <memchr+0x10>
 8004d60:	2300      	movs	r3, #0
 8004d62:	e003      	b.n	8004d6c <memchr+0x18>
 8004d64:	781c      	ldrb	r4, [r3, #0]
 8004d66:	3001      	adds	r0, #1
 8004d68:	428c      	cmp	r4, r1
 8004d6a:	d1f6      	bne.n	8004d5a <memchr+0x6>
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	bd10      	pop	{r4, pc}

08004d70 <__malloc_lock>:
 8004d70:	4770      	bx	lr

08004d72 <__malloc_unlock>:
 8004d72:	4770      	bx	lr

08004d74 <_free_r>:
 8004d74:	b538      	push	{r3, r4, r5, lr}
 8004d76:	4605      	mov	r5, r0
 8004d78:	2900      	cmp	r1, #0
 8004d7a:	d043      	beq.n	8004e04 <_free_r+0x90>
 8004d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d80:	1f0c      	subs	r4, r1, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bfb8      	it	lt
 8004d86:	18e4      	addlt	r4, r4, r3
 8004d88:	f7ff fff2 	bl	8004d70 <__malloc_lock>
 8004d8c:	4a1e      	ldr	r2, [pc, #120]	; (8004e08 <_free_r+0x94>)
 8004d8e:	6813      	ldr	r3, [r2, #0]
 8004d90:	4610      	mov	r0, r2
 8004d92:	b933      	cbnz	r3, 8004da2 <_free_r+0x2e>
 8004d94:	6063      	str	r3, [r4, #4]
 8004d96:	6014      	str	r4, [r2, #0]
 8004d98:	4628      	mov	r0, r5
 8004d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d9e:	f7ff bfe8 	b.w	8004d72 <__malloc_unlock>
 8004da2:	42a3      	cmp	r3, r4
 8004da4:	d90b      	bls.n	8004dbe <_free_r+0x4a>
 8004da6:	6821      	ldr	r1, [r4, #0]
 8004da8:	1862      	adds	r2, r4, r1
 8004daa:	4293      	cmp	r3, r2
 8004dac:	bf01      	itttt	eq
 8004dae:	681a      	ldreq	r2, [r3, #0]
 8004db0:	685b      	ldreq	r3, [r3, #4]
 8004db2:	1852      	addeq	r2, r2, r1
 8004db4:	6022      	streq	r2, [r4, #0]
 8004db6:	6063      	str	r3, [r4, #4]
 8004db8:	6004      	str	r4, [r0, #0]
 8004dba:	e7ed      	b.n	8004d98 <_free_r+0x24>
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	b10a      	cbz	r2, 8004dc6 <_free_r+0x52>
 8004dc2:	42a2      	cmp	r2, r4
 8004dc4:	d9fa      	bls.n	8004dbc <_free_r+0x48>
 8004dc6:	6819      	ldr	r1, [r3, #0]
 8004dc8:	1858      	adds	r0, r3, r1
 8004dca:	42a0      	cmp	r0, r4
 8004dcc:	d10b      	bne.n	8004de6 <_free_r+0x72>
 8004dce:	6820      	ldr	r0, [r4, #0]
 8004dd0:	4401      	add	r1, r0
 8004dd2:	1858      	adds	r0, r3, r1
 8004dd4:	4282      	cmp	r2, r0
 8004dd6:	6019      	str	r1, [r3, #0]
 8004dd8:	d1de      	bne.n	8004d98 <_free_r+0x24>
 8004dda:	6810      	ldr	r0, [r2, #0]
 8004ddc:	6852      	ldr	r2, [r2, #4]
 8004dde:	4401      	add	r1, r0
 8004de0:	6019      	str	r1, [r3, #0]
 8004de2:	605a      	str	r2, [r3, #4]
 8004de4:	e7d8      	b.n	8004d98 <_free_r+0x24>
 8004de6:	d902      	bls.n	8004dee <_free_r+0x7a>
 8004de8:	230c      	movs	r3, #12
 8004dea:	602b      	str	r3, [r5, #0]
 8004dec:	e7d4      	b.n	8004d98 <_free_r+0x24>
 8004dee:	6820      	ldr	r0, [r4, #0]
 8004df0:	1821      	adds	r1, r4, r0
 8004df2:	428a      	cmp	r2, r1
 8004df4:	bf01      	itttt	eq
 8004df6:	6811      	ldreq	r1, [r2, #0]
 8004df8:	6852      	ldreq	r2, [r2, #4]
 8004dfa:	1809      	addeq	r1, r1, r0
 8004dfc:	6021      	streq	r1, [r4, #0]
 8004dfe:	6062      	str	r2, [r4, #4]
 8004e00:	605c      	str	r4, [r3, #4]
 8004e02:	e7c9      	b.n	8004d98 <_free_r+0x24>
 8004e04:	bd38      	pop	{r3, r4, r5, pc}
 8004e06:	bf00      	nop
 8004e08:	20000450 	.word	0x20000450

08004e0c <_read_r>:
 8004e0c:	b538      	push	{r3, r4, r5, lr}
 8004e0e:	4605      	mov	r5, r0
 8004e10:	4608      	mov	r0, r1
 8004e12:	4611      	mov	r1, r2
 8004e14:	2200      	movs	r2, #0
 8004e16:	4c05      	ldr	r4, [pc, #20]	; (8004e2c <_read_r+0x20>)
 8004e18:	6022      	str	r2, [r4, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f7fd fc9a 	bl	8002754 <_read>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d102      	bne.n	8004e2a <_read_r+0x1e>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	b103      	cbz	r3, 8004e2a <_read_r+0x1e>
 8004e28:	602b      	str	r3, [r5, #0]
 8004e2a:	bd38      	pop	{r3, r4, r5, pc}
 8004e2c:	20000880 	.word	0x20000880

08004e30 <_fstat_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	2300      	movs	r3, #0
 8004e34:	4c06      	ldr	r4, [pc, #24]	; (8004e50 <_fstat_r+0x20>)
 8004e36:	4605      	mov	r5, r0
 8004e38:	4608      	mov	r0, r1
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	f7fd fccd 	bl	80027dc <_fstat>
 8004e42:	1c43      	adds	r3, r0, #1
 8004e44:	d102      	bne.n	8004e4c <_fstat_r+0x1c>
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	b103      	cbz	r3, 8004e4c <_fstat_r+0x1c>
 8004e4a:	602b      	str	r3, [r5, #0]
 8004e4c:	bd38      	pop	{r3, r4, r5, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000880 	.word	0x20000880

08004e54 <_isatty_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	2300      	movs	r3, #0
 8004e58:	4c05      	ldr	r4, [pc, #20]	; (8004e70 <_isatty_r+0x1c>)
 8004e5a:	4605      	mov	r5, r0
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	6023      	str	r3, [r4, #0]
 8004e60:	f7fd fccb 	bl	80027fa <_isatty>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	d102      	bne.n	8004e6e <_isatty_r+0x1a>
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	b103      	cbz	r3, 8004e6e <_isatty_r+0x1a>
 8004e6c:	602b      	str	r3, [r5, #0]
 8004e6e:	bd38      	pop	{r3, r4, r5, pc}
 8004e70:	20000880 	.word	0x20000880

08004e74 <_init>:
 8004e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e76:	bf00      	nop
 8004e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7a:	bc08      	pop	{r3}
 8004e7c:	469e      	mov	lr, r3
 8004e7e:	4770      	bx	lr

08004e80 <_fini>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	bf00      	nop
 8004e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e86:	bc08      	pop	{r3}
 8004e88:	469e      	mov	lr, r3
 8004e8a:	4770      	bx	lr
